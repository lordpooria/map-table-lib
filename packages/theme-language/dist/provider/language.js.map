{"version":3,"sources":["../../src/provider/language.tsx"],"names":["LangContext","LanguageProvider","children","language","direction","langSetting","setAppLanguage","lang","langSettingRef","changeLanguage","languageDirections","current","prevState","useLanguageState","Error","useLanguageAction"],"mappings":";;;;;;;;;AAAA;;AASA;;;;;;AAOA,MAAMA,WAAW,GAAG,0BAAc,EAAd,CAApB;;AAEO,SAASC,gBAAT,CAA0B;AAC/BC,EAAAA,QAD+B;AAE/BC,EAAAA,QAAQ,GAAG,IAFoB;AAG/BC,EAAAA,SAAS,GAAG;AAHmB,CAA1B,EAQJ;AACD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,qBAAsB;AAC1DC,IAAAA,IAAI,EAAEJ,QADoD;AAE1DC,IAAAA;AAF0D,GAAtB,CAAtC;AAIA,QAAMI,cAAc,GAAG,mBAAO;AAAEL,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,CAAvB;AAEA,QAAMK,cAAc,GAAG,wBAAaF,IAAD,IAAsB;AACvDD,IAAAA,cAAc,CAAC;AAAEC,MAAAA,IAAF;AAAQH,MAAAA,SAAS,EAAEM,0BAAmBH,IAAnB;AAAnB,KAAD,CAAd;AACD,GAFsB,EAEpB,EAFoB,CAAvB;AAIA,wBAAU,MAAM;AAEd,QACEC,cAAc,CAACG,OAAf,CAAuBP,SAAvB,KAAqCA,SAArC,IACAI,cAAc,CAACG,OAAf,CAAuBR,QAAvB,KAAoCA,QAFtC,EAGE;AACAG,MAAAA,cAAc,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,QAAR;AAAkBC,QAAAA;AAAlB,OAAD,CAAd;AACD,KALD,MAKO;AACL,UAAII,cAAc,CAACG,OAAf,CAAuBP,SAAvB,KAAqCA,SAAzC,EAAoD;AAClDE,QAAAA,cAAc,CAAEM,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBR,UAAAA;AAAhB,SAAhB,CAAD,CAAd;AACD;;AACD,UAAII,cAAc,CAACG,OAAf,CAAuBR,QAAvB,KAAoCA,QAAxC,EAAkD;AAChDG,QAAAA,cAAc,CAAEM,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBT,UAAAA;AAAhB,SAAhB,CAAD,CAAd;AACD;AACF;AACF,GAfD,EAeG,CAACC,SAAD,EAAYD,QAAZ,CAfH;AAgBA,SACE,6BAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEE,MAAAA,WAAF;AAAeI,MAAAA;AAAf;AAA7B,KACGP,QADH,CADF;AAKD;;AAEM,SAASW,gBAAT,GAA4B;AACjC,QAAM;AAAER,IAAAA;AAAF,MAAkB,uBAAWL,WAAX,CAAxB;;AACA,MAAI,CAACK,WAAL,EAAkB;AAChB,UAAM,IAAIS,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,SAAOT,WAAP;AACD;;AAEM,SAASU,iBAAT,GAA6B;AAClC,QAAM;AAAEN,IAAAA;AAAF,MAAqB,uBAAWT,WAAX,CAA3B;;AACA,MAAI,CAACS,cAAL,EAAqB;AACnB,UAAM,IAAIK,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,SAAOL,cAAP;AACD","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { AppLanguage, Dir, LangString } from \"../types\";\nimport { languageDirections } from \"../utils\";\n\nexport type LangContextType = {\n  langSetting: AppLanguage;\n  changeLanguage: (_: LangString) => void;\n};\n\nconst LangContext = createContext({} as LangContextType);\n\nexport function LanguageProvider({\n  children,\n  language = \"fa\",\n  direction = \"rtl\",\n}: {\n  children: any;\n  language?: LangString;\n  direction?: Dir;\n}) {\n  const [langSetting, setAppLanguage] = useState<AppLanguage>({\n    lang: language,\n    direction,\n  });\n  const langSettingRef = useRef({ language, direction });\n\n  const changeLanguage = useCallback((lang: LangString) => {\n    setAppLanguage({ lang, direction: languageDirections[lang] });\n  }, []);\n\n  useEffect(() => {\n    \n    if (\n      langSettingRef.current.direction !== direction &&\n      langSettingRef.current.language !== language\n    ) {\n      setAppLanguage({ lang: language, direction });\n    } else {\n      if (langSettingRef.current.direction !== direction) {\n        setAppLanguage((prevState) => ({ ...prevState, direction }));\n      }\n      if (langSettingRef.current.language !== language) {\n        setAppLanguage((prevState) => ({ ...prevState, language }));\n      }\n    }\n  }, [direction, language]);\n  return (\n    <LangContext.Provider value={{ langSetting, changeLanguage }}>\n      {children}\n    </LangContext.Provider>\n  );\n}\n\nexport function useLanguageState() {\n  const { langSetting } = useContext(LangContext);\n  if (!langSetting) {\n    throw new Error(\"Language Setting should use inside language provider\");\n  }\n  return langSetting;\n}\n\nexport function useLanguageAction() {\n  const { changeLanguage } = useContext(LangContext);\n  if (!changeLanguage) {\n    throw new Error(\"Change Language should use inside language provider\");\n  }\n\n  return changeLanguage;\n}\n"],"file":"language.js"}