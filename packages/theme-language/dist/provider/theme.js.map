{"version":3,"sources":["../../src/provider/theme.tsx"],"names":["ThemeContext","ThemeProvider","children","rawTheme","defaultTheme","theme","useThemeObject","Error"],"mappings":";;;;;;;;AACA;;AACA;;;;;;AAIA,MAAMA,YAAY,GAAG,0BAAc,EAAd,CAArB;;AAEO,SAASC,aAAT,CAAuB;AAC5BC,EAAAA,QAD4B;AAE5BC,EAAAA,QAAQ,GAAGC;AAFiB,CAAvB,EAMJ;AACD,QAAMC,KAAK,GAAG,kCAAgBF,QAAhB,CAAd;AAEA,SACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEE;AAA9B,KAAsCH,QAAtC,CADF;AAGD;;AAEM,SAASI,cAAT,GAA0B;AAC/B,QAAMD,KAAK,GAAG,uBAAWL,YAAX,CAAd;;AACA,MAAI,CAACK,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,SAAOF,KAAP;AACD","sourcesContent":["import { Theme } from \"@material-ui/core\";\nimport React, { createContext, useContext } from \"react\";\nimport { defaultTheme, useThemeCreator } from \"../theme/createTheme\";\n\nexport type ThemeContextType = Theme;\n\nconst ThemeContext = createContext({} as ThemeContextType);\n\nexport function ThemeProvider({\n  children,\n  rawTheme = defaultTheme,\n}: {\n  children: any;\n  rawTheme?: any;\n}) {\n  const theme = useThemeCreator(rawTheme);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n}\n\nexport function useThemeObject() {\n  const theme = useContext(ThemeContext);\n  if (!theme) {\n    throw new Error(\"Language Setting should use inside language provider\");\n  }\n\n  return theme;\n}\n"],"file":"theme.js"}