import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { DATA_FIELD, HESABA_DATA_FIELD } from "../utils/constants";
import {
  RawTableColumns,
  RawTableRows,
  TableColumns,
  TableRows,
} from "../types";

export type VirtualizeStateType = {
  // onOrOffRows: Record<number | "all", boolean>;
  visibleRows: TableRows;
  visibleColumns: TableColumns;
  // selectedRows: Array<number>;
};

//if "all" is true this object contains unchecked rows and visa versa
export const initialState: VirtualizeStateType = {
  // onOrOffRows: {
  //   all: false,
  // },
  // selectedRows: [],
  visibleRows: [],
  visibleColumns: [],
};

const virtualizeTableSlice = createSlice({
  name: "VirtualizeTable",
  initialState,
  reducers: {
    // toggleSingleRow(state, action: PayloadAction<{ index: number }>) {
    //   const { index } = action.payload;
    //   state.visibleRows[index].selected = !state.visibleRows[index].selected;
    // },
    // toggleAllRows(state, action: PayloadAction<{ isSelected: boolean }>) {
    //   const { isSelected } = action.payload;
    //   state.visibleRows = state.visibleRows.map((r) => ({
    //     ...r,
    //     selected: !isSelected,
    //   }));
    // },
    // setTableData(
    //   state,
    //   action: PayloadAction<{ columns: RawTableColumns; rows: RawTableRows }>
    // ) {
    //   const { columns, rows } = action.payload;
    //   state.visibleColumns = columns.map((c) => ({
    //     ...c,
    //     [DATA_FIELD]: `${HESABA_DATA_FIELD}-${c.key}`,
    //   }));
    //   state.visibleRows = rows.map((r) => ({ ...r, selected: false }));
    // },
  },
});

export const virtualizeTableReducer = virtualizeTableSlice.reducer;
export const {
  // toggleSingleRow,
  // toggleAllRows,
  // setTableData,
} = virtualizeTableSlice.actions;
