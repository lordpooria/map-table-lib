{"version":3,"sources":["../../src/toolbar/TableToolbar.tsx"],"names":["useStyles","theme","toolbarContainer","borderBottom","palette","grey","display","alignItems","tools","flex","title","padding","spacing","icon","fill","secondary","main","TableToolbar","height","classes","rest","toolbarClasses","DEFAULT_TOOLBAR_HEIGHT","root","operationOnRows","ToolbarMoreVert","anchorEl","setAnchorEl","open","Boolean","enhancedColumns","state","handleClick","event","currentTarget","handleClose","toggleVisibleColumns","actions","toggleShowFilter","iconButton","menu","menuItem","map","c","index","key","visible","label","ToolbarOperation","numRowsSelected","Component"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  createStyles,\n  FormControlLabel,\n  IconButton,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Switch,\n  Typography,\n} from \"@material-ui/core\";\nimport MoreVert from \"../assets/icons/common/MoreVertIcon\";\n\nimport { useTStoreActions, useTStoreState } from \"../store/reducerHooks\";\n\nimport { TableToolbarCompleteProps } from \"../types/TableToolbar\";\nimport clsx from \"clsx\";\nimport { DEFAULT_TOOLBAR_HEIGHT } from \"../utils/themeConstants\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    toolbarContainer: {\n      borderBottom: `solid ${theme.palette.grey[300]} 1px`,\n      display: \"flex\",\n      alignItems: \"center\",\n      \n    },\n    tools: {\n      display: \"flex\",\n      alignItems: \"center\",\n      flex:1,\n    },\n    title: { padding: `0 ${theme.spacing(1)}`},\n    icon: {\n      fill: theme.palette.secondary.main,\n    },\n  })\n);\n\nexport const TableToolbar = ({\n  title,\n  height,\n  classes,\n  ...rest\n}: TableToolbarCompleteProps) => {\n  const toolbarClasses = useStyles();\n\n  return (\n    <div\n      style={{ height: height || DEFAULT_TOOLBAR_HEIGHT }}\n      className={clsx(toolbarClasses.toolbarContainer, classes?.root)}\n    >\n      \n      <div className={clsx(toolbarClasses.tools)}>\n        <ToolbarMoreVert classes={classes} />\n\n        {rest.operationOnRows && <ToolbarOperation {...rest} />}\n      </div>\n      <Typography align=\"center\" className={toolbarClasses.title}>\n        {title ?? \"\"}\n      </Typography>\n\n    </div>\n  );\n};\n\nexport function ToolbarMoreVert({\n  classes,\n}: {\n  classes: TableToolbarCompleteProps[\"classes\"];\n}) {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const enhancedColumns = useTStoreState((state) => state.enhancedColumns);\n  const toolbarClasses = useStyles();\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const toggleVisibleColumns = useTStoreActions(\n    (actions) => actions.toggleVisibleColumns\n  );\n  const toggleShowFilter = useTStoreActions(\n    (actions) => actions.toggleShowFilter\n  );\n\n  return (\n    <>\n      <IconButton onClick={handleClick} className={classes?.iconButton}>\n        <MoreVert\n          className={clsx(\n            { [toolbarClasses.icon]: !classes?.icon },\n            classes?.icon\n          )}\n        />\n      </IconButton>\n\n      <Menu\n        disableScrollLock={true}\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        className={classes?.menu}\n      >\n        <MenuItem\n          className={classes?.menuItem}\n          onClick={() => {\n            toggleShowFilter(true);\n            handleClose();\n          }}\n        >\n          filter\n        </MenuItem>\n        {enhancedColumns?.map((c: any, index: any) => (\n          <MenuItem key={c.key} className={classes?.menuItem}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={c.visible}\n                  onChange={() => toggleVisibleColumns({ index })}\n                  name={c.label}\n                />\n              }\n              label={c.label}\n            />\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n}\n\nexport function ToolbarOperation({\n  operationOnRows,\n}: {\n  operationOnRows?: TableToolbarCompleteProps[\"operationOnRows\"];\n}) {\n  const numRowsSelected = useTStoreState((state) => state.numRowsSelected);\n\n  return (\n    <>\n      {operationOnRows &&\n        numRowsSelected > 0 &&\n        operationOnRows.map((Component: any, index: number) => (\n          <Component key={index} />\n        ))}\n    </>\n  );\n}\n"],"file":"TableToolbar.js"}