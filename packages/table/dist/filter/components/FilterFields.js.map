{"version":3,"sources":["../../../src/filter/components/FilterFields.tsx"],"names":["useStyles","input","borderColor","FilterColumn","value","filterIndex","columns","columnIndex","classes","t","v","inClasses","inputValue","setInputValue","filterSetColumn","actions","_","column","newInputValue","root","option","label","params","FilterOperations","operation","columnType","filterSetOperation","options","setOptions","commonOperations","lastType","current","mapOptions","numericOptions","stringOptions","dateOptions","name","display","alignItems","InputProps","FilterValues","val","valIndex","filterSetValue","onSetFilter","valueIndex","FilterValue","undefined","DateInput","SimpleNumericInput","SimpleStringInput"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useRef, useState } from \"react\";\nimport { createStyles, makeStyles, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport { operations } from \"./utilsFilter\";\nimport { SimpleNumericInput, SimpleStringInput } from \"./FilterValues\";\nimport DateInput from \"./FilterValueDate\";\n// import { FilterMaps } from \"./FilterValueMap\";\nimport { ColumnType, TableColumnData, TableColumns } from \"../../types/main\";\nimport { useTStoreActions } from \"../../store/reducerHooks\";\nimport clsx from \"clsx\";\nimport {\n  FilterOperationsType,\n  FilterValueType,\n} from \"../../types/VirtualTableFilter\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({ input: { borderColor: \"transparent\" } })\n);\n\ninterface ColumnProps {\n  filterIndex: number;\n  columnIndex: number;\n  value: TableColumnData | null;\n  columns: TableColumns | undefined;\n  classes?: { root?: string; input?: string };\n}\n\nexport const FilterColumn = memo(\n  ({ value, filterIndex, columns, columnIndex, classes }: ColumnProps) => {\n    const t = (v: any) => v;\n    const inClasses = useStyles();\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const filterSetColumn = useTStoreActions(\n      (actions) => actions.filterSetColumn\n    );\n    // const allOptions = value && columns ? [value, ...columns] : columns;\n    // if (!columns) return null;\n    return (\n      <Autocomplete\n        value={value}\n        onChange={(_: any, column) => {\n          if (!column || typeof column === \"string\") return;\n          filterSetColumn({\n            column,\n            columnIndex,\n            filterIndex,\n          });\n        }}\n        freeSolo\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        options={columns as any}\n        className={clsx(inClasses.input, classes?.root)}\n        getOptionLabel={(option) => (option ? option.label : \"\")}\n        getOptionSelected={(option, value) =>\n          option?.label ? option.label === value.label : true\n        }\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            classes={{ root: classes?.input }}\n            label={t(\"column\")}\n            // InputProps={{ ...params.InputProps }}\n\n            variant=\"standard\"\n            // label={t(\"preperation.filter.selectColumn\")}\n            // variant=\"outlined\"\n          />\n        )}\n      />\n    );\n  }\n);\n\ninterface OperationProps {\n  filterIndex: number;\n  operation: FilterOperationsType | undefined;\n  columnType: ColumnType | undefined;\n  classes?: { root?: string; input?: string };\n}\n\nexport const FilterOperations = memo(\n  ({ operation, filterIndex, columnType, classes }: OperationProps) => {\n    const t = (v: any) => v;\n    const inClasses = useStyles();\n\n    const filterSetOperation = useTStoreActions(\n      (actions) => actions.filterSetOperation\n    );\n    const [options, setOptions] = useState(operations(t).commonOperations);\n    const [inputValue, setInputValue] = useState(\"\");\n    const lastType = useRef(\"\");\n\n    useEffect(() => {\n      if (!columnType) return;\n      if (lastType.current !== columnType && columnType) {\n        lastType.current = columnType;\n        switch (columnType) {\n          case \"geographic\":\n            setOptions([...operations(t).mapOptions]);\n            break;\n          case \"number\":\n            setOptions([\n              ...operations(t).commonOperations,\n              ...operations(t).numericOptions,\n            ]);\n            break;\n          case \"string\":\n            setOptions([\n              ...operations(t).commonOperations,\n              ...operations(t).stringOptions,\n            ]);\n            break;\n          case \"date\":\n            setOptions([\n              ...operations(t).commonOperations,\n              ...operations(t).dateOptions,\n            ]);\n            break;\n          default:\n            setOptions(operations(t).commonOperations);\n        }\n      }\n    }, [columnType, t]);\n\n    return (\n      <Autocomplete\n        autoComplete\n        value={operation}\n        onChange={(_: any, operation) => {\n          if (!operation || typeof operation === \"string\") return;\n          filterSetOperation({ operation, filterIndex });\n        }}\n        freeSolo\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        options={options}\n        className={clsx(inClasses.input, classes?.root)}\n        getOptionLabel={(option) => option?.name ?? \"\"}\n        getOptionSelected={(option, value) =>\n          !option?.name ? option.name === value.name : true\n        }\n        renderInput={(params) => (\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            {/* <Tooltip title={t('preperation.filter.selectOpTip') as string}>\n                        <div>\n                            <Calculator />\n                        </div>\n                    </Tooltip> */}\n            <TextField\n              {...params}\n              classes={{ root: classes?.input }}\n              label={t(\"op\")}\n              InputProps={{ ...params.InputProps }}\n              variant=\"standard\"\n              //  label={t(\"preperation.filter.operation\")}\n            />\n          </div>\n        )}\n      />\n    );\n  }\n);\ninterface ValueProps {\n  filterIndex: number;\n  val: FilterValueType;\n  valIndex: number;\n  columnType: ColumnType | undefined;\n  label: string;\n  classes?: { root?: string; input?: string };\n}\nexport const FilterValues = memo(\n  ({ filterIndex, val, valIndex, columnType, label, classes }: ValueProps) => {\n    const filterSetValue = useTStoreActions((actions) => actions.filterSetValue);\n\n    const onSetFilter = (\n      filterIndex: number,\n      valueIndex: number,\n      value: any\n    ) => {\n      filterSetValue({ filterIndex, valueIndex, value });\n    };\n\n    let FilterValue = undefined;\n    // if (columnType === \"geographic\") {\n    //   FilterValue = FilterMaps;\n    // } else\n    if (columnType === \"date\") {\n      FilterValue = DateInput;\n    } else if (columnType === \"number\") {\n      FilterValue = SimpleNumericInput;\n    } else {\n      FilterValue = SimpleStringInput;\n    }\n\n    return (\n      <FilterValue\n        filterIndex={filterIndex}\n        valIndex={valIndex}\n        onSetFilter={onSetFilter}\n        value={val}\n        label={label}\n        classes={classes}\n      />\n    );\n  }\n);\n"],"file":"FilterFields.js"}