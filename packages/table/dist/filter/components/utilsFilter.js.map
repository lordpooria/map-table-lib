{"version":3,"sources":["../../../src/filter/components/utilsFilter.ts"],"names":["FILTER_SCHEMA_KEY","baseTranslation","operations","t","commonOperations","key","name","type","valSize","stringOptions","numericOptions","dateOptions","mapOptions","reorderValues","op","Array","fill","Date","toISOString","undefined"],"mappings":"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","sourcesContent":["// import {\n//   UISchemaItem,\n//   UISchema,\n//   UISchemaWithId,\n//   ColumnTypes,\n// } from \"/models/graph\";\n// import { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n\nimport { ColumnType } from \"../../types/main\";\nimport { FilterOperationsType } from \"../../types/VirtualTableFilter\";\n\n// type FilterTypes = \"common\" | ColumnTypes;\nexport type FilterMethod = \"AND\" | \"OR\" | \"CUSTOM\";\n\nexport const FILTER_SCHEMA_KEY = \"schema\";\n\n// export type FilterOperationsType = {\n//   key: string;\n//   name: string;\n//   type: FilterTypes;\n//   valSize?: number;\n// };\n\n// export type GraphFilter = {\n//   id: string;\n//   name: string;\n//   col: Array<UISchemaItem | null>;\n//   op: FilterOperationsType | null;\n//   val: FilterValuesType;\n//   // uiValid: string | undefined;\n// };\n\n// export type FilterNodeProp = AppNodeType & {\n//   data: {\n//     filters: Array<GraphFilter>;\n//     groupFilterName: string;\n//     [FILTER_SCHEMA_KEY]: UISchemaWithId;\n\n//     script: string;\n//   };\n// };\n\n// export const filtersExist = (\n//   properties: Record<string, any>,\n//   node: AppNodeType\n// ) => {\n//   return properties[node.id]?.filters.length;\n// };\n\nconst baseTranslation = \"preperation.filter.operations.\";\nexport const operations = (\n  t: any\n): Record<string, Array<FilterOperationsType>> => ({\n  commonOperations: [\n    {\n      key: \"equals\",\n      name: t(`${baseTranslation}equals`),\n      type: \"common\",\n      valSize: 1,\n    },\n    {\n      key: \"notEquals\",\n      name: t(`${baseTranslation}notEquals`),\n      type: \"common\",\n      valSize: 1,\n    },\n    { key: \"isNull\", name: t(`${baseTranslation}isNull`), type: \"common\" },\n    {\n      key: \"isNotNull\",\n      name: t(`${baseTranslation}isNotNull`),\n      type: \"common\",\n    },\n    { key: \"isEmpty\", name: t(`${baseTranslation}isEmpty`), type: \"common\" },\n    {\n      key: \"isNotEmpty\",\n      name: t(`${baseTranslation}isNotEmpty`),\n      type: \"common\",\n    },\n    {\n      key: \"contains\",\n      name: t(`${baseTranslation}contains`),\n      type: \"common\",\n      valSize: 1,\n    },\n    {\n      key: \"notContaines\",\n      name: t(`${baseTranslation}notContaines`),\n      type: \"common\",\n      valSize: 1,\n    },\n  ],\n  stringOptions: [\n    {\n      key: \"regex\",\n      name: t(`${baseTranslation}regex`),\n      type: \"string\",\n      valSize: 1,\n    },\n    {\n      key: \"startWith\",\n      name: t(`${baseTranslation}startWith`),\n      type: \"string\",\n      valSize: 1,\n    },\n    {\n      key: \"endWith\",\n      name: t(`${baseTranslation}endWith`),\n      type: \"string\",\n      valSize: 1,\n    },\n  ],\n  numericOptions: [\n    {\n      key: \"between\",\n      name: t(`${baseTranslation}between`),\n      type: \"number\",\n      valSize: 2,\n    },\n  ],\n  dateOptions: [\n    {\n      key: \"dateFrom\",\n      name: t(`${baseTranslation}dateFrom`),\n      type: \"date\",\n      valSize: 1,\n    },\n    {\n      key: \"dateTo\",\n      name: t(`${baseTranslation}dateTo`),\n      type: \"date\",\n      valSize: 1,\n    },\n    {\n      key: \"between\",\n      name: t(`${baseTranslation}between`),\n      type: \"date\",\n      valSize: 2,\n    },\n  ],\n  mapOptions: [\n    {\n      key: \"surrounded\",\n      name: t(`${baseTranslation}surrounded`),\n      type: \"geographic\",\n      valSize: 1,\n    },\n  ],\n});\n\nexport const reorderValues = (\n  type: ColumnType | undefined,\n  op: FilterOperationsType,\n  // val: FilterValuesType\n) => {\n return !op.valSize\n    ? []\n    : // : op.valSize < val.length\n      // ? val.slice(0, op.valSize)\n      [\n        // ...val,\n        ...new Array(op.valSize).fill(\n          type === \"date\"\n            ? new Date().toISOString()\n            : type === \"number\"\n            ? 0\n            : type === \"geographic\"\n            ? undefined\n            : \"\"\n        ),\n      ];\n};\n\n// export const filterGetProperAttr = (node: FilterNodeProp) => {\n//   return node;\n// };\n\n// export function filteredSchema(filter: GraphFilter, schema: UISchema) {\n//   let remainingSchema;\n//   let typedSchema;\n//   if (filter?.col?.length) {\n//     const filtercolumnsObj = filter.col.reduce(\n//       (prev, cur) => (cur?.name ? { ...prev, [cur.name]: true } : prev),\n//       {}\n//     );\n//     remainingSchema = schema.filter((s) => !(s.name in filtercolumnsObj));\n//     typedSchema = remainingSchema.filter(\n//       (s) => s.type === filter?.col[0]?.type\n//     );\n//   }\n//   return {\n//     typedSchema,\n//     remainingSchema,\n//   };\n// }\n\n// export const checkFilterValidation = (\n//   schema: UISchema,\n//   filter: GraphFilter,\n//   t: any\n// ) => {\n//   const schemaObj = schema.reduce(\n//     (prev, cur) => ({\n//       ...prev,\n//       [cur.name]: cur,\n//     }),\n//     {}\n//   );\n\n//   if (filter.col.length === 0 || !filter.op) {\n//     return t(\"error.required\");\n//   } else if (filter.col.some((col) => !col || !(col.name in schemaObj))) {\n//     return t(\"error.wrongSchema\");\n//   }\n// };\n"],"file":"utilsFilter.js"}