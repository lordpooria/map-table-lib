{"version":3,"sources":["../../src/cell/Cell.tsx"],"names":["useCellStyles","rowCell","simpleCell","fontFamily","SimpleTableCell","value","className","classes","Cell","label","minWidth","ROW_MIN_WIDTH","colKey","CellComponent","HeaderComponent","visible","sorted","row","rowIndex","colIndex","columnsLength","sticky","custom","isScrolling","rest","cellClasses","currentWidths","calcMinWidth","DATA_FIELD","RESIZE_HANDLE_WIDTH","width","overflow","textOverflow","whiteSpace","root"],"mappings":";;;;;;;AAAA;;AACA;;AAGA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,aAAa,GAAG,sBAAW,MAC/B,wBAAa;AACXC,EAAAA,OAAO,EAAE,EADE;AAEXC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAE;AADF;AAFD,CAAb,CADoB,CAAtB;;AASA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA+C;AACrE,QAAMC,OAAO,GAAGP,aAAa,EAA7B;AACA,SACE,6BAAC,gBAAD;AAAY,IAAA,KAAK,EAAC,QAAlB;AAA2B,IAAA,SAAS,EAAE,mBAAKO,OAAO,CAACL,UAAb,EAAyBI,SAAzB;AAAtC,KACGD,KADH,CADF;AAKD,CAPD;;AAoBA,MAAMG,IAAI,GAAG,CAAC;AACZC,EAAAA,KADY;AAEZC,EAAAA,QAAQ,GAAGC,6BAFC;AAGZC,EAAAA,MAHY;AAIZC,EAAAA,aAAa,GAAGT,eAJJ;AAKZU,EAAAA,eALY;AAMZC,EAAAA,OANY;AAOZC,EAAAA,MAPY;AAQZC,EAAAA,GARY;AASZC,EAAAA,QATY;AAUZC,EAAAA,QAVY;AAWZC,EAAAA,aAXY;AAaZb,EAAAA,OAbY;AAcZc,EAAAA,MAdY;AAeZC,EAAAA,MAfY;AAgBZC,EAAAA,WAhBY;AAiBZ,KAAGC;AAjBS,CAAD,KAkBA;AAAA;;AACX,QAAMC,WAAW,GAAGzB,aAAa,EAAjC;AAGA,QAAM;AAAE0B,IAAAA;AAAF,MAAoB,2CAA1B;AAEA,QAAMC,YAAY,GAAGD,aAAa,CAACF,IAAI,CAACI,qBAAD,CAAL,CAAb,GACjBF,aAAa,CAACF,IAAI,CAACI,qBAAD,CAAL,CAAb,GAAkCC,mCADjB,GAEjBnB,QAAQ,GAAGmB,mCAFf;AAGA,QAAMxB,KAAK,GACT,OAAOY,GAAG,CAACL,MAAD,CAAV,KAAuB,QAAvB,kBAAkCK,GAAG,CAACL,MAAD,CAArC,gDAAkC,YAAaP,KAA/C,GAAuDY,GAAG,CAACL,MAAD,CAD5D;AAGA,SACE,iDACMY,IADN;AAEE,IAAA,GAAG,EAAEZ,MAFP;AAGE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAEiB,YAAY,IAAIjB,QADrB;AAELoB,MAAAA,KAAK,EAAEH,YAAY,IAAIjB,QAFlB;AAGLqB,MAAAA,QAAQ,EAAE,QAHL;AAILC,MAAAA,YAAY,EAAE,UAJT;AAKLC,MAAAA,UAAU,EAAE;AALP,KAHT;AAUE,IAAA,SAAS,EAAE,mBAETR,WAAW,CAACxB,OAFH,EAGTM,OAHS,aAGTA,OAHS,uBAGTA,OAAO,CAAE2B,IAHA;AAVb,MAkBE,6BAAC,aAAD;AACE,IAAA,KAAK,EAAEzB,KADT;AAEE,IAAA,KAAK,EAAES,QAFT;AAGE,IAAA,MAAM,EAAEA,QAHV;AAIE,IAAA,GAAG,EAAED,GAJP;AAKE,IAAA,KAAK,EAAEZ,KALT;AAME,IAAA,SAAS,EAAEE,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEL;AANtB,IAlBF,CADF;AA6BD,CA3DD;;eA6DeM,I","sourcesContent":["import { createStyles, Typography, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nimport { TableComponentProps, TableColumn } from \"../types/main\";\nimport clsx from \"clsx\";\nimport { DATA_FIELD } from \"../utils/constants\";\nimport { RESIZE_HANDLE_WIDTH, ROW_MIN_WIDTH } from \"../utils/themeConstants\";\nimport { CellClasses } from \"../types/styles\";\nimport { useTableSizeState } from \"../container/TableSizeProvider\";\n\nconst useCellStyles = makeStyles(() =>\n  createStyles({\n    rowCell: {},\n    simpleCell: {\n      fontFamily: \"inherit\",\n    },\n  })\n);\n\nconst SimpleTableCell = ({ value, className }: TableComponentProps) => {\n  const classes = useCellStyles();\n  return (\n    <Typography align=\"center\" className={clsx(classes.simpleCell, className)}>\n      {value}\n    </Typography>\n  );\n};\n\ninterface Props extends TableColumn {\n  row: any;\n  rowIndex: number;\n  colIndex: number;\n  // currentWidths: CurrentWidths;\n  columnsLength: number;\n  colKey: string;\n  classes?: CellClasses;\n  isScrolling?: any;\n}\n\nconst Cell = ({\n  label,\n  minWidth = ROW_MIN_WIDTH,\n  colKey,\n  CellComponent = SimpleTableCell,\n  HeaderComponent,\n  visible,\n  sorted,\n  row,\n  rowIndex,\n  colIndex,\n  columnsLength,\n  // currentWidths,\n  classes,\n  sticky,\n  custom,\n  isScrolling,\n  ...rest\n}: Props) => {\n  const cellClasses = useCellStyles();\n\n  // const handleW = colIndex === columnsLength - 1 ? 0 : RESIZE_HANDLE_WIDTH;\n  const { currentWidths } = useTableSizeState();\n\n  const calcMinWidth = currentWidths[rest[DATA_FIELD]]\n    ? currentWidths[rest[DATA_FIELD]] + RESIZE_HANDLE_WIDTH\n    : minWidth + RESIZE_HANDLE_WIDTH;\n  const value =\n    typeof row[colKey] === \"object\" ? row[colKey]?.value : row[colKey];\n\n  return (\n    <div\n      {...rest}\n      key={colKey}\n      style={{\n        minWidth: calcMinWidth || minWidth,\n        width: calcMinWidth || minWidth,\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"normal\",\n      }}\n      className={clsx(\n        // commonClasses.tableCell,\n        cellClasses.rowCell,\n        classes?.root\n        // { [classes.evenRow]: index % 2 === 0 },\n        // { [classes.oddRow]: index % 2 !== 0 }\n      )}\n    >\n      <CellComponent\n        label={label}\n        index={rowIndex}\n        rowKey={rowIndex}\n        row={row}\n        value={value}\n        className={classes?.simpleCell}\n      />\n    </div>\n  );\n};\n\nexport default Cell;\n"],"file":"Cell.js"}