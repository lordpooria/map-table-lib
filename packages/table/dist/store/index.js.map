{"version":3,"sources":["../../src/store/index.ts"],"names":["vtStore","VTVersion","settings","direction","lang","visibleRows","enhancedColumns","showFilter","filters","toggleSingleRow","state","index","selected","toggleAllRows","isSelected","map","r","toggleShowFilter","length","col","push","id","Date","getTime","toString","column","key","label","type","operation","undefined","value","setTableData","payload","fakeAppendTableData","rows","slice","toggleVisibleColumns","visible","setStickyColumn","sticky","numRowsSelected","filter","selectedRows","reduce","acc","cur","idx","visibleColumns","c","stickyColumns","sortTable","sortType","columnKey","console","warn","findIndex","ec","sorted","sort","a","b","filterSetColumn","action","filterIndex","columnIndex","filterSetOperation","filterSetValue","valueIndex","filterAdd","filterDelete","splice","store"],"mappings":"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","sourcesContent":["import { action, Action, computed, Computed, createStore } from \"easy-peasy\";\nimport {\n  OnSetTableDataPayload,\n  SetFilterColPayload,\n  SetFilterOpPayload,\n  SetFilterValPayload,\n} from \"../types/store\";\nimport { TableFilterType } from \"../types/VirtualTableFilter\";\nimport { TableColumns, TableRows, SortType, PageDir } from \"../types/main\";\nimport { reorderValues } from \"../filter/components/utilsFilter\";\n\nexport interface VTStoreModel {\n  VTVersion: string;\n  settings: { direction: PageDir; lang: string };\n  visibleRows: TableRows;\n  enhancedColumns: TableColumns;\n\n  showFilter: boolean;\n  filters: Array<TableFilterType>;\n\n  toggleSingleRow: Action<VTStoreModel, { index: number }>;\n  toggleAllRows: Action<VTStoreModel, { isSelected: boolean }>;\n  toggleVisibleColumns: Action<VTStoreModel, { index: number }>;\n  toggleShowFilter: Action<VTStoreModel, boolean>;\n\n  setTableData: Action<VTStoreModel, OnSetTableDataPayload>;\n  fakeAppendTableData: Action<VTStoreModel, any>;\n  setStickyColumn: Action<VTStoreModel, { index: number }>;\n\n  filterSetColumn: Action<VTStoreModel, SetFilterColPayload>;\n  filterSetOperation: Action<VTStoreModel, SetFilterOpPayload>;\n  filterSetValue: Action<VTStoreModel, SetFilterValPayload>;\n  filterDelete: Action<VTStoreModel, { index: number }>;\n  filterAdd: Action<VTStoreModel, { columnKey: string }>;\n\n  sortTable: Action<\n    VTStoreModel,\n    { index: number; sortType: SortType; columnKey: string }\n  >;\n\n  numRowsSelected: Computed<VTStoreModel, number>;\n  selectedRows: Computed<VTStoreModel, Array<number>>;\n  visibleColumns: Computed<VTStoreModel, TableColumns>;\n  stickyColumns: Computed<VTStoreModel, TableColumns>;\n}\n\nexport const vtStore: VTStoreModel = {\n  VTVersion: \"1.0.0\",\n  settings: { direction: \"rtl\", lang: \"fa\" },\n  visibleRows: [],\n  enhancedColumns: [],\n\n  showFilter: false,\n  filters: [],\n\n  toggleSingleRow: action((state, { index }) => {\n    state.visibleRows[index].selected = !state.visibleRows[index].selected;\n  }),\n\n  toggleAllRows: action((state, { isSelected }) => {\n    state.visibleRows = state.visibleRows.map((r) => ({\n      ...r,\n      selected: !isSelected,\n    }));\n  }),\n\n  toggleShowFilter: action((state, showFilter) => {\n    if (state.filters.length === 0) {\n      const col = state.enhancedColumns[0];\n      state.filters.push({\n        id: new Date().getTime().toString(),\n        // key: string;\n        column: [{ key: col.key, label: col.label, type: col.type }],\n        operation: undefined,\n        value: [undefined],\n      });\n    }\n    state.showFilter = showFilter;\n  }),\n\n  setTableData: action((state, payload) => {\n    const { enhancedColumns, visibleRows } = payload;\n    state.visibleRows = visibleRows;\n    state.enhancedColumns = enhancedColumns;\n  }),\n\n  fakeAppendTableData: action((state, { rows, index }) => {\n    state.visibleRows = [\n      ...state.visibleRows.slice(0, index + 1),\n      ...rows,\n      ...state.visibleRows.slice(index + 1),\n    ];\n  }),\n\n  toggleVisibleColumns: action((state, { index }) => {\n    state.enhancedColumns[index].visible = !state.enhancedColumns[index]\n      .visible;\n  }),\n\n  setStickyColumn: action((state, { index }) => {\n    state.enhancedColumns[index].sticky = !state.enhancedColumns[index].sticky;\n  }),\n\n  numRowsSelected: computed(\n    (state) => state.visibleRows.filter((r) => r.selected).length\n  ),\n\n  selectedRows: computed(\n    (state) =>\n      state.visibleRows.reduce(\n        (acc, cur, idx) => (cur.selected ? [...acc, idx] : acc) as any,\n        []\n      ) as any\n  ),\n  visibleColumns: computed((state) =>\n    state.enhancedColumns.filter((c) => c.visible && !c.sticky)\n  ),\n  stickyColumns: computed((state) =>\n    state.enhancedColumns.filter((c) => c.visible && c.sticky)\n  ),\n\n  sortTable: action((state, { index, sortType, columnKey }) => {\n    if (!state.visibleColumns[index]) {\n      console.warn(\"column not found something wrong!\");\n      return;\n    }\n\n    const idx = state.enhancedColumns.findIndex((ec) => ec.key === columnKey);\n    if (idx === -1) return;\n\n    state.enhancedColumns.map((ec) => (ec.sorted = undefined));\n    state.enhancedColumns[idx].sorted = sortType;\n    if (state.visibleRows.length > 0)\n      state.visibleRows =\n        sortType === \"DESC\"\n          ? state.visibleRows.sort((a, b) =>\n              (a[columnKey] as any) < (b[columnKey] as any) ? 1 : -1\n            )\n          : state.visibleRows.sort((a, b) =>\n              (a[columnKey] as any) < (b[columnKey] as any) ? -1 : 1\n            );\n  }),\n\n  filterSetColumn: action((state, action) => {\n    const { filterIndex, column, columnIndex } = action;\n    const filter = state.filters[filterIndex];\n    if (filter.operation?.type !== column.type) {\n      filter.operation = undefined;\n    }\n    // const colIndex = state.enhancedColumns.findIndex((ec) => ec.key === colKey);\n    // if (colIndex === -1) return;\n\n    filter.column[columnIndex] = column;\n    // if (column.type === \"geographic\" && filter.column.length === 1) {\n    //   filter.col.push(column);\n    // } else if (column.type !== \"geographic\" && filter.col.length === 2) {\n    //   el.data.filters[filterIndex].col = filter.col.slice(0, 1);\n    // }\n  }),\n\n  filterSetOperation: action((state, action) => {\n    const { filterIndex, operation } = action;\n    // const filter = state.filters[filterIndex];\n\n    state.filters[filterIndex].operation = operation;\n    const type = state.filters[filterIndex].column[0]?.type;\n\n    state.filters[filterIndex].value = reorderValues(\n      type,\n      operation as any\n      // filter.value\n    );\n  }),\n\n  filterSetValue: action((state, action) => {\n    const { filterIndex, value, valueIndex } = action;\n    state.filters[filterIndex].value[valueIndex] = value;\n    // else if (val !== undefined) {\n    //   el.data.filters[filterIndex].val = val;\n    // }\n  }),\n\n  filterAdd: action((state, { columnKey }) => {\n    state.showFilter = true;\n    const col = state.enhancedColumns.filter((ec) => ec.key === columnKey);\n    if (!col || col.length === 0) {\n      return;\n    }\n    state.filters.push({\n      id: new Date().getTime().toString(),\n      // key: string;\n      column: [{ key: col[0].key, label: col[0].label, type: col[0].type }],\n      operation: undefined,\n      value: [undefined],\n    });\n  }),\n\n  filterDelete: action((state, { index }) => {\n    // const el = findNodeState<FilterNodeProp>(state);\n\n    state.filters?.splice(index, 1);\n  }),\n};\n\n// const nodeEnv: string = (typeof process?.__ENV__ !== 'undefined' && __ENV__) as string;\nconst store = createStore(vtStore);\n\nexport default store;\n"],"file":"index.js"}