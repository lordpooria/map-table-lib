{"version":3,"sources":["../../src/container/TableRowProvider.tsx"],"names":["TableSizeActionContext","TableRowStateContext","TableRowProvider","children","state","setState","activeRow","setActiveRow","index","useTableRowState","Error","useTableRowAction","actions"],"mappings":";;;;;;;;;AAAA;;;;;;AAOA,MAAMA,sBAAsB,GAAG,0BAC7B,EAD6B,CAA/B;AAGA,MAAMC,oBAAoB,GAAG,0BAC3B,EAD2B,CAA7B;;AAIO,SAASC,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAuE;AAE5E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAA4B;AACpDC,IAAAA,SAAS,EAAE,CAAC;AADwC,GAA5B,CAA1B;AAGA,QAAMC,YAAY,GAAG,wBAAaC,KAAD,IAAmB;AAClDH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,SAAS,EAAEE;AAAb,KAAD,CAAR;AACD,GAFoB,EAElB,EAFkB,CAArB;AAIA,SACE,6BAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEJ;AAAtC,KACE,6BAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEG;AAAxC,KACGJ,QADH,CADF,CADF;AAOD;;AAEM,SAASM,gBAAT,GAA4B;AACjC,QAAML,KAAK,GAAG,uBAAWH,oBAAX,CAAd;;AACA,MAAI,CAACG,KAAL,EAAY;AACV,UAAMM,KAAK,CAAC,2BAAD,CAAX;AACD;;AACD,SAAON,KAAP;AACD;;AAEM,SAASO,iBAAT,GAA6B;AAClC,QAAMC,OAAO,GAAG,uBAAWZ,sBAAX,CAAhB;;AACA,MAAI,CAACY,OAAL,EAAc;AACZ,UAAMF,KAAK,CAAC,2BAAD,CAAX;AACD;;AACD,SAAOE,OAAP;AACD","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from \"react\";\n\ntype TableRowStateType = {\n  activeRow: number;\n};\ntype TableRowActionType = (_: number) => void;\n\nconst TableSizeActionContext = createContext<TableRowActionType>(\n  {} as TableRowActionType\n);\nconst TableRowStateContext = createContext<TableRowStateType>(\n  {} as TableRowStateType\n);\n\nexport function TableRowProvider({ children }: { children: React.ReactNode }) {\n  // const [state, actions] = useLocalStore(() => vtStoreTableSize);\n  const [state, setState] = useState<TableRowStateType>({\n    activeRow: -1,\n  });\n  const setActiveRow = useCallback((index: number) => {\n    setState({ activeRow: index });\n  }, []);\n\n  return (\n    <TableRowStateContext.Provider value={state}>\n      <TableSizeActionContext.Provider value={setActiveRow}>\n        {children}\n      </TableSizeActionContext.Provider>\n    </TableRowStateContext.Provider>\n  );\n}\n\nexport function useTableRowState() {\n  const state = useContext(TableRowStateContext);\n  if (!state) {\n    throw Error(\"use state inside provider\");\n  }\n  return state;\n}\n\nexport function useTableRowAction() {\n  const actions = useContext(TableSizeActionContext);\n  if (!actions) {\n    throw Error(\"use state inside provider\");\n  }\n  return actions;\n}\n"],"file":"TableRowProvider.js"}