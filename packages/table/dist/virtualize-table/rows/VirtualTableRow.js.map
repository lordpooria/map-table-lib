{"version":3,"sources":["../../../src/virtualize-table/rows/VirtualTableRow.tsx"],"names":["useStyles","theme","evenRow","backgroundColor","oddRow","tableRow","display","alignItems","overflow","marginTop","commonSidebar","itemHeight","tableRowCommon","borderBottom","palette","grey","rowCell","selected","activatedRow","VirtualTableRow","props","SingleVirtualTableRow","style","rowIndex","selectable","classes","width","CheckboxProps","onRowClick","extraStyles","selectedRowStyle","rest","rowClasses","commonClasses","visibleColumns","state","visibleRows","toggleSingleRow","actions","calcRowWidth","activeRow","onRowSelect","HESABA_TABLE_ROW_CLASS","root","index","checkbox","e","stopPropagation","map","colIndex","key","length"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport { Checkbox, createStyles, makeStyles } from \"@material-ui/core\";\n\nimport { useTStoreActions, useTStoreState } from \"../../store/reducerHooks\";\nimport Cell from \"../../cell/Cell\";\nimport { Fragment } from \"react\";\nimport { commonSidebar } from \"../../utils/themeConstants\";\nimport { HESABA_TABLE_ROW_CLASS } from \"../../utils/constants\";\nimport { CompleteRowProps } from \"../../types/tableElements\";\nimport useCommonStyles from \"../../styles/commonStyles\";\nimport { chooseClass, useCalcTableWidth } from \"../../utils/helper\";\nimport { useTableRowState } from \"../../container/TableRowProvider\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    evenRow: {\n      backgroundColor: \"#f8f8f0\",\n    },\n    oddRow: {},\n    tableRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      overflow: \"hidden\",\n      marginTop: commonSidebar.itemHeight,\n    },\n    tableRowCommon: {\n      borderBottom: `solid ${theme.palette.grey[300]} 1px`,\n      \"&:hover\": {\n        backgroundColor: \"rgba(0,0,0,0.1)\",\n      },\n    },\n    rowCell: {},\n    selected: { backgroundColor: \"rgba(100,100,255,0.1)\" },\n    activatedRow: { backgroundColor: \"rgba(255,100,255,0.1)\" },\n  })\n);\n\nexport function VirtualTableRow(props: CompleteRowProps) {\n  return (\n    <>\n      <SingleVirtualTableRow {...props} />\n    </>\n  );\n}\n\nconst SingleVirtualTableRow = ({\n  style,\n  rowIndex,\n  selectable,\n  classes,\n  width,\n  CheckboxProps,\n  onRowClick,\n  extraStyles,\n  selectedRowStyle,\n  ...rest\n}: CompleteRowProps) => {\n  const rowClasses = useStyles();\n  const commonClasses = useCommonStyles();\n  const visibleColumns = useTStoreState((state) => state.visibleColumns);\n  const visibleRows = useTStoreState((state) => state.visibleRows);\n  const toggleSingleRow = useTStoreActions(\n    (actions) => actions.toggleSingleRow\n  );\n  const calcRowWidth = useCalcTableWidth(visibleColumns, width);\n  const { activeRow } = useTableRowState();\n  const onRowSelect = useCallback(() => {\n    onRowClick && onRowClick(rowIndex);\n  }, [onRowClick]);\n  return (\n    <div\n      style={{\n        ...style,\n        ...extraStyles,\n        ...(activeRow === rowIndex && selectedRowStyle),\n        width: calcRowWidth(),\n      }}\n      className={clsx(\n        HESABA_TABLE_ROW_CLASS,\n        rowClasses.tableRow,\n        chooseClass(rowClasses.tableRowCommon, classes?.root),\n        { [rowClasses.selected]: visibleRows[rowIndex].selected },\n        { [rowClasses.activatedRow]: activeRow === rowIndex },\n        {\n          [classes?.evenRow || \"tempEvenRow\"]:\n            classes?.evenRow && rowIndex % 2 === 0,\n        },\n        {\n          [classes?.oddRow || \"tempOddRow\"]:\n            classes?.oddRow && rowIndex % 2 !== 0,\n        }\n      )}\n      onClick={onRowSelect}\n    >\n      {selectable && (\n        <Checkbox\n          checked={visibleRows[rowIndex].selected}\n          onChange={() => {\n            toggleSingleRow({ index: rowIndex });\n          }}\n          // name={name}\n          color=\"primary\"\n          classes={{ root: commonClasses.checkbox }}\n          onClick={(e) => e.stopPropagation()}\n          {...CheckboxProps}\n        />\n      )}\n\n      {visibleColumns.map((props, colIndex) => (\n        <Fragment key={props.key}>\n          <Cell\n            {...props}\n            {...rest}\n            colIndex={colIndex}\n            row={visibleRows[rowIndex]}\n            rowIndex={rowIndex}\n            columnsLength={visibleColumns.length}\n            colKey={props.key}\n          />\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default VirtualTableRow;\n"],"file":"VirtualTableRow.js"}