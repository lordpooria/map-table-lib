{"version":3,"sources":["../../../src/virtualize-table/container-virtual/VirtualList.tsx"],"names":["useStyles","root","outerElementTypeWithId","props","ref","MAIN_LIST_ID","VirtualList","height","width","classes","onScroll","setTableRef","extraStyle","selectable","itemSize","commonSidebar","itemHeight","resizable","sortable","VTCommonTableElProps","VTRowProps","VTFilterProps","VTHeaderProps","direction","visibleRows","state","numRowsSelected","tableClasses","length","innerElementType","children","style","rest","header","index","table","row"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from \"react\";\nimport { VariableSizeList as List } from \"react-window\";\n\nimport VirtualTableRow from \"../rows/VirtualTableRow\";\nimport VirtualTableHeader from \"../header/VirtualTableHeader\";\n\nimport clsx from \"clsx\";\nimport { CompleteMainListProps } from \"../../types\";\nimport { useTStoreState } from \"../../store/reducerHooks\";\nimport { commonSidebar } from \"../../utils/themeConstants\";\nimport { useLanguageState } from \"@hesaba/theme-language\";\n\nimport { MAIN_LIST_ID } from \"../../utils/constants\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {},\n});\n\nconst outerElementTypeWithId = forwardRef((props: any, ref) => {\n  return <div id={MAIN_LIST_ID} {...props} ref={ref as any} />;\n});\n\nconst VirtualList = memo(\n  forwardRef(\n    (\n      {\n        height,\n        width,\n        classes,\n        onScroll,\n        setTableRef,\n        extraStyle,\n        selectable = false,\n        itemSize = () => commonSidebar.itemHeight,\n        resizable,\n        sortable,\n        VTCommonTableElProps,\n        VTRowProps,\n        VTFilterProps,\n        VTHeaderProps,\n      }: CompleteMainListProps,\n      ref\n    ) => {\n      const { direction } = useLanguageState();\n      const visibleRows = useTStoreState((state) => state.visibleRows);\n      const numRowsSelected = useTStoreState((state) => state.numRowsSelected);\n      const tableClasses = useStyles();\n      if (!visibleRows || visibleRows.length === 0) {\n        return null;\n      }\n\n      // const [rowSizes, setRowSizes] = useState(\n      //   new Array(rows.length).fill(true).reduce((acc, item, i) => {\n      //     acc[i] = 50;\n      //     return acc;\n      //   }, {})\n      // );\n\n      // function toggleSize(i: number) {\n      //   if (ref) {\n      //     (ref as any).resetAfterIndex(i);\n      //   }\n      //   setRowSizes((prevState: any) => ({\n      //     ...prevState.rowSizes,\n      //     [i]: prevState.rowSizes[i] === 50 ? 75 : 50,\n      //   }));\n      // }\n\n      // function getSize(i: number) {\n      //   return rowSizes[i];\n      // }\n\n      const innerElementType = ({\n        children,\n        style,\n        ...rest\n      }: {\n        children: React.ReactNode;\n        style: any;\n      }) => (\n        <div {...rest} style={{ ...style, ...extraStyle }}>\n          <VirtualTableHeader\n            selectable={selectable}\n            isSelected={numRowsSelected !== 0}\n            classes={classes?.header}\n            width={width}\n            resizable={resizable}\n            sortable={sortable}\n            {...VTCommonTableElProps}\n            {...VTHeaderProps}\n            {...VTFilterProps}\n            // placeholderColumns={placeholderColumns}\n            // placeholderTotalWidth={placeholderTotalWidth}\n            // placeholderCurrentWidths={placeholderCurrentWidths}\n          />\n\n          {children}\n        </div>\n      );\n\n      return (\n        <List\n          // style={{ position: \"absolute\", ...extraStyle }}\n          ref={ref as any}\n          direction={direction}\n          height={height}\n          itemCount={visibleRows.length}\n          onScroll={onScroll}\n          itemSize={itemSize}\n          itemKey={(index) => `${index}` as string}\n          width={width}\n          itemData={visibleRows}\n          outerRef={setTableRef}\n          innerElementType={innerElementType}\n          className={clsx(tableClasses.root, classes?.table?.root)}\n          outerElementType={outerElementTypeWithId}\n        >\n          {({ index, ...rest }) => (\n            <VirtualTableRow\n              rowIndex={index}\n              selectable={selectable}\n              classes={classes?.row}\n              width={width}\n              {...VTCommonTableElProps}\n              {...VTRowProps}\n              {...rest}\n              // placeholderColumns={placeholderColumns}\n              // placeholderTotalWidth={placeholderTotalWidth}\n              // placeholderCurrentWidths={placeholderCurrentWidths}\n            />\n          )}\n        </List>\n      );\n    }\n  )\n);\n\nexport default VirtualList;\n"],"file":"VirtualList.js"}