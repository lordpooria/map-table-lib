{"version":3,"sources":["../../src/hooks/useTableResizer.ts"],"names":["useTableResizer","columnElements","headers","rowRef","direction","dirRef","currentWidths","totalWidth","currentField","setSizes","tableRef","setTableRef","removeMouseDownListerner","init","current","querySelectorAll","HESABA_TABLE_HEADER_CLASS","HESABA_TABLE_ROW_CLASS","onMouseDown","e","div","target","classList","contains","DRAG_CLASS","parent","previousElementSibling","getAttribute","DATA_FIELD","window","addEventListener","onMouseMove","onMouseUp","length","newWidth","MIN_TABLE_WIDTH","right","getBoundingClientRect","Math","max","clientX","left","headerWidth","forEach","el","width","RESIZE_HANDLE_WIDTH","index","style","minWidth","maxWidth","removeEventListener","removeMouseDown","table","addMouseDownListerner","ref"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useRef } from \"react\";\nimport {\n  DATA_FIELD,\n  DRAG_CLASS,\n  HESABA_TABLE_HEADER_CLASS,\n  HESABA_TABLE_ROW_CLASS,\n} from \"../utils/constants\";\nimport { MIN_TABLE_WIDTH, RESIZE_HANDLE_WIDTH } from \"../utils/themeConstants\";\nimport {\n  CurrentWidths,\n  QuerySelectType,\n  TotalWidth,\n} from \"../types/useTableResizer\";\nimport { useTableSizeAction } from \"../container/TableSizeProvider\";\nimport { useLanguageState } from \"@hesaba/theme-language\";\n// import { useStoreState } from \"../store/reducerHooks\";\n\nexport const useTableResizer = () => {\n  const columnElements = useRef<QuerySelectType>();\n  const headers = useRef<QuerySelectType>();\n  const rowRef = useRef<QuerySelectType>();\n  const { direction } = useLanguageState();\n\n  // const placeholderCellRef = useRef<QuerySelectType>();\n  const dirRef = useRef(direction);\n  const currentWidths = useRef<CurrentWidths>({});\n  const totalWidth = useRef<TotalWidth>(0);\n  const currentField = useRef<string>();\n  const { setSizes } = useTableSizeAction();\n  const tableRef = useRef<HTMLDivElement | null | undefined>();\n\n  // const dir = useStoreState((state) => state.settings.direction);\n  const [setTableRef, removeMouseDownListerner] = useMemo(() => {\n    const init = () => {\n      // if (!headers.current) {\n      headers.current = tableRef.current?.querySelectorAll(\n        `.${HESABA_TABLE_HEADER_CLASS}`\n      ) as NodeListOf<HTMLElement>;\n      rowRef.current = tableRef.current?.querySelectorAll(\n        `.${HESABA_TABLE_ROW_CLASS}`\n      ) as NodeListOf<HTMLElement>;\n      // }\n    };\n\n    const onMouseDown = (e: MouseEvent) => {\n      init();\n      const div = e.target as HTMLElement;\n      if (!div.classList.contains(DRAG_CLASS)) return;\n      const parent = div.previousElementSibling;\n      if (!parent) return;\n      currentField.current = parent.getAttribute(DATA_FIELD) as string;\n      //   columnElements.current = el as HTMLElement;\n      window.addEventListener(\"mousemove\", onMouseMove);\n      window.addEventListener(\"mouseup\", onMouseUp);\n      columnElements.current = tableRef.current?.querySelectorAll(\n        `[${DATA_FIELD}=\"${currentField.current}\"]`\n      ) as NodeListOf<HTMLElement>;\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      if (\n        !columnElements.current ||\n        columnElements.current.length === 0 ||\n        !headers.current ||\n        headers.current.length === 0 ||\n        !tableRef ||\n        !rowRef.current\n      )\n        return;\n\n      let newWidth = MIN_TABLE_WIDTH;\n      if (dirRef.current === \"rtl\") {\n        const right = columnElements.current[0].getBoundingClientRect().right;\n        newWidth = Math.max(-e.clientX + right, MIN_TABLE_WIDTH);\n      } else {\n        const left = columnElements.current[0].getBoundingClientRect().left;\n        newWidth = Math.max(e.clientX - left, MIN_TABLE_WIDTH);\n      }\n\n      let headerWidth = 0;\n      headers.current.forEach(\n        (el) =>\n          (headerWidth +=\n            el.getBoundingClientRect().width + RESIZE_HANDLE_WIDTH)\n      );\n\n      totalWidth.current = headerWidth;\n\n      columnElements.current.forEach((el, index) => {\n        if (index === 0) {\n          el.style.width = `${newWidth}px`;\n          el.style.minWidth = `${newWidth}px`;\n          el.style.maxWidth = `${newWidth}px`;\n        } else {\n          el.style.width = `${newWidth + RESIZE_HANDLE_WIDTH}px`;\n          el.style.minWidth = `${newWidth + RESIZE_HANDLE_WIDTH}px`;\n          el.style.maxWidth = `${newWidth + RESIZE_HANDLE_WIDTH}px`;\n        }\n      });\n      // rowRef.current.forEach((el) => {\n      //   el.style.width = `${headerWidth}px`;\n      //   el.style.minWidth = `${headerWidth}px`;\n      //   el.style.maxWidth = `${headerWidth}px`;\n      // });\n    };\n\n    const onMouseUp = (e: MouseEvent) => {\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      if (\n        !currentField.current ||\n        !columnElements.current ||\n        columnElements.current.length === 0\n      )\n        return;\n\n      if (dirRef.current === \"rtl\") {\n        currentWidths.current[currentField.current] =\n          -e.clientX + columnElements.current[0].getBoundingClientRect().right;\n      } else {\n        currentWidths.current[currentField.current] =\n          e.clientX - columnElements.current[0].getBoundingClientRect().left;\n      }\n\n      setSizes({\n        totalWidth: totalWidth.current,\n        currentWidths: currentWidths.current,\n      });\n    };\n\n    const removeMouseDown = (table: HTMLDivElement) => {\n      table.removeEventListener(\"mousedown\", onMouseDown);\n    };\n    const addMouseDownListerner = (table: HTMLDivElement) => {\n      table.addEventListener(\"mousedown\", onMouseDown);\n    };\n\n    const setTableRef = (ref: any) => {\n      if (ref) {\n        tableRef.current = ref;\n        addMouseDownListerner(tableRef.current as HTMLDivElement);\n      }\n    };\n\n    return [setTableRef, removeMouseDown];\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      tableRef.current && removeMouseDownListerner(tableRef.current);\n    };\n  }, [removeMouseDownListerner]);\n\n  useEffect(() => {\n    dirRef.current = direction;\n  }, [direction]);\n\n  return { setTableRef, tableRef };\n};\n"],"file":"useTableResizer.js"}