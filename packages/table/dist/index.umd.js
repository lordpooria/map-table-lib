(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@hesaba/theme-language'), require('react-dom')) :
    typeof define === 'function' && define.amd ? define('@hesaba/table', ['exports', 'react', '@hesaba/theme-language', 'react-dom'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@hesaba/table'] = {}, global.React, global.themeLanguage, global.ReactDOM));
}(this, (function (exports, React, themeLanguage, ReactDOM) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
    var React__namespace = /*#__PURE__*/_interopNamespace(React);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
    var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function _defineProperty$1(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function ownKeys$4(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);

        if (enumerableOnly) {
          symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }

        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys$4(Object(source), true).forEach(function (key) {
            _defineProperty$1(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$4(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    /**
     * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
     *
     * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
     * during build.
     * @param {number} code
     */
    function formatProdErrorMessage(code) {
      return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
    }

    // Inlined version of the `symbol-observable` polyfill
    var $$observable = (function () {
      return typeof Symbol === 'function' && Symbol.observable || '@@observable';
    })();

    /**
     * These are private action types reserved by Redux.
     * For any unknown actions, you must return the current state.
     * If the current state is undefined, you must return the initial state.
     * Do not reference these action types directly in your code.
     */
    var randomString = function randomString() {
      return Math.random().toString(36).substring(7).split('').join('.');
    };

    var ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };

    /**
     * @param {any} obj The object to inspect.
     * @returns {boolean} True if the argument appears to be a plain object.
     */
    function isPlainObject$2(obj) {
      if (typeof obj !== 'object' || obj === null) return false;
      var proto = obj;

      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }

      return Object.getPrototypeOf(obj) === proto;
    }

    function kindOf(val) {
      var typeOfVal = typeof val;

      if (process.env.NODE_ENV !== 'production') {
        // Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
        function miniKindOf(val) {
          if (val === void 0) return 'undefined';
          if (val === null) return 'null';
          var type = typeof val;

          switch (type) {
            case 'boolean':
            case 'string':
            case 'number':
            case 'symbol':
            case 'function':
              {
                return type;
              }
          }

          if (Array.isArray(val)) return 'array';
          if (isDate(val)) return 'date';
          if (isError(val)) return 'error';
          var constructorName = ctorName(val);

          switch (constructorName) {
            case 'Symbol':
            case 'Promise':
            case 'WeakMap':
            case 'WeakSet':
            case 'Map':
            case 'Set':
              return constructorName;
          } // other


          return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
        }

        function ctorName(val) {
          return typeof val.constructor === 'function' ? val.constructor.name : null;
        }

        function isError(val) {
          return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
        }

        function isDate(val) {
          if (val instanceof Date) return true;
          return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
        }

        typeOfVal = miniKindOf(val);
      }

      return typeOfVal;
    }

    /**
     * Creates a Redux store that holds the state tree.
     * The only way to change the data in the store is to call `dispatch()` on it.
     *
     * There should only be a single store in your app. To specify how different
     * parts of the state tree respond to actions, you may combine several reducers
     * into a single reducer function by using `combineReducers`.
     *
     * @param {Function} reducer A function that returns the next state tree, given
     * the current state tree and the action to handle.
     *
     * @param {any} [preloadedState] The initial state. You may optionally specify it
     * to hydrate the state from the server in universal apps, or to restore a
     * previously serialized user session.
     * If you use `combineReducers` to produce the root reducer function, this must be
     * an object with the same shape as `combineReducers` keys.
     *
     * @param {Function} [enhancer] The store enhancer. You may optionally specify it
     * to enhance the store with third-party capabilities such as middleware,
     * time travel, persistence, etc. The only store enhancer that ships with Redux
     * is `applyMiddleware()`.
     *
     * @returns {Store} A Redux store that lets you read the state, dispatch actions
     * and subscribe to changes.
     */

    function createStore(reducer, preloadedState, enhancer) {
      var _ref2;

      if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
      }

      if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
        enhancer = preloadedState;
        preloadedState = undefined;
      }

      if (typeof enhancer !== 'undefined') {
        if (typeof enhancer !== 'function') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
        }

        return enhancer(createStore)(reducer, preloadedState);
      }

      if (typeof reducer !== 'function') {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
      }

      var currentReducer = reducer;
      var currentState = preloadedState;
      var currentListeners = [];
      var nextListeners = currentListeners;
      var isDispatching = false;
      /**
       * This makes a shallow copy of currentListeners so we can use
       * nextListeners as a temporary list while dispatching.
       *
       * This prevents any bugs around consumers calling
       * subscribe/unsubscribe in the middle of a dispatch.
       */

      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      /**
       * Reads the state tree managed by the store.
       *
       * @returns {any} The current state tree of your application.
       */


      function getState() {
        if (isDispatching) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
        }

        return currentState;
      }
      /**
       * Adds a change listener. It will be called any time an action is dispatched,
       * and some part of the state tree may potentially have changed. You may then
       * call `getState()` to read the current state tree inside the callback.
       *
       * You may call `dispatch()` from a change listener, with the following
       * caveats:
       *
       * 1. The subscriptions are snapshotted just before every `dispatch()` call.
       * If you subscribe or unsubscribe while the listeners are being invoked, this
       * will not have any effect on the `dispatch()` that is currently in progress.
       * However, the next `dispatch()` call, whether nested or not, will use a more
       * recent snapshot of the subscription list.
       *
       * 2. The listener should not expect to see all state changes, as the state
       * might have been updated multiple times during a nested `dispatch()` before
       * the listener is called. It is, however, guaranteed that all subscribers
       * registered before the `dispatch()` started will be called with the latest
       * state by the time it exits.
       *
       * @param {Function} listener A callback to be invoked on every dispatch.
       * @returns {Function} A function to remove this change listener.
       */


      function subscribe(listener) {
        if (typeof listener !== 'function') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
        }

        if (isDispatching) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
        }

        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }

          if (isDispatching) {
            throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
          }

          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      /**
       * Dispatches an action. It is the only way to trigger a state change.
       *
       * The `reducer` function, used to create the store, will be called with the
       * current state tree and the given `action`. Its return value will
       * be considered the **next** state of the tree, and the change listeners
       * will be notified.
       *
       * The base implementation only supports plain object actions. If you want to
       * dispatch a Promise, an Observable, a thunk, or something else, you need to
       * wrap your store creating function into the corresponding middleware. For
       * example, see the documentation for the `redux-thunk` package. Even the
       * middleware will eventually dispatch plain object actions using this method.
       *
       * @param {Object} action A plain object representing “what changed”. It is
       * a good idea to keep actions serializable so you can record and replay user
       * sessions, or use the time travelling `redux-devtools`. An action must have
       * a `type` property which may not be `undefined`. It is a good idea to use
       * string constants for action types.
       *
       * @returns {Object} For convenience, the same action object you dispatched.
       *
       * Note that, if you use a custom middleware, it may wrap `dispatch()` to
       * return something else (for example, a Promise you can await).
       */


      function dispatch(action) {
        if (!isPlainObject$2(action)) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
        }

        if (typeof action.type === 'undefined') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        }

        if (isDispatching) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');
        }

        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }

        var listeners = currentListeners = nextListeners;

        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          listener();
        }

        return action;
      }
      /**
       * Replaces the reducer currently used by the store to calculate the state.
       *
       * You might need this if your app implements code splitting and you want to
       * load some of the reducers dynamically. You might also need this if you
       * implement a hot reloading mechanism for Redux.
       *
       * @param {Function} nextReducer The reducer for the store to use instead.
       * @returns {void}
       */


      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== 'function') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
        }

        currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
        // Any reducers that existed in both the new and old rootReducer
        // will receive the previous state. This effectively populates
        // the new state tree with any relevant data from the old one.

        dispatch({
          type: ActionTypes.REPLACE
        });
      }
      /**
       * Interoperability point for observable/reactive libraries.
       * @returns {observable} A minimal observable of state changes.
       * For more information, see the observable proposal:
       * https://github.com/tc39/proposal-observable
       */


      function observable() {
        var _ref;

        var outerSubscribe = subscribe;
        return _ref = {
          /**
           * The minimal observable subscription method.
           * @param {Object} observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns {subscription} An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */
          subscribe: function subscribe(observer) {
            if (typeof observer !== 'object' || observer === null) {
              throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
            }

            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }

            observeState();
            var unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe: unsubscribe
            };
          }
        }, _ref[$$observable] = function () {
          return this;
        }, _ref;
      } // When a store is created, an "INIT" action is dispatched so that every
      // reducer returns their initial state. This effectively populates
      // the initial state tree.


      dispatch({
        type: ActionTypes.INIT
      });
      return _ref2 = {
        dispatch: dispatch,
        subscribe: subscribe,
        getState: getState,
        replaceReducer: replaceReducer
      }, _ref2[$$observable] = observable, _ref2;
    }

    /**
     * Prints a warning in the console if it exists.
     *
     * @param {String} message The warning message.
     * @returns {void}
     */
    function warning$1(message) {
      /* eslint-disable no-console */
      if (typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error(message);
      }
      /* eslint-enable no-console */


      try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
      } catch (e) {} // eslint-disable-line no-empty

    }

    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
      var reducerKeys = Object.keys(reducers);
      var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

      if (reducerKeys.length === 0) {
        return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
      }

      if (!isPlainObject$2(inputState)) {
        return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
      }

      var unexpectedKeys = Object.keys(inputState).filter(function (key) {
        return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
      });
      unexpectedKeys.forEach(function (key) {
        unexpectedKeyCache[key] = true;
      });
      if (action && action.type === ActionTypes.REPLACE) return;

      if (unexpectedKeys.length > 0) {
        return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
      }
    }

    function assertReducerShape(reducers) {
      Object.keys(reducers).forEach(function (key) {
        var reducer = reducers[key];
        var initialState = reducer(undefined, {
          type: ActionTypes.INIT
        });

        if (typeof initialState === 'undefined') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(12) : "The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
        }

        if (typeof reducer(undefined, {
          type: ActionTypes.PROBE_UNKNOWN_ACTION()
        }) === 'undefined') {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(13) : "The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
        }
      });
    }
    /**
     * Turns an object whose values are different reducer functions, into a single
     * reducer function. It will call every child reducer, and gather their results
     * into a single state object, whose keys correspond to the keys of the passed
     * reducer functions.
     *
     * @param {Object} reducers An object whose values correspond to different
     * reducer functions that need to be combined into one. One handy way to obtain
     * it is to use ES6 `import * as reducers` syntax. The reducers may never return
     * undefined for any action. Instead, they should return their initial state
     * if the state passed to them was undefined, and the current state for any
     * unrecognized action.
     *
     * @returns {Function} A reducer function that invokes every reducer inside the
     * passed object, and builds a state object with the same shape.
     */


    function combineReducers(reducers) {
      var reducerKeys = Object.keys(reducers);
      var finalReducers = {};

      for (var i = 0; i < reducerKeys.length; i++) {
        var key = reducerKeys[i];

        if (process.env.NODE_ENV !== 'production') {
          if (typeof reducers[key] === 'undefined') {
            warning$1("No reducer provided for key \"" + key + "\"");
          }
        }

        if (typeof reducers[key] === 'function') {
          finalReducers[key] = reducers[key];
        }
      }

      var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
      // keys multiple times.

      var unexpectedKeyCache;

      if (process.env.NODE_ENV !== 'production') {
        unexpectedKeyCache = {};
      }

      var shapeAssertionError;

      try {
        assertReducerShape(finalReducers);
      } catch (e) {
        shapeAssertionError = e;
      }

      return function combination(state, action) {
        if (state === void 0) {
          state = {};
        }

        if (shapeAssertionError) {
          throw shapeAssertionError;
        }

        if (process.env.NODE_ENV !== 'production') {
          var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

          if (warningMessage) {
            warning$1(warningMessage);
          }
        }

        var hasChanged = false;
        var nextState = {};

        for (var _i = 0; _i < finalReducerKeys.length; _i++) {
          var _key = finalReducerKeys[_i];
          var reducer = finalReducers[_key];
          var previousStateForKey = state[_key];
          var nextStateForKey = reducer(previousStateForKey, action);

          if (typeof nextStateForKey === 'undefined') {
            var actionType = action && action.type;
            throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
          }

          nextState[_key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }

        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
      };
    }

    function bindActionCreator(actionCreator, dispatch) {
      return function () {
        return dispatch(actionCreator.apply(this, arguments));
      };
    }
    /**
     * Turns an object whose values are action creators, into an object with the
     * same keys, but with every function wrapped into a `dispatch` call so they
     * may be invoked directly. This is just a convenience method, as you can call
     * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
     *
     * For convenience, you can also pass an action creator as the first argument,
     * and get a dispatch wrapped function in return.
     *
     * @param {Function|Object} actionCreators An object whose values are action
     * creator functions. One handy way to obtain it is to use ES6 `import * as`
     * syntax. You may also pass a single function.
     *
     * @param {Function} dispatch The `dispatch` function available on your Redux
     * store.
     *
     * @returns {Function|Object} The object mimicking the original object, but with
     * every action creator wrapped into the `dispatch` call. If you passed a
     * function as `actionCreators`, the return value will also be a single
     * function.
     */


    function bindActionCreators(actionCreators, dispatch) {
      if (typeof actionCreators === 'function') {
        return bindActionCreator(actionCreators, dispatch);
      }

      if (typeof actionCreators !== 'object' || actionCreators === null) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + "'. " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
      }

      var boundActionCreators = {};

      for (var key in actionCreators) {
        var actionCreator = actionCreators[key];

        if (typeof actionCreator === 'function') {
          boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
      }

      return boundActionCreators;
    }

    /**
     * Composes single-argument functions from right to left. The rightmost
     * function can take multiple arguments as it provides the signature for
     * the resulting composite function.
     *
     * @param {...Function} funcs The functions to compose.
     * @returns {Function} A function obtained by composing the argument functions
     * from right to left. For example, compose(f, g, h) is identical to doing
     * (...args) => f(g(h(...args))).
     */
    function compose() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      if (funcs.length === 0) {
        return function (arg) {
          return arg;
        };
      }

      if (funcs.length === 1) {
        return funcs[0];
      }

      return funcs.reduce(function (a, b) {
        return function () {
          return a(b.apply(void 0, arguments));
        };
      });
    }

    /**
     * Creates a store enhancer that applies middleware to the dispatch method
     * of the Redux store. This is handy for a variety of tasks, such as expressing
     * asynchronous actions in a concise manner, or logging every action payload.
     *
     * See `redux-thunk` package as an example of the Redux middleware.
     *
     * Because middleware is potentially asynchronous, this should be the first
     * store enhancer in the composition chain.
     *
     * Note that each middleware will be given the `dispatch` and `getState` functions
     * as named arguments.
     *
     * @param {...Function} middlewares The middleware chain to be applied.
     * @returns {Function} A store enhancer applying the middleware.
     */

    function applyMiddleware() {
      for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
        middlewares[_key] = arguments[_key];
      }

      return function (createStore) {
        return function () {
          var store = createStore.apply(void 0, arguments);

          var _dispatch = function dispatch() {
            throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
          };

          var middlewareAPI = {
            getState: store.getState,
            dispatch: function dispatch() {
              return _dispatch.apply(void 0, arguments);
            }
          };
          var chain = middlewares.map(function (middleware) {
            return middleware(middlewareAPI);
          });
          _dispatch = compose.apply(void 0, chain)(store.dispatch);
          return _objectSpread2(_objectSpread2({}, store), {}, {
            dispatch: _dispatch
          });
        };
      };
    }

    /*
     * This is a dummy function to check if the function name has been altered by minification.
     * If the function has been minified and NODE_ENV !== 'production', warn the user.
     */

    function isCrushed() {}

    if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
      warning$1('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
    }

    var redux = /*#__PURE__*/Object.freeze({
        __proto__: null,
        __DO_NOT_USE__ActionTypes: ActionTypes,
        applyMiddleware: applyMiddleware,
        bindActionCreators: bindActionCreators,
        combineReducers: combineReducers,
        compose: compose,
        createStore: createStore
    });

    function createThunkMiddleware(extraArgument) {
      return function (_ref) {
        var dispatch = _ref.dispatch,
            getState = _ref.getState;
        return function (next) {
          return function (action) {
            if (typeof action === 'function') {
              return action(dispatch, getState, extraArgument);
            }

            return next(action);
          };
        };
      };
    }

    var thunk = createThunkMiddleware();
    thunk.withExtraArgument = createThunkMiddleware;

    var es = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': thunk
    });

    function n$3(n){for(var t=arguments.length,r=Array(t>1?t-1:0),e=1;e<t;e++)r[e-1]=arguments[e];if("production"!==process.env.NODE_ENV){var i=Y$1[n],o=i?"function"==typeof i?i.apply(null,r):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}throw Error("[Immer] minified error nr: "+n+(r.length?" "+r.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function t$1(n){return !!n&&!!n[Q]}function r$3(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var t=Object.getPrototypeOf(n);return !t||t===Object.prototype}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v$3(n))}function e$3(r){return t$1(r)||n$3(23,r),r[Q].t}function i(n,t,r){void 0===r&&(r=!1),0===o(n)?(r?Object.keys:Z)(n).forEach((function(e){r&&"symbol"==typeof e||t(e,n[e],n);})):n.forEach((function(r,e){return t(e,r,n)}));}function o(n){var t=n[Q];return t?t.i>3?t.i-4:t.i:Array.isArray(n)?1:s(n)?2:v$3(n)?3:0}function u$3(n,t){return 2===o(n)?n.has(t):Object.prototype.hasOwnProperty.call(n,t)}function a(n,t){return 2===o(n)?n.get(t):n[t]}function f$4(n,t,r){var e=o(n);2===e?n.set(t,r):3===e?(n.delete(t),n.add(r)):n[t]=r;}function c$3(n,t){return n===t?0!==n||1/n==1/t:n!=n&&t!=t}function s(n){return X&&n instanceof Map}function v$3(n){return q$3&&n instanceof Set}function p$3(n){return n.o||n.t}function l$3(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var t=nn(n);delete t[Q];for(var r=Z(t),e=0;e<r.length;e++){var i=r[e],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),t)}function d$3(n,e){y$3(n)||t$1(n)||!r$3(n)||(o(n)>1&&(n.set=n.add=n.clear=n.delete=h$3),Object.freeze(n),e&&i(n,(function(n,t){return d$3(t,!0)}),!0));}function h$3(){n$3(2);}function y$3(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b$3(t){var r=tn[t];return r||n$3("production"!==process.env.NODE_ENV?18:19,t),r}function m$3(n,t){tn[n]=t;}function _(){return "production"===process.env.NODE_ENV||U||n$3(0),U}function j(n,t){t&&(b$3("Patches"),n.u=[],n.s=[],n.v=t);}function g$3(n){O(n),n.p.forEach(S),n.p=null;}function O(n){n===U&&(U=n.l);}function w$3(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var t=n[Q];0===t.i||1===t.i?t.j():t.g=!0;}function P(t,e){e._=e.p.length;var i=e.p[0],o=void 0!==t&&t!==i;return e.h.O||b$3("ES5").S(e,t,o),o?(i[Q].P&&(g$3(e),n$3(4)),r$3(t)&&(t=M$1(e,t),e.l||x$3(e,t)),e.u&&b$3("Patches").M(i[Q],t,e.u,e.s)):t=M$1(e,i,[]),g$3(e),e.u&&e.v(e.u,e.s),t!==H$2?t:void 0}function M$1(n,t,r){if(y$3(t))return t;var e=t[Q];if(!e)return i(t,(function(i,o){return A$3(n,e,t,i,o,r)}),!0),t;if(e.A!==n)return t;if(!e.P)return x$3(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l$3(e.k):e.o;i(3===e.i?new Set(o):o,(function(t,i){return A$3(n,e,o,t,i,r)})),x$3(n,o,!1),r&&n.u&&b$3("Patches").R(e,r,n.u,n.s);}return e.o}function A$3(e,i,o,a,c,s){if("production"!==process.env.NODE_ENV&&c===o&&n$3(5),t$1(c)){var v=M$1(e,c,s&&i&&3!==i.i&&!u$3(i.D,a)?s.concat(a):void 0);if(f$4(o,a,v),!t$1(v))return;e.m=!1;}if(r$3(c)&&!y$3(c)){if(!e.h.N&&e._<1)return;M$1(e,c),i&&i.A.l||x$3(e,c);}}function x$3(n,t,r){void 0===r&&(r=!1),n.h.N&&n.m&&d$3(t,r);}function z$3(n,t){var r=n[Q];return (r?p$3(r):n)[t]}function I$2(n,t){if(t in n)for(var r=Object.getPrototypeOf(n);r;){var e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=Object.getPrototypeOf(r);}}function E$2(n){n.P||(n.P=!0,n.l&&E$2(n.l));}function k$3(n){n.o||(n.o=l$3(n.t));}function R(n,t,r){var e=s(t)?b$3("MapSet").T(t,r):v$3(t)?b$3("MapSet").F(t,r):n.O?function(n,t){var r=Array.isArray(n),e={i:r?1:0,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:n,k:null,o:null,j:null,C:!1},i=e,o=rn;r&&(i=[e],o=en);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(t,r):b$3("ES5").J(t,r);return (r?r.A:_()).p.push(e),e}function D$3(e){return t$1(e)||n$3(22,e),function n(t){if(!r$3(t))return t;var e,u=t[Q],c=o(t);if(u){if(!u.P&&(u.i<4||!b$3("ES5").K(u)))return u.t;u.I=!0,e=N(t,c),u.I=!1;}else e=N(t,c);return i(e,(function(t,r){u&&a(u.t,t)===r||f$4(e,t,n(r));})),3===c?new Set(e):e}(e)}function N(n,t){switch(t){case 2:return new Map(n);case 3:return Array.from(n)}return l$3(n)}function T(){function r(n,t){var r=s[n];return r?r.enumerable=t:s[n]=r={configurable:!0,enumerable:t,get:function(){var t=this[Q];return "production"!==process.env.NODE_ENV&&f(t),rn.get(t,n)},set:function(t){var r=this[Q];"production"!==process.env.NODE_ENV&&f(r),rn.set(r,n,t);}},r}function e(n){for(var t=n.length-1;t>=0;t--){var r=n[t][Q];if(!r.P)switch(r.i){case 5:a(r)&&E$2(r);break;case 4:o(r)&&E$2(r);}}}function o(n){for(var t=n.t,r=n.k,e=Z(r),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=t[o];if(void 0===a&&!u$3(t,o))return !0;var f=r[o],s=f&&f[Q];if(s?s.t!==a:!c$3(f,a))return !0}}var v=!!t[Q];return e.length!==Z(t).length+(v?0:1)}function a(n){var t=n.k;if(t.length!==n.t.length)return !0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return !(!r||r.get)}function f(t){t.g&&n$3(3,JSON.stringify(p$3(t)));}var s={};m$3("ES5",{J:function(n,t){var e=Array.isArray(n),i=function(n,t){if(n){for(var e=Array(t.length),i=0;i<t.length;i++)Object.defineProperty(e,""+i,r(i,!0));return e}var o=nn(t);delete o[Q];for(var u=Z(o),a=0;a<u.length;a++){var f=u[a];o[f]=r(f,n||!!o[f].enumerable);}return Object.create(Object.getPrototypeOf(t),o)}(e,n),o={i:e?5:4,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:n,k:i,o:null,g:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,r,o){o?t$1(r)&&r[Q].A===n&&e(n.p):(n.u&&function n(t){if(t&&"object"==typeof t){var r=t[Q];if(r){var e=r.t,o=r.k,f=r.D,c=r.i;if(4===c)i(o,(function(t){t!==Q&&(void 0!==e[t]||u$3(e,t)?f[t]||n(o[t]):(f[t]=!0,E$2(r)));})),i(e,(function(n){void 0!==o[n]||u$3(o,n)||(f[n]=!1,E$2(r));}));else if(5===c){if(a(r)&&(E$2(r),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)void 0===f[l]&&n(o[l]);}}}}(n.p[0]),e(n.p));},K:function(n){return 4===n.i?o(n):a(n)}});}function F$2(){function r(n){if(!n||"object"!=typeof n)return n;if(Array.isArray(n))return n.map(r);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return [n[0],r(n[1])]})));if(v$3(n))return new Set(Array.from(n).map(r));var t=Object.create(Object.getPrototypeOf(n));for(var e in n)t[e]=r(n[e]);return t}function e(n){return t$1(n)?r(n):n}var f="add";m$3("Patches",{$:function(t,e){return e.forEach((function(e){for(var i=e.path,u=e.op,c=t,s=0;s<i.length-1;s++)"object"!=typeof(c=a(c,i[s]))&&n$3(15,i.join("/"));var v=o(c),p=r(e.value),l=i[i.length-1];switch(u){case"replace":switch(v){case 2:return c.set(l,p);case 3:n$3(16);default:return c[l]=p}case f:switch(v){case 1:return c.splice(l,0,p);case 2:return c.set(l,p);case 3:return c.add(p);default:return c[l]=p}case"remove":switch(v){case 1:return c.splice(l,1);case 2:return c.delete(l);case 3:return c.delete(e.value);default:return delete c[l]}default:n$3(17,u);}})),t},R:function(n,t,r,o){switch(n.i){case 0:case 4:case 2:return function(n,t,r,o){var c=n.t,s=n.o;i(n.D,(function(n,i){var v=a(c,n),p=a(s,n),l=i?u$3(c,n)?"replace":f:"remove";if(v!==p||"replace"!==l){var d=t.concat(n);r.push("remove"===l?{op:l,path:d}:{op:l,path:d,value:p}),o.push(l===f?{op:"remove",path:d}:"remove"===l?{op:f,path:d,value:e(v)}:{op:"replace",path:d,value:e(v)});}}));}(n,t,r,o);case 5:case 1:return function(n,t,r,i){var o=n.t,u=n.D,a=n.o;if(a.length<o.length){var c=[a,o];o=c[0],a=c[1];var s=[i,r];r=s[0],i=s[1];}for(var v=0;v<o.length;v++)if(u[v]&&a[v]!==o[v]){var p=t.concat([v]);r.push({op:"replace",path:p,value:e(a[v])}),i.push({op:"replace",path:p,value:e(o[v])});}for(var l=o.length;l<a.length;l++){var d=t.concat([l]);r.push({op:f,path:d,value:e(a[l])});}o.length<a.length&&i.push({op:"replace",path:t.concat(["length"]),value:o.length});}(n,t,r,o);case 3:return function(n,t,r,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=t.concat([u]);r.push({op:"remove",path:i,value:n}),e.unshift({op:f,path:i,value:n});}u++;})),u=0,o.forEach((function(n){if(!i.has(n)){var o=t.concat([u]);r.push({op:f,path:o,value:n}),e.unshift({op:"remove",path:o,value:n});}u++;}));}(n,t,r,o)}},M:function(n,t,r,e){r.push({op:"replace",path:[],value:t}),e.push({op:"replace",path:[],value:n.t});}});}function C$2(){function t(n,t){function r(){this.constructor=n;}a(n,t),n.prototype=(r.prototype=t.prototype,new r);}function e(n){n.o||(n.D=new Map,n.o=new Map(n.t));}function o(n){n.o||(n.o=new Set,n.t.forEach((function(t){if(r$3(t)){var e=R(n.A.h,t,n);n.p.set(t,e),n.o.add(e);}else n.o.add(t);})));}function u(t){t.g&&n$3(3,JSON.stringify(p$3(t)));}var a=function(n,t){return (a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t;}||function(n,t){for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);})(n,t)},f=function(){function n(n,t){return this[Q]={i:2,l:t,A:t?t.A:_(),P:!1,I:!1,o:void 0,D:void 0,t:n,k:this,C:!1,g:!1},this}t(n,Map);var o=n.prototype;return Object.defineProperty(o,"size",{get:function(){return p$3(this[Q]).size}}),o.has=function(n){return p$3(this[Q]).has(n)},o.set=function(n,t){var r=this[Q];return u(r),p$3(r).has(n)&&p$3(r).get(n)===t||(e(r),E$2(r),r.D.set(n,!0),r.o.set(n,t),r.D.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return !1;var t=this[Q];return u(t),e(t),E$2(t),t.D.set(n,!1),t.o.delete(n),!0},o.clear=function(){var n=this[Q];return u(n),e(n),E$2(n),n.D=new Map,i(n.t,(function(t){n.D.set(t,!1);})),n.o.clear()},o.forEach=function(n,t){var r=this;p$3(this[Q]).forEach((function(e,i){n.call(t,r.get(i),i,r);}));},o.get=function(n){var t=this[Q];u(t);var i=p$3(t).get(n);if(t.I||!r$3(i))return i;if(i!==t.t.get(n))return i;var o=R(t.A.h,i,t);return e(t),t.o.set(n,o),o},o.keys=function(){return p$3(this[Q]).keys()},o.values=function(){var n,t=this,r=this.keys();return (n={})[V]=function(){return t.values()},n.next=function(){var n=r.next();return n.done?n:{done:!1,value:t.get(n.value)}},n},o.entries=function(){var n,t=this,r=this.keys();return (n={})[V]=function(){return t.entries()},n.next=function(){var n=r.next();if(n.done)return n;var e=t.get(n.value);return {done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,t){return this[Q]={i:3,l:t,A:t?t.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,g:!1,C:!1},this}t(n,Set);var r=n.prototype;return Object.defineProperty(r,"size",{get:function(){return p$3(this[Q]).size}}),r.has=function(n){var t=this[Q];return u(t),t.o?!!t.o.has(n)||!(!t.p.has(n)||!t.o.has(t.p.get(n))):t.t.has(n)},r.add=function(n){var t=this[Q];return u(t),this.has(n)||(o(t),E$2(t),t.o.add(n)),this},r.delete=function(n){if(!this.has(n))return !1;var t=this[Q];return u(t),o(t),E$2(t),t.o.delete(n)||!!t.p.has(n)&&t.o.delete(t.p.get(n))},r.clear=function(){var n=this[Q];return u(n),o(n),E$2(n),n.o.clear()},r.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},r.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},r.keys=function(){return this.values()},r[V]=function(){return this.values()},r.forEach=function(n,t){for(var r=this.values(),e=r.next();!e.done;)n.call(t,e.value,e.value,this),e=r.next();},n}();m$3("MapSet",{T:function(n,t){return new f(n,t)},F:function(n,t){return new c(n,t)}});}function J(){T(),C$2(),F$2();}function K(n){return n}function $(n){return n}var G$2,U,W$1="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q$3="undefined"!=typeof Set,B$2="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H$2=W$1?Symbol.for("immer-nothing"):((G$2={})["immer-nothing"]=!0,G$2),L=W$1?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W$1?Symbol.for("immer-state"):"__$immer_state",V="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",Y$1={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return "Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return "Unsupported patch operation: "+n},18:function(n){return "The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},19:"plugin not loaded",20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return "'current' expects a draft, got: "+n},23:function(n){return "'original' expects a draft, got: "+n}},Z="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,nn=Object.getOwnPropertyDescriptors||function(n){var t={};return Z(n).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(n,r);})),t},tn={},rn={get:function(n,t){if(t===Q)return n;var e=p$3(n);if(!u$3(e,t))return function(n,t,r){var e,i=I$2(t,r);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,t);var i=e[t];return n.I||!r$3(i)?i:i===z$3(n.t,t)?(k$3(n),n.o[t]=R(n.A.h,i,n)):i},has:function(n,t){return t in p$3(n)},ownKeys:function(n){return Reflect.ownKeys(p$3(n))},set:function(n,t,r){var e=I$2(p$3(n),t);if(null==e?void 0:e.set)return e.set.call(n.k,r),!0;if(n.D[t]=!0,!n.P){if(c$3(r,z$3(p$3(n),t))&&(void 0!==r||u$3(n.t,t)))return !0;k$3(n),E$2(n);}return n.o[t]=r,!0},deleteProperty:function(n,t){return void 0!==z$3(n.t,t)||t in n.t?(n.D[t]=!1,k$3(n),E$2(n)):delete n.D[t],n.o&&delete n.o[t],!0},getOwnPropertyDescriptor:function(n,t){var r=p$3(n),e=Reflect.getOwnPropertyDescriptor(r,t);return e?{writable:!0,configurable:1!==n.i||"length"!==t,enumerable:e.enumerable,value:r[t]}:e},defineProperty:function(){n$3(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n$3(12);}},en={};i(rn,(function(n,t){en[n]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)};})),en.deleteProperty=function(t,r){return "production"!==process.env.NODE_ENV&&isNaN(parseInt(r))&&n$3(13),rn.deleteProperty.call(this,t[0],r)},en.set=function(t,r,e){return "production"!==process.env.NODE_ENV&&"length"!==r&&isNaN(parseInt(r))&&n$3(14),rn.set.call(this,t[0],r,e,t[0])};var on=function(){function e(n){this.O=B$2,this.N="production"!==process.env.NODE_ENV,"boolean"==typeof(null==n?void 0:n.useProxies)&&this.setUseProxies(n.useProxies),"boolean"==typeof(null==n?void 0:n.autoFreeze)&&this.setAutoFreeze(n.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this);}var i=e.prototype;return i.produce=function(t,e,i){if("function"==typeof t&&"function"!=typeof e){var o=e;e=t;var u=this;return function(n){var t=this;void 0===n&&(n=o);for(var r=arguments.length,i=Array(r>1?r-1:0),a=1;a<r;a++)i[a-1]=arguments[a];return u.produce(n,(function(n){var r;return (r=e).call.apply(r,[t,n].concat(i))}))}}var a;if("function"!=typeof e&&n$3(6),void 0!==i&&"function"!=typeof i&&n$3(7),r$3(t)){var f=w$3(this),c=R(this,t,void 0),s=!0;try{a=e(c),s=!1;}finally{s?g$3(f):O(f);}return "undefined"!=typeof Promise&&a instanceof Promise?a.then((function(n){return j(f,i),P(n,f)}),(function(n){throw g$3(f),n})):(j(f,i),P(a,f))}if(!t||"object"!=typeof t){if((a=e(t))===H$2)return;return void 0===a&&(a=t),this.N&&d$3(a,!0),a}n$3(21,t);},i.produceWithPatches=function(n,t){var r,e,i=this;return "function"==typeof n?function(t){for(var r=arguments.length,e=Array(r>1?r-1:0),o=1;o<r;o++)e[o-1]=arguments[o];return i.produceWithPatches(t,(function(t){return n.apply(void 0,[t].concat(e))}))}:[this.produce(n,t,(function(n,t){r=n,e=t;})),r,e]},i.createDraft=function(e){r$3(e)||n$3(8),t$1(e)&&(e=D$3(e));var i=w$3(this),o=R(this,e,void 0);return o[Q].C=!0,O(i),o},i.finishDraft=function(t,r){var e=t&&t[Q];"production"!==process.env.NODE_ENV&&(e&&e.C||n$3(9),e.I&&n$3(10));var i=e.A;return j(i,r),P(void 0,i)},i.setAutoFreeze=function(n){this.N=n;},i.setUseProxies=function(t){t&&!B$2&&n$3(20),this.O=t;},i.applyPatches=function(n,r){var e;for(e=r.length-1;e>=0;e--){var i=r[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}var o=b$3("Patches").$;return t$1(n)?o(n,r):this.produce(n,(function(n){return o(n,r.slice(e+1))}))},e}(),un=new on,an=un.produce,fn=un.produceWithPatches.bind(un),cn=un.setAutoFreeze.bind(un),sn=un.setUseProxies.bind(un),vn=un.applyPatches.bind(un),pn=un.createDraft.bind(un),ln=un.finishDraft.bind(un);

    var immer_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': an,
        Immer: on,
        applyPatches: vn,
        castDraft: K,
        castImmutable: $,
        createDraft: pn,
        current: D$3,
        enableAllPlugins: J,
        enableES5: T,
        enableMapSet: C$2,
        enablePatches: F$2,
        finishDraft: ln,
        immerable: L,
        isDraft: t$1,
        isDraftable: r$3,
        nothing: H$2,
        original: e$3,
        produce: an,
        produceWithPatches: fn,
        setAutoFreeze: cn,
        setUseProxies: sn
    });

    function Similar() {
    	this.list = [];
    	this.lastItem = undefined;
    	this.size = 0;

    	return this;
    }

    Similar.prototype.get = function(key) {
    	var index;

    	if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
    		return this.lastItem.val;
    	}

    	index = this.indexOf(key);
    	if (index >= 0) {
    		this.lastItem = this.list[index];
    		return this.list[index].val;
    	}

    	return undefined;
    };

    Similar.prototype.set = function(key, val) {
    	var index;

    	if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
    		this.lastItem.val = val;
    		return this;
    	}

    	index = this.indexOf(key);
    	if (index >= 0) {
    		this.lastItem = this.list[index];
    		this.list[index].val = val;
    		return this;
    	}

    	this.lastItem = { key: key, val: val };
    	this.list.push(this.lastItem);
    	this.size++;

    	return this;
    };

    Similar.prototype.delete = function(key) {
    	var index;

    	if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
    		this.lastItem = undefined;
    	}

    	index = this.indexOf(key);
    	if (index >= 0) {
    		this.size--;
    		return this.list.splice(index, 1)[0];
    	}

    	return undefined;
    };


    // important that has() doesn't use get() in case an existing key has a falsy value, in which case has() would return false
    Similar.prototype.has = function(key) {
    	var index;

    	if (this.lastItem && this.isEqual(this.lastItem.key, key)) {
    		return true;
    	}

    	index = this.indexOf(key);
    	if (index >= 0) {
    		this.lastItem = this.list[index];
    		return true;
    	}

    	return false;
    };

    Similar.prototype.forEach = function(callback, thisArg) {
    	var i;
    	for (i = 0; i < this.size; i++) {
    		callback.call(thisArg || this, this.list[i].val, this.list[i].key, this);
    	}
    };

    Similar.prototype.indexOf = function(key) {
    	var i;
    	for (i = 0; i < this.size; i++) {
    		if (this.isEqual(this.list[i].key, key)) {
    			return i;
    		}
    	}
    	return -1;
    };

    // check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)
    Similar.prototype.isEqual = function(val1, val2) {
    	return val1 === val2 || (val1 !== val1 && val2 !== val2);
    };

    var similar = Similar;

    var mapOrSimilar = function(forceSimilar) {
    	if (typeof Map !== 'function' || forceSimilar) {
    		var Similar = similar;
    		return new Similar();
    	}
    	else {
    		return new Map();
    	}
    };

    var memoizerific = function (limit) {
    	var cache = new mapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true'),
    		lru = [];

    	return function (fn) {
    		var memoizerific = function () {
    			var currentCache = cache,
    				newMap,
    				fnResult,
    				argsLengthMinusOne = arguments.length - 1,
    				lruPath = Array(argsLengthMinusOne + 1),
    				isMemoized = true,
    				i;

    			if ((memoizerific.numArgs || memoizerific.numArgs === 0) && memoizerific.numArgs !== argsLengthMinusOne + 1) {
    				throw new Error('Memoizerific functions should always be called with the same number of arguments');
    			}

    			// loop through each argument to traverse the map tree
    			for (i = 0; i < argsLengthMinusOne; i++) {
    				lruPath[i] = {
    					cacheItem: currentCache,
    					arg: arguments[i]
    				};

    				// climb through the hierarchical map tree until the second-last argument has been found, or an argument is missing.
    				// if all arguments up to the second-last have been found, this will potentially be a cache hit (determined later)
    				if (currentCache.has(arguments[i])) {
    					currentCache = currentCache.get(arguments[i]);
    					continue;
    				}

    				isMemoized = false;

    				// make maps until last value
    				newMap = new mapOrSimilar(process.env.FORCE_SIMILAR_INSTEAD_OF_MAP === 'true');
    				currentCache.set(arguments[i], newMap);
    				currentCache = newMap;
    			}

    			// we are at the last arg, check if it is really memoized
    			if (isMemoized) {
    				if (currentCache.has(arguments[argsLengthMinusOne])) {
    					fnResult = currentCache.get(arguments[argsLengthMinusOne]);
    				}
    				else {
    					isMemoized = false;
    				}
    			}

    			// if the result wasn't memoized, compute it and cache it
    			if (!isMemoized) {
    				fnResult = fn.apply(null, arguments);
    				currentCache.set(arguments[argsLengthMinusOne], fnResult);
    			}

    			// if there is a cache limit, purge any extra results
    			if (limit > 0) {
    				lruPath[argsLengthMinusOne] = {
    					cacheItem: currentCache,
    					arg: arguments[argsLengthMinusOne]
    				};

    				if (isMemoized) {
    					moveToMostRecentLru(lru, lruPath);
    				}
    				else {
    					lru.push(lruPath);
    				}

    				if (lru.length > limit) {
    					removeCachedResult(lru.shift());
    				}
    			}

    			memoizerific.wasMemoized = isMemoized;
    			memoizerific.numArgs = argsLengthMinusOne + 1;

    			return fnResult;
    		};

    		memoizerific.limit = limit;
    		memoizerific.wasMemoized = false;
    		memoizerific.cache = cache;
    		memoizerific.lru = lru;

    		return memoizerific;
    	};
    };

    // move current args to most recent position
    function moveToMostRecentLru(lru, lruPath) {
    	var lruLen = lru.length,
    		lruPathLen = lruPath.length,
    		isMatch,
    		i, ii;

    	for (i = 0; i < lruLen; i++) {
    		isMatch = true;
    		for (ii = 0; ii < lruPathLen; ii++) {
    			if (!isEqual$1(lru[i][ii].arg, lruPath[ii].arg)) {
    				isMatch = false;
    				break;
    			}
    		}
    		if (isMatch) {
    			break;
    		}
    	}

    	lru.push(lru.splice(i, 1)[0]);
    }

    // remove least recently used cache item and all dead branches
    function removeCachedResult(removedLru) {
    	var removedLruLen = removedLru.length,
    		currentLru = removedLru[removedLruLen - 1],
    		tmp,
    		i;

    	currentLru.cacheItem.delete(currentLru.arg);

    	// walk down the tree removing dead branches (size 0) along the way
    	for (i = removedLruLen - 2; i >= 0; i--) {
    		currentLru = removedLru[i];
    		tmp = currentLru.cacheItem.get(currentLru.arg);

    		if (!tmp || !tmp.size) {
    			currentLru.cacheItem.delete(currentLru.arg);
    		} else {
    			break;
    		}
    	}
    }

    // check if the numbers are equal, or whether they are both precisely NaN (isNaN returns true for all non-numbers)
    function isEqual$1(val1, val2) {
    	return val1 === val2 || (val1 !== val1 && val2 !== val2);
    }

    /*!
     * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     */

    function isObject(o) {
      return Object.prototype.toString.call(o) === '[object Object]';
    }

    function isPlainObject$1(o) {
      var ctor,prot;

      if (isObject(o) === false) return false;

      // If has modified constructor
      ctor = o.constructor;
      if (ctor === undefined) return true;

      // If has modified prototype
      prot = ctor.prototype;
      if (isObject(prot) === false) return false;

      // If constructor does not have an Object-specific method
      if (prot.hasOwnProperty('isPrototypeOf') === false) {
        return false;
      }

      // Most likely a plain Object
      return true;
    }

    var isPlainObject_2 = isPlainObject$1;

    var isPlainObject_1 = /*#__PURE__*/Object.defineProperty({
    	isPlainObject: isPlainObject_2
    }, '__esModule', {value: true});

    function areInputsEqual$1(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
        return false;
      }

      for (var i = 0; i < newInputs.length; i++) {
        if (newInputs[i] !== lastInputs[i]) {
          return false;
        }
      }

      return true;
    }

    function useMemoOne(getResult, inputs) {
      var initial = React.useState(function () {
        return {
          inputs: inputs,
          result: getResult()
        };
      })[0];
      var isFirstRun = React.useRef(true);
      var committed = React.useRef(initial);
      var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual$1(inputs, committed.current.inputs));
      var cache = useCache ? committed.current : {
        inputs: inputs,
        result: getResult()
      };
      React.useEffect(function () {
        isFirstRun.current = false;
        committed.current = cache;
      }, [cache]);
      return cache.result;
    }
    function useCallbackOne(callback, inputs) {
      return useMemoOne(function () {
        return callback;
      }, inputs);
    }
    var useMemo = useMemoOne;
    var useCallback = useCallbackOne;

    var useMemoOne_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        useCallback: useCallback,
        useCallbackOne: useCallbackOne,
        useMemo: useMemo,
        useMemoOne: useMemoOne
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(redux);

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(es);

    var u$2 = /*@__PURE__*/getAugmentedNamespace(immer_esm);

    var f$3 = /*@__PURE__*/getAugmentedNamespace(useMemoOne_esm);

    var easyPeasy = createCommonjsModule(function (module, exports) {
    function n(n){return n&&"object"==typeof n&&"default"in n?n.default:n}var t=React__default['default'],r=n(t),e=require$$1,o=n(require$$2),i=n(memoizerific),a=t.createContext(),s="undefined"!=typeof window?t.useLayoutEffect:t.useEffect;function v(n){return function(r,e){var o=t.useContext(n),u=t.useRef(r),i=t.useRef(),c=t.useRef(!0),f=t.useRef(),a=t.useReducer(function(n){return n+1},0)[1];if(f.current||u.current!==r||void 0===i.current)try{i.current=r(o.getState());}catch(n){if("development"===process.env.NODE_ENV){var v="An error occurred trying to map state in a useStoreState hook: "+n.message+".";throw f.current&&(v+="\nThis error may be related to the following error:\n"+f.current.stack+"\n\nOriginal stack trace:"),new Error(v)}throw f.current||n}return s(function(){u.current=r,f.current=void 0;}),s(function(){var n=function(){try{var n=u.current(o.getState());if("function"==typeof e?e(i.current,n):i.current===n)return;i.current=n;}catch(n){f.current=n;}c.current&&a({});},t=o.subscribe(n);return n(),function(){c.current=!1,t();}},[]),i.current}}var l=v(a);function d(n){return function(r){return r(t.useContext(n).getActions())}}var p=d(a);function y(n){return function(){return t.useContext(n).dispatch}}var m=y(a);function h(){return t.useContext(a)}function S(n){return function(){var r=t.useContext(n),e=t.useState(!1),o=e[0],u=e[1];return t.useEffect(function(){r.persist.resolveRehydration().then(function(){return u(!0)});},[]),o}}var g=S(a);function w(){return (w=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(n[e]=r[e]);}return n}).apply(this,arguments)}var b=function(n){var t;return (t={}).$ep_a=!0,t.fn=n,t},j=[function(n){return n}],P=new u$2.Immer({useProxies:!0,autoFreeze:!1}),O=function(n){return function n(t){var r=Object.keys(t).reduce(function(n,r){return null==Object.getOwnPropertyDescriptor(t,r).get&&(n[r]=t[r]),n},{});return Object.keys(r).forEach(function(t){isPlainObject_1.isPlainObject(r[t])&&(r[t]=n(r[t]));}),r}(n)},x=function(n){return null!=n&&"object"==typeof n&&"function"==typeof n.then};function _(n,t){return n.reduce(function(n,t){return isPlainObject_1.isPlainObject(n)?n[t]:void 0},t)}var A=function(n,t,r){0!==n.length?n.reduce(function(t,e,o){return t[e]=o+1===n.length?r:t[e]||{},t[e]},t):"object"==typeof r&&(Object.keys(t).forEach(function(n){delete t[n];}),Object.keys(r).forEach(function(n){t[n]=r[n];}));},k=function(n){try{var t=[];return Promise.resolve((r=n,new Promise(function(n,e){var o=r[Symbol.iterator]();!function r(u){try{var i=o.next();if(i.done)return n(u),Promise.resolve();var c=function(n,e){try{var o=Promise.resolve(Promise.all([u,i.value])).then(function(n){r(function(n,r){try{return Promise.resolve(r()).then(function(n){t.push(n);})}catch(n){return Promise.reject(n)}}(0,n[1]));});}catch(n){return e(n)}return o&&o.then?o.then(void 0,e):o}(0,function(n){e(n);});return Promise.resolve(c&&c.then?c.then(function(){}):void 0)}catch(n){return Promise.reject(n)}}(void 0);}))).then(function(){return t})}catch(n){return Promise.reject(n)}var r;};function I(n,t,r,e){var o=function(n){return void 0===n&&(n=!1),function(t,r,e){if(n){var o=_(t,r),i=e(o);return o!==i?function n(t,r,e){if(0===t.length)return e;var o=w({},r),u=t[0];return o[u]=1===t.length?e:n(t.slice(1),o[u],e),o}(t,r,i):r}if(0===t.length){var c=P.createDraft(r),f=e(c);return f?u$2.isDraft(f)?P.finishDraft(f):f:P.finishDraft(c)}var a=t.slice(0,t.length-1),s=P.createDraft(r),v=_(a,r),l=e(_(t,s));return l&&(v[t[t.length-1]]=l),P.finishDraft(s)}}(n);return function(n,u){var i=function(n,r){var e=t[r.type];return e?function(n,t,r,e){return o(e,n,function(n){return r(n,t.payload)})}(n,r,e,e.definition.meta.parent):n}(n,u),c=r.length>0?function(n,t){return r.reduce(function(n,r){var e=r.key,u=r.reducer;return o(r.parentPath,n,function(n){return n[e]=u(n[e],t),n})},n)}(i,u):i;return n!==c&&e.forEach(function(n){var t=n.bindComputedProperty,r=_(n.parentPath,c);null!=r&&t(r,c);}),c}}var R={getItem:function(){},setItem:function(){},removeItem:function(){}},T=function(n){var t;return function(){if(!t){try{"undefined"!=typeof window&&void 0!==window[n]&&(t=window[n]);}catch(n){}t||(t=R);}return t}},C=T("localStorage"),q=T("sessionStorage");function D(n,t){void 0===t&&(t=[]),null==n&&(n=q()),"string"==typeof n&&("localStorage"===n?n=C():"sessionStorage"===n?n=q():("development"===process.env.NODE_ENV&&console.warn("Invalid storage provider specified for Easy Peasy persist: "+n+'\nValid values include "localStorage", "sessionStorage" or a custom storage engine.'),n=R));var r=[].concat(t).reverse(),e=function(t){var e=n===C()||n===q()?JSON.parse(t).data:t;return r.length>0&&null!=e&&"object"==typeof e&&Object.keys(e).forEach(function(n){e[n]=r.reduce(function(t,r){return r.out(t,n)},e[n]);}),e},o=x(n.getItem("_"));return {isAsync:o,getItem:function(t){if(o)return n.getItem(t).then(function(n){return null!=n?e(n):void 0});var r=n.getItem(t);return null!=r?e(r):void 0},setItem:function(r,e){return n.setItem(r,function(r){return t.length>0&&null!=r&&"object"==typeof r&&Object.keys(r).forEach(function(n){r[n]=t.reduce(function(t,r){return r.in(t,n)},r[n]);}),n===C()||n===q()?JSON.stringify({data:r}):r}(e))},removeItem:function(t){return n.removeItem(t)}}}function M(n,t){return function(){return 0===t.internals.t.length?Promise.resolve():k(t.internals.t.map(function(t){var r=t.path,e=t.config;return function(){return Promise.resolve(e.storage.removeItem(n(r)))}}))}}function E(n,t,r,e){return 0===r.internals.t.length?Promise.resolve():k(r.internals.t.map(function(o){return function(){var u=o.path,i=o.config,f=i.mergeStrategy,a=i.storage;if(e&&(u.length<1||u[0]!==e))return Promise.resolve();var s=r.internals.o,v=function(n,t){return null!=n&&null!=t&&(typeof n!=typeof t||Array.isArray(n)&&!Array.isArray(t))},l=function(n){null!=n&&function(n,t){if("overwrite"===f)A(u,n,t);else if("mergeShallow"===f){var r=_(u,n);Object.keys(t).forEach(function(n){v(r[n],t[n])||(r[n]=t[n]);});}else "mergeDeep"===f&&function n(t,r){Object.keys(r).forEach(function(e){v(t[e],r[e])||(isPlainObject_1.isPlainObject(r[e])?(t[e]=t[e]||{},n(t[e],r[e])):t[e]=r[e]);});}(_(u,n),t);}(s,n),t(s);},d=a.getItem(n(u));return x(d)?d.then(l):Promise.resolve(l(d))}}))}var N=function(n,t){console.log("An error occurred in a listener for "+n),console.log(t);},z=function(n,t){return function(){try{var r=t.apply(void 0,[].slice.call(arguments));x(r)&&r.catch(function(t){N(n,t);});}catch(t){N(n,t);}}};function J(n){return function(){return function(t){return function(r){var e=t(r);if(r&&n.internals.u[r.type]&&n.internals.u[r.type].length>0){var o=n.internals.i[r.type];n.internals.u[r.type].forEach(function(n){n({type:o?o.definition.meta.type:r.type,payload:r.payload,error:r.error,result:r.result});});}return e}}}}function F(n){return function(t){return function(r){return function(e){return n.internals.s.currentState=t.getState(),n.internals.s.isInReducer=!0,r(e)}}}}function L(n){return function(t){return function(r){return function(e){if(0===n.internals.v.length)return r(e);var o=t.getState(),u=r(e),i=t.getState();return n.internals.v.forEach(function(n){var t=_(n.meta.parent,o),r=_(n.meta.parent,i);if(t!==r){var u=n.dependencyResolvers.map(function(n){return n(t)}),c=n.dependencyResolvers.map(function(n){return n(r)});u.some(function(n,t){return n!==c[t]})&&n.actionCreator(u,c,e);}}),u}}}}var V=function(n){console.log(n);},Y=function(n,t){console.log("An error occurred in a listener for "+n),console.log(t);},$=function(n,t){return function(){try{var r=t.apply(void 0,[].slice.call(arguments));x(r)&&r.catch(function(t){Y(n,t);});}catch(t){Y(n,t);}}};function B(n,t){void 0===t&&(t={});var r=O(n),u=t.compose,f=t.devTools,a=void 0===f?"production"!==process.env.NODE_ENV:f,s=t.disableImmer,v=void 0!==s&&s,l=t.enhancers,d=void 0===l?[]:l,p=t.initialState,y=void 0===p?{}:p,m=t.injections,h=void 0===m?{}:m,S=t.middleware,g=void 0===S?[]:S,j=t.mockActions,P=void 0!==j&&j,R=t.name,T=void 0===R?"EasyPeasyStore":R,C=t.version,q=void 0===C?0:C,N=t.reducerEnhancer,Y=void 0===N?function(n){return n}:N;if("production"!==process.env.NODE_ENV&&"object"!=typeof h)throw new Error("[easy-peasy] Store injections must be an object");var B=function(n){return w({},n,{ePRS:b(function(n,t){return t})})},G={},H=B(r),K=[],Q=function(n){return "["+T+"]["+q+"]"+(n.length>0?"["+n.join(".")+"]":"")},U=function(n,t){var r,e=Promise.resolve(),o=!1,u="undefined"==typeof window?function(n){return n()}:null!=window.requestIdleCallback?window.requestIdleCallback:window.requestAnimationFrame;return {persist:function(i){if(0!==t.internals.t.length){var f=function(){o=!0,e=new Promise(function(e){u(function(){k(t.internals.t.map(function(t){var r=t.path,e=t.config;return function(){var t=e.storage,o=e.allow,u=e.deny,f=function(n,t,r){var e=Object.keys(n);return t.length>0&&(e=e.reduce(function(n,r){return -1!==t.findIndex(function(n){return n===r})?[].concat(n,[r]):n},[])),r.length>0&&(e=e.reduce(function(n,t){return -1!==r.findIndex(function(n){return n===t})?n:[].concat(n,[t])},[])),e}(O(_(r,i)),o,u),a={};return f.map(function(n){var t=_([].concat(r,[n]),i),e=isPlainObject_1.isPlainObject(t)?O(t):t;a[n]=e;}),Promise.resolve(t.setItem(n(r),a))}})).finally(function(){if(o=!1,r){var n=r;r=null,n();}else e();});});});};o?r=f:f();}},clear:M(n,t),flush:function(){try{return r&&r(),Promise.resolve(e).then(function(){})}catch(n){return Promise.reject(n)}}}}(Q,G),W=function(n,t){return function(r){var e=r.getState;return function(r){return function(o){var u=r(o);return o&&"@action.ePRS"!==o.type&&t.internals.t.length>0&&n.persist(e()),u}}}}(U,G),X=function(n){return G.internals.i["@action.ePRS"](n)},Z=function(n){void 0===n&&(n={}),G.internals=function(n){var t=n.disableImmer,r=n.reducerEnhancer,e=function(n,t,r,e){var o=t,u={},f={},a={},s={},v=[],l=[],d=[],p={},y={},m=[],h=[],S={isInReducer:!1,currentState:o};return h=h.sort(function(n,t){var r=n.path.join("."),e=t.path.join(".");return r<e?-1:r>e?1:0}),function n(y,S){return Object.keys(y).forEach(function(g){var b=y[g],j=[].concat(S,[g]),P={parent:S,path:j,key:g},O=function(){var n=_(S,t);A(j,o,n&&g in n?n[g]:b);};if("$ep_p"!==g)if(null!=b&&"object"==typeof b)if(b.$ep_a||b.$ep_aO){var k=w({},b),I=k.$ep_a?"@action":"@actionOn";k.meta={actionName:P.key,category:I,type:I+"."+P.path.join("."),parent:P.parent,path:P.path},k.actionCreator=function(n,t){var r=function(r){var e={type:n.meta.type,payload:r};return n.$ep_aO&&n.meta.resolvedTargets&&(r.resolvedTargets=[].concat(n.meta.resolvedTargets)),t.dispatch(e)};return r.type=n.meta.type,r}(k,e),k.actionCreator.definition=k,k.fn.definition=k,u[k.meta.type]=k.actionCreator,a[k.meta.type]=k.fn,"ePRS"!==P.key&&(k.$ep_aO?(m.push(k),A(j,p,k.actionCreator)):A(j,f,k.actionCreator));}else if(b.$ep_t||b.$ep_tO){var R=w({},b),T=(R.$ep_t?"@thunk":"@thunkOn")+"."+P.path.join(".");R.meta={actionName:P.key,parent:P.parent,path:P.path,type:T,startType:T+"(start)",successType:T+"(success)",failType:T+"(fail)"},R.thunkHandler=function(n,t,r,e){return function(o,u){var i={dispatch:t.dispatch,fail:u,getState:function(){return _(n.meta.parent,t.getState())},getStoreActions:function(){return e},getStoreState:t.getState,injections:r,meta:{key:n.meta.actionName,parent:n.meta.parent,path:n.meta.path}};return n.$ep_tO&&n.meta.resolvedTargets&&(o.resolvedTargets=[].concat(n.meta.resolvedTargets)),n.fn(_(n.meta.parent,e),o,i)}}(R,e,r,f),A(j,s,R.thunkHandler),R.actionCreator=function(n,t){var r=function(r){var e=z(n.meta.startType,function(){return t.dispatch({type:n.meta.startType,payload:r})}),o=z(n.meta.failType,function(e){return t.dispatch({type:n.meta.failType,payload:r,error:e})}),u=z(n.meta.successType,function(e){return t.dispatch({type:n.meta.successType,payload:r,result:e})});e();var i=null,c=function(n){i=n;},f=t.dispatch(function(){return n.thunkHandler(r,c)});return x(f)?f.then(function(n){return i?o(i):u(n),n}):(i?o(i):u(f),f)};return r.type=n.meta.type,r.successType=n.meta.successType,r.failType=n.meta.failType,r.startType=n.meta.startType,r}(R,e),R.actionCreator.definition=R,u[R.meta.type]=R.actionCreator,R.$ep_tO?(m.push(R),A(j,p,R.actionCreator)):A(j,f,R.actionCreator);}else if(b.$ep_c){var C=_(S,o),q=function(n,t,r,e,o){var u=i(1)(r.fn);return function(e,o){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var t=_(n,o),e=r.stateResolvers.map(function(n){return n(t,o)});return u.apply(void 0,e)}});}}(S,g,b);q(C,o),v.push({key:g,parentPath:S,bindComputedProperty:q});}else if(b.$ep_r)l.push({key:g,parentPath:S,reducer:b.fn});else if(b.$ep_e){var M=w({},b),E="@effectOn."+P.path.join(".");M.meta={type:E,actionName:P.key,parent:P.parent,path:P.path,startType:E+"(start)",successType:E+"(success)",failType:E+"(fail)"};var N=function(n,t,r,e){var o,u=_(n.meta.parent,e);return function(i){var c={dispatch:t.dispatch,getState:function(){return _(n.meta.parent,t.getState())},getStoreActions:function(){return e},getStoreState:t.getState,injections:r,meta:{key:n.meta.actionName,parent:n.meta.parent,path:n.meta.path}};if(void 0!==o){var f=o();o=void 0,x(f)&&f.catch(V);}var a=n.fn(u,i,c);if(x(a))return a.then(function(n){"function"==typeof n&&"production"!==process.env.NODE_ENV&&console.warn("[easy-peasy] You have an effect which is asynchronously resolving a dispose function. This is considered an anti-pattern. Please read the API documentation for more information.");});"function"==typeof a&&(o=a);}}(M,e,r,f),J=function(n,t,r){var e=function(e,o,u){var i={prev:e,current:o,action:u},c=$(n.meta.startType,function(){return t.dispatch({type:n.meta.startType,change:i})}),f=$(n.meta.successType,function(){return t.dispatch({type:n.meta.successType,change:i})});c();try{var a=t.dispatch(function(){return r(i)});return x(a)?a.then(function(n){return f(n),n},V):(f(a),a)}catch(n){V(n);}};return e.type=n.meta.type,e.startType=n.meta.startType,e.successType=n.meta.successType,e.failType=n.meta.failType,e}(M,e,N);M.actionCreator=J,d.push(M);}else isPlainObject_1.isPlainObject(b)?(null==_(j,o)&&A(j,o,{}),n(b,j)):O();else O();else h.push(function(n,t){return void 0===t&&(t={}),{path:n,config:{allow:t.allow||[],deny:t.deny||[],mergeStrategy:t.mergeStrategy||"mergeDeep",storage:D(t.storage,t.transformers)}}}(S,b));})}(n,[]),function(n,t,r,e){n.forEach(function(n){var o=n.targetResolver(_(n.meta.parent,t),t),u=(Array.isArray(o)?o:[o]).reduce(function(n,t){return "function"==typeof t&&t.definition.meta.type&&r[t.definition.meta.type]?n.push(t.definition.meta.successType?t.definition.meta.successType:t.definition.meta.type):"string"==typeof t&&n.push(t),n},[]);n.meta.resolvedTargets=u,u.forEach(function(t){var o=e[t]||[];o.push(r[n.meta.type]),e[t]=o;});});}(m,f,u,y),{i:u,l:f,p:a,m:v,h:l,s:S,o:o,v:d,S:p,u:y,t:h}}(n.model,n.initialState,n.injections,n.references),o=e.m;return {i:e.i,l:e.l,m:o,s:e.s,o:e.o,v:e.v,S:e.S,u:e.u,t:e.t,reducer:r(I(t,e.p,e.h,o))}}({disableImmer:v,initialState:n,injections:h,model:H,reducerEnhancer:Y,references:G});},nn=u||(a&&"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({name:T}):e.compose);Z(y);var tn=[F(G)].concat(g,[o,J(G),L(G),W]);P&&tn.push(function(){return function(){return function(n){null!=n&&K.push(n);}}});var rn=e.createStore(G.internals.reducer,G.internals.o,nn.apply(void 0,[e.applyMiddleware.apply(void 0,tn)].concat(d)));rn.subscribe(function(){G.internals.s.isInReducer=!1;}),G.dispatch=rn.dispatch,G.getState=rn.getState;var en=function(){Object.keys(rn.dispatch).forEach(function(n){delete rn.dispatch[n];}),Object.keys(G.internals.l).forEach(function(n){rn.dispatch[n]=G.internals.l[n];});};en();var on=function(n){var t=rn.getState();n&&delete t[n],Z(t),rn.replaceReducer(G.internals.reducer),X(G.internals.o),en();},un=E(Q,X,G);return Object.assign(rn,{addModel:function(n,t){H[n]&&"production"!==process.env.NODE_ENV&&(console.warn('easy-peasy: The store model already contains a model definition for "'+n+'"'),rn.removeModel(n)),H[n]=t,on();var r=E(Q,X,G,n);return {resolveRehydration:function(){return r}}},clearMockedActions:function(){K=[];},getActions:function(){return G.internals.l},getListeners:function(){return G.internals.S},getMockedActions:function(){return [].concat(K)},persist:{clear:U.clear,flush:U.flush,resolveRehydration:function(){return un}},reconfigure:function(n){H=B(n),on();},removeModel:function(n){H[n]?(delete H[n],on(n)):"production"!==process.env.NODE_ENV&&console.warn('easy-peasy: The store model does not contain a model definition for "'+n+'"');}})}exports.StoreProvider=function(n){return r.createElement(a.Provider,{value:n.store},n.children)},exports.action=b,exports.actionOn=function(n,t){var r;return (r={}).$ep_aO=!0,r.fn=t,r.targetResolver=n,r},exports.computed=function(n,t){var r,e;return "function"==typeof t?((e={}).$ep_c=!0,e.fn=t,e.stateResolvers=n,e):((r={}).$ep_c=!0,r.fn=n,r.stateResolvers=j,r)},exports.createContextStore=function(n,e){void 0===e&&(e={});var o=e.injections,u=void 0===o?{}:o,i=t.createContext();return {Provider:function(t){var o=t.children,c=t.runtimeModel,a=t.injections;if(null!=a){var s="function"==typeof a?a(u):a,v=Object.keys(s);Object.keys(u).filter(function(n){return !v.includes(n)}).forEach(function(n){delete u[n];}),Object.assign(u,s);}var l=f$3.useMemoOne(function(){return B("function"==typeof n?n(c):n,w({},e,{originalInjections:u}))},[]);return r.createElement(i.Provider,{value:l},o)},useStore:function(){return t.useContext(i)},useStoreState:v(i),useStoreActions:d(i),useStoreDispatch:y(i),useStoreRehydrated:S(i)}},exports.createStore=B,exports.createTransform=function(n,t,r){void 0===r&&(r={});var e=r.whitelist||null,o=r.blacklist||null;function u(n){return !(!e||-1!==e.indexOf(n))||!(!o||-1===o.indexOf(n))}return {in:function(t,r,e){return !u(r)&&n?n(t,r,e):t},out:function(n,r,e){return !u(r)&&t?t(n,r,e):n}}},exports.createTypedHooks=function(){return {useStoreActions:p,useStoreDispatch:m,useStoreState:l,useStoreRehydrated:g,useStore:h}},exports.debug=function(n){return u$2.isDraft(n)?u$2.current(n):n},exports.generic=function(n){return n},exports.memo=function(n,t){return i(t)(n)},exports.persist=function(n,t){var r;return "undefined"==typeof window?n:w({},n,((r={}).$ep_p=t,r))},exports.reducer=function(n){var t;return (t={}).$ep_r=!0,t.fn=n,t},exports.thunk=function(n){var t;return (t={}).$ep_t=!0,t.fn=n,t},exports.thunkOn=function(n,t){var r;return (r={}).$ep_tO=!0,r.fn=t,r.targetResolver=n,r},exports.unstable_effectOn=function(n,t){var r;return (r={}).$ep_e=!0,r.dependencyResolvers=n,r.fn=t,r},exports.useLocalStore=function(n,r,e){void 0===r&&(r=[]);var o=t.useRef(),u=t.useRef(),i=f$3.useMemoOne(function(){var t=null!=o.current?o.current.getState():void 0,r=null!=e?e(t,u.current):void 0,i=B(n(t),r);return u.current=r,o.current=i,i},r),c=t.useState(function(){return i.getState()}),a=c[0],s=c[1];return t.useEffect(function(){return i.subscribe(function(){var n=i.getState();a!==n&&s(n);})},[i]),[a,i.getActions(),i]},exports.useStore=h,exports.useStoreActions=p,exports.useStoreDispatch=m,exports.useStoreRehydrated=g,exports.useStoreState=l;
    //# sourceMappingURL=easy-peasy.js.map
    });

    // import {
    // export type FilterOperationsType = {
    //   key: string;
    //   name: string;
    //   type: FilterTypes;
    //   valSize?: number;
    // };
    // export type GraphFilter = {
    //   id: string;
    //   name: string;
    //   col: Array<UISchemaItem | null>;
    //   op: FilterOperationsType | null;
    //   val: FilterValuesType;
    //   // uiValid: string | undefined;
    // };
    // export type FilterNodeProp = AppNodeType & {
    //   data: {
    //     filters: Array<GraphFilter>;
    //     groupFilterName: string;
    //     [FILTER_SCHEMA_KEY]: UISchemaWithId;
    //     script: string;
    //   };
    // };
    // export const filtersExist = (
    //   properties: Record<string, any>,
    //   node: AppNodeType
    // ) => {
    //   return properties[node.id]?.filters.length;
    // };
    var baseTranslation = "preperation.filter.operations.";
    var operations = function (t) { return ({
        commonOperations: [
            {
                key: "equals",
                name: t(baseTranslation + "equals"),
                type: "common",
                valSize: 1,
            },
            {
                key: "notEquals",
                name: t(baseTranslation + "notEquals"),
                type: "common",
                valSize: 1,
            },
            { key: "isNull", name: t(baseTranslation + "isNull"), type: "common" },
            {
                key: "isNotNull",
                name: t(baseTranslation + "isNotNull"),
                type: "common",
            },
            { key: "isEmpty", name: t(baseTranslation + "isEmpty"), type: "common" },
            {
                key: "isNotEmpty",
                name: t(baseTranslation + "isNotEmpty"),
                type: "common",
            },
            {
                key: "contains",
                name: t(baseTranslation + "contains"),
                type: "common",
                valSize: 1,
            },
            {
                key: "notContaines",
                name: t(baseTranslation + "notContaines"),
                type: "common",
                valSize: 1,
            },
        ],
        stringOptions: [
            {
                key: "regex",
                name: t(baseTranslation + "regex"),
                type: "string",
                valSize: 1,
            },
            {
                key: "startWith",
                name: t(baseTranslation + "startWith"),
                type: "string",
                valSize: 1,
            },
            {
                key: "endWith",
                name: t(baseTranslation + "endWith"),
                type: "string",
                valSize: 1,
            },
        ],
        numericOptions: [
            {
                key: "between",
                name: t(baseTranslation + "between"),
                type: "number",
                valSize: 2,
            },
        ],
        dateOptions: [
            {
                key: "dateFrom",
                name: t(baseTranslation + "dateFrom"),
                type: "date",
                valSize: 1,
            },
            {
                key: "dateTo",
                name: t(baseTranslation + "dateTo"),
                type: "date",
                valSize: 1,
            },
            {
                key: "between",
                name: t(baseTranslation + "between"),
                type: "date",
                valSize: 2,
            },
        ],
        mapOptions: [
            {
                key: "surrounded",
                name: t(baseTranslation + "surrounded"),
                type: "geographic",
                valSize: 1,
            },
        ],
    }); };
    var reorderValues = function (type, op) {
        return !op.valSize
            ? []
            : // : op.valSize < val.length
             __spreadArray([], new Array(op.valSize).fill(type === "date"
                ? new Date().toISOString()
                : type === "number"
                    ? 0
                    : type === "geographic"
                        ? undefined
                        : ""));
    };
    // export const filterGetProperAttr = (node: FilterNodeProp) => {
    //   return node;
    // };
    // export function filteredSchema(filter: GraphFilter, schema: UISchema) {
    //   let remainingSchema;
    //   let typedSchema;
    //   if (filter?.col?.length) {
    //     const filtercolumnsObj = filter.col.reduce(
    //       (prev, cur) => (cur?.name ? { ...prev, [cur.name]: true } : prev),
    //       {}
    //     );
    //     remainingSchema = schema.filter((s) => !(s.name in filtercolumnsObj));
    //     typedSchema = remainingSchema.filter(
    //       (s) => s.type === filter?.col[0]?.type
    //     );
    //   }
    //   return {
    //     typedSchema,
    //     remainingSchema,
    //   };
    // }
    // export const checkFilterValidation = (
    //   schema: UISchema,
    //   filter: GraphFilter,
    //   t: any
    // ) => {
    //   const schemaObj = schema.reduce(
    //     (prev, cur) => ({
    //       ...prev,
    //       [cur.name]: cur,
    //     }),
    //     {}
    //   );
    //   if (filter.col.length === 0 || !filter.op) {
    //     return t("error.required");
    //   } else if (filter.col.some((col) => !col || !(col.name in schemaObj))) {
    //     return t("error.wrongSchema");
    //   }
    // };

    var vtStore = {
        VTVersion: "1.0.0",
        settings: { direction: "rtl", lang: "fa" },
        visibleRows: [],
        enhancedColumns: [],
        showFilter: false,
        filters: [],
        toggleSingleRow: easyPeasy.action(function (state, _a) {
            var index = _a.index;
            state.visibleRows[index].selected = !state.visibleRows[index].selected;
        }),
        toggleAllRows: easyPeasy.action(function (state, _a) {
            var isSelected = _a.isSelected;
            state.visibleRows = state.visibleRows.map(function (r) { return (__assign(__assign({}, r), { selected: !isSelected })); });
        }),
        toggleShowFilter: easyPeasy.action(function (state, showFilter) {
            if (state.filters.length === 0) {
                var col = state.enhancedColumns[0];
                state.filters.push({
                    id: new Date().getTime().toString(),
                    // key: string;
                    column: [{ key: col.key, label: col.label, type: col.type }],
                    operation: undefined,
                    value: [undefined],
                });
            }
            state.showFilter = showFilter;
        }),
        setTableData: easyPeasy.action(function (state, payload) {
            var enhancedColumns = payload.enhancedColumns, visibleRows = payload.visibleRows;
            state.visibleRows = visibleRows;
            state.enhancedColumns = enhancedColumns;
        }),
        fakeAppendTableData: easyPeasy.action(function (state, _a) {
            var rows = _a.rows, index = _a.index;
            state.visibleRows = __spreadArray(__spreadArray(__spreadArray([], state.visibleRows.slice(0, index + 1)), rows), state.visibleRows.slice(index + 1));
        }),
        toggleVisibleColumns: easyPeasy.action(function (state, _a) {
            var index = _a.index;
            state.enhancedColumns[index].visible = !state.enhancedColumns[index]
                .visible;
        }),
        setStickyColumn: easyPeasy.action(function (state, _a) {
            var index = _a.index;
            state.enhancedColumns[index].sticky = !state.enhancedColumns[index].sticky;
        }),
        numRowsSelected: easyPeasy.computed(function (state) { return state.visibleRows.filter(function (r) { return r.selected; }).length; }),
        selectedRows: easyPeasy.computed(function (state) {
            return state.visibleRows.reduce(function (acc, cur, idx) { return (cur.selected ? __spreadArray(__spreadArray([], acc), [idx]) : acc); }, []);
        }),
        visibleColumns: easyPeasy.computed(function (state) {
            return state.enhancedColumns.filter(function (c) { return c.visible && !c.sticky; });
        }),
        stickyColumns: easyPeasy.computed(function (state) {
            return state.enhancedColumns.filter(function (c) { return c.visible && c.sticky; });
        }),
        sortTable: easyPeasy.action(function (state, _a) {
            var index = _a.index, sortType = _a.sortType, columnKey = _a.columnKey;
            if (!state.visibleColumns[index]) {
                console.warn("column not found something wrong!");
                return;
            }
            var idx = state.enhancedColumns.findIndex(function (ec) { return ec.key === columnKey; });
            if (idx === -1)
                return;
            state.enhancedColumns.map(function (ec) { return (ec.sorted = undefined); });
            state.enhancedColumns[idx].sorted = sortType;
            if (state.visibleRows.length > 0)
                state.visibleRows =
                    sortType === "DESC"
                        ? state.visibleRows.sort(function (a, b) {
                            return a[columnKey] < b[columnKey] ? 1 : -1;
                        })
                        : state.visibleRows.sort(function (a, b) {
                            return a[columnKey] < b[columnKey] ? -1 : 1;
                        });
        }),
        filterSetColumn: easyPeasy.action(function (state, action) {
            var _a;
            var filterIndex = action.filterIndex, column = action.column, columnIndex = action.columnIndex;
            var filter = state.filters[filterIndex];
            if (((_a = filter.operation) === null || _a === void 0 ? void 0 : _a.type) !== column.type) {
                filter.operation = undefined;
            }
            // const colIndex = state.enhancedColumns.findIndex((ec) => ec.key === colKey);
            // if (colIndex === -1) return;
            filter.column[columnIndex] = column;
            // if (column.type === "geographic" && filter.column.length === 1) {
            //   filter.col.push(column);
            // } else if (column.type !== "geographic" && filter.col.length === 2) {
            //   el.data.filters[filterIndex].col = filter.col.slice(0, 1);
            // }
        }),
        filterSetOperation: easyPeasy.action(function (state, action) {
            var _a;
            var filterIndex = action.filterIndex, operation = action.operation;
            // const filter = state.filters[filterIndex];
            state.filters[filterIndex].operation = operation;
            var type = (_a = state.filters[filterIndex].column[0]) === null || _a === void 0 ? void 0 : _a.type;
            state.filters[filterIndex].value = reorderValues(type, operation
            // filter.value
            );
        }),
        filterSetValue: easyPeasy.action(function (state, action) {
            var filterIndex = action.filterIndex, value = action.value, valueIndex = action.valueIndex;
            state.filters[filterIndex].value[valueIndex] = value;
            // else if (val !== undefined) {
            //   el.data.filters[filterIndex].val = val;
            // }
        }),
        filterAdd: easyPeasy.action(function (state, _a) {
            var columnKey = _a.columnKey;
            state.showFilter = true;
            var col = state.enhancedColumns.filter(function (ec) { return ec.key === columnKey; });
            if (!col || col.length === 0) {
                return;
            }
            state.filters.push({
                id: new Date().getTime().toString(),
                // key: string;
                column: [{ key: col[0].key, label: col[0].label, type: col[0].type }],
                operation: undefined,
                value: [undefined],
            });
        }),
        filterDelete: easyPeasy.action(function (state, _a) {
            // const el = findNodeState<FilterNodeProp>(state);
            var _b;
            var index = _a.index;
            (_b = state.filters) === null || _b === void 0 ? void 0 : _b.splice(index, 1);
        }),
    };
    // const nodeEnv: string = (typeof process?.__ENV__ !== 'undefined' && __ENV__) as string;
    var store = easyPeasy.createStore(vtStore);

    function chainPropTypes(propType1, propType2) {
      if (process.env.NODE_ENV === 'production') {
        return function () {
          return null;
        };
      }

      return function validate() {
        return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
      };
    }

    function _extends$3() {
      _extends$3 = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends$3.apply(this, arguments);
    }

    function _typeof$1(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$1 = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof$1 = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof$1(obj);
    }

    function isPlainObject(item) {
      return item && _typeof$1(item) === 'object' && item.constructor === Object;
    }
    function deepmerge(target, source) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        clone: true
      };
      var output = options.clone ? _extends$3({}, target) : target;

      if (isPlainObject(target) && isPlainObject(source)) {
        Object.keys(source).forEach(function (key) {
          // Avoid prototype pollution
          if (key === '__proto__') {
            return;
          }

          if (isPlainObject(source[key]) && key in target) {
            output[key] = deepmerge(target[key], source[key], options);
          } else {
            output[key] = source[key];
          }
        });
      }

      return output;
    }

    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$2="function"===typeof Symbol&&Symbol.for,c$2=b$2?Symbol.for("react.element"):60103,d$2=b$2?Symbol.for("react.portal"):60106,e$2=b$2?Symbol.for("react.fragment"):60107,f$2=b$2?Symbol.for("react.strict_mode"):60108,g$2=b$2?Symbol.for("react.profiler"):60114,h$2=b$2?Symbol.for("react.provider"):60109,k$2=b$2?Symbol.for("react.context"):60110,l$2=b$2?Symbol.for("react.async_mode"):60111,m$2=b$2?Symbol.for("react.concurrent_mode"):60111,n$2=b$2?Symbol.for("react.forward_ref"):60112,p$2=b$2?Symbol.for("react.suspense"):60113,q$2=b$2?
    Symbol.for("react.suspense_list"):60120,r$2=b$2?Symbol.for("react.memo"):60115,t=b$2?Symbol.for("react.lazy"):60116,v$2=b$2?Symbol.for("react.block"):60121,w$2=b$2?Symbol.for("react.fundamental"):60117,x$2=b$2?Symbol.for("react.responder"):60118,y$2=b$2?Symbol.for("react.scope"):60119;
    function z$2(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$2:switch(a=a.type,a){case l$2:case m$2:case e$2:case g$2:case f$2:case p$2:return a;default:switch(a=a&&a.$$typeof,a){case k$2:case n$2:case t:case r$2:case h$2:return a;default:return u}}case d$2:return u}}}function A$2(a){return z$2(a)===m$2}var AsyncMode=l$2;var ConcurrentMode=m$2;var ContextConsumer$2=k$2;var ContextProvider$2=h$2;var Element$3=c$2;var ForwardRef$2=n$2;var Fragment$2=e$2;var Lazy$2=t;var Memo$2=r$2;var Portal$3=d$2;
    var Profiler$2=g$2;var StrictMode$2=f$2;var Suspense$2=p$2;var isAsyncMode$2=function(a){return A$2(a)||z$2(a)===l$2};var isConcurrentMode$2=A$2;var isContextConsumer$2=function(a){return z$2(a)===k$2};var isContextProvider$2=function(a){return z$2(a)===h$2};var isElement$2=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$2};var isForwardRef$2=function(a){return z$2(a)===n$2};var isFragment$2=function(a){return z$2(a)===e$2};var isLazy$2=function(a){return z$2(a)===t};
    var isMemo$2=function(a){return z$2(a)===r$2};var isPortal$2=function(a){return z$2(a)===d$2};var isProfiler$2=function(a){return z$2(a)===g$2};var isStrictMode$2=function(a){return z$2(a)===f$2};var isSuspense$2=function(a){return z$2(a)===p$2};
    var isValidElementType$2=function(a){return "string"===typeof a||"function"===typeof a||a===e$2||a===m$2||a===g$2||a===f$2||a===p$2||a===q$2||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r$2||a.$$typeof===h$2||a.$$typeof===k$2||a.$$typeof===n$2||a.$$typeof===w$2||a.$$typeof===x$2||a.$$typeof===y$2||a.$$typeof===v$2)};var typeOf$2=z$2;

    var reactIs_production_min$2 = {
    	AsyncMode: AsyncMode,
    	ConcurrentMode: ConcurrentMode,
    	ContextConsumer: ContextConsumer$2,
    	ContextProvider: ContextProvider$2,
    	Element: Element$3,
    	ForwardRef: ForwardRef$2,
    	Fragment: Fragment$2,
    	Lazy: Lazy$2,
    	Memo: Memo$2,
    	Portal: Portal$3,
    	Profiler: Profiler$2,
    	StrictMode: StrictMode$2,
    	Suspense: Suspense$2,
    	isAsyncMode: isAsyncMode$2,
    	isConcurrentMode: isConcurrentMode$2,
    	isContextConsumer: isContextConsumer$2,
    	isContextProvider: isContextProvider$2,
    	isElement: isElement$2,
    	isForwardRef: isForwardRef$2,
    	isFragment: isFragment$2,
    	isLazy: isLazy$2,
    	isMemo: isMemo$2,
    	isPortal: isPortal$2,
    	isProfiler: isProfiler$2,
    	isStrictMode: isStrictMode$2,
    	isSuspense: isSuspense$2,
    	isValidElementType: isValidElementType$2,
    	typeOf: typeOf$2
    };

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var reactIs_development$2 = createCommonjsModule(function (module, exports) {



    if (process.env.NODE_ENV !== "production") {
      (function() {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }

      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
      })();
    }
    });

    var reactIs$2 = createCommonjsModule(function (module) {

    if (process.env.NODE_ENV === 'production') {
      module.exports = reactIs_production_min$2;
    } else {
      module.exports = reactIs_development$2;
    }
    });

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols$1) {
    			symbols = getOwnPropertySymbols$1(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var printWarning$1 = function() {};

    if (process.env.NODE_ENV !== 'production') {
      var ReactPropTypesSecret = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

      printWarning$1 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (process.env.NODE_ENV !== 'production') {
        for (var typeSpecName in typeSpecs) {
          if (has$1(typeSpecs, typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;

              var stack = getStack ? getStack() : '';

              printWarning$1(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }

    /**
     * Resets warning cache when testing.
     *
     * @private
     */
    checkPropTypes.resetWarningCache = function() {
      if (process.env.NODE_ENV !== 'production') {
        loggedTypeFailures = {};
      }
    };

    var checkPropTypes_1 = checkPropTypes;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */







    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {};

    if (process.env.NODE_ENV !== 'production') {
      printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }

      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */

      var ANONYMOUS = '<<anonymous>>';

      // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),

        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      /*eslint-disable no-self-compare*/
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/

      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */
      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      }
      // Make `instanceof Error` still work for returned errors.
      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== 'production') {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret_1) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;
              if (
                !manualPropTypeCallCache[cacheKey] &&
                // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3
              ) {
                printWarning(
                  'You are manually calling a React.PropTypes validation ' +
                  'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);

        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);

            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!reactIs$2.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== 'production') {
            if (arguments.length > 1) {
              printWarning(
                'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
              );
            } else {
              printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
          }
          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === 'symbol') {
              return String(value);
            }
            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
          return emptyFunctionThatReturnsNull;
        }

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            printWarning(
              'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
            );
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
              return null;
            }
          }

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          // We need to check all keys in case some are required but missing from
          // props.
          var allKeys = objectAssign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError(
                'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;
          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        }

        // falsy value can't be a Symbol
        if (!propValue) {
          return false;
        }

        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }

        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      }

      // Equivalent of `typeof` but with special handling for array and regexp.
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }

      // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }

      // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }

      // Returns class name of the object, if any.
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes_1;
      ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */



    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction;

    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret_1) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var propTypes = createCommonjsModule(function (module) {
    if (process.env.NODE_ENV !== 'production') {
      var ReactIs = reactIs$2;

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    } else {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      module.exports = factoryWithThrowingShims();
    }
    });

    function isClassComponent$1(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }

    function acceptingRef(props, propName, componentName, location, propFullName) {
      var element = props[propName];
      var safePropName = propFullName || propName;

      if (element == null) {
        return null;
      }

      var warningHint;
      var elementType = element.type;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */

      if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
        warningHint = 'Did you accidentally use a plain function component for an element instead?';
      }

      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }

      return null;
    }

    var elementAcceptingRef = chainPropTypes(propTypes.element, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes(propTypes.element.isRequired, acceptingRef);

    function isClassComponent(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }

    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var safePropName = propFullName || propName;

      if (propValue == null) {
        return null;
      }

      var warningHint;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */

      if (typeof propValue === 'function' && !isClassComponent(propValue)) {
        warningHint = 'Did you accidentally provide a plain function component instead?';
      }

      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }

      return null;
    }

    var elementTypeAcceptingRef$1 = chainPropTypes(propTypes.elementType, elementTypeAcceptingRef);

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    // This module is based on https://github.com/airbnb/prop-types-exact repository.
    // However, in order to reduce the number of dependencies and to remove some extra safe checks
    // the module was forked.
    // Only exported for test purposes.
    var specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes) {
      if (process.env.NODE_ENV === 'production') {
        return propTypes;
      }

      return _extends$3({}, propTypes, _defineProperty({}, specialProperty, function (props) {
        var unsupportedProps = Object.keys(props).filter(function (prop) {
          return !propTypes.hasOwnProperty(prop);
        });

        if (unsupportedProps.length > 0) {
          return new Error("The following props are not supported: ".concat(unsupportedProps.map(function (prop) {
            return "`".concat(prop, "`");
          }).join(', '), ". Please remove them."));
        }

        return null;
      }));
    }

    /**
     * WARNING: Don't import this directly.
     * Use `MuiError` from `@material-ui/utils/macros/MuiError.macro` instead.
     * @param {number} code
     */
    function formatMuiErrorMessage(code) {
      // Apply babel-plugin-transform-template-literals in loose mode
      // loose mode is safe iff we're concatenating primitives
      // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

      /* eslint-disable prefer-template */
      var url = 'https://material-ui.com/production-error/?code=' + code;

      for (var i = 1; i < arguments.length; i += 1) {
        // rest params over-transpile for this case
        // eslint-disable-next-line prefer-rest-params
        url += '&args[]=' + encodeURIComponent(arguments[i]);
      }

      return 'Minified Material-UI error #' + code + '; visit ' + url + ' for the full message.';
      /* eslint-enable prefer-template */
    }

    /** @license React v17.0.2
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1=60103,c$1=60106,d$1=60107,e$1=60108,f$1=60114,g$1=60109,h$1=60110,k$1=60112,l$1=60113,m$1=60120,n$1=60115,p$1=60116,q$1=60121,r$1=60122,u$1=60117,v$1=60129,w$1=60131;
    if("function"===typeof Symbol&&Symbol.for){var x$1=Symbol.for;b$1=x$1("react.element");c$1=x$1("react.portal");d$1=x$1("react.fragment");e$1=x$1("react.strict_mode");f$1=x$1("react.profiler");g$1=x$1("react.provider");h$1=x$1("react.context");k$1=x$1("react.forward_ref");l$1=x$1("react.suspense");m$1=x$1("react.suspense_list");n$1=x$1("react.memo");p$1=x$1("react.lazy");q$1=x$1("react.block");r$1=x$1("react.server.block");u$1=x$1("react.fundamental");v$1=x$1("react.debug_trace_mode");w$1=x$1("react.legacy_hidden");}
    function y$1(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b$1:switch(a=a.type,a){case d$1:case f$1:case e$1:case l$1:case m$1:return a;default:switch(a=a&&a.$$typeof,a){case h$1:case k$1:case p$1:case n$1:case g$1:return a;default:return t}}case c$1:return t}}}var z$1=g$1,A$1=b$1,B$1=k$1,C$1=d$1,D$2=p$1,E$1=n$1,F$1=c$1,G$1=f$1,H$1=e$1,I$1=l$1;var ContextConsumer$1=h$1;var ContextProvider$1=z$1;var Element$2=A$1;var ForwardRef$1=B$1;var Fragment$1=C$1;var Lazy$1=D$2;var Memo$1=E$1;var Portal$2=F$1;var Profiler$1=G$1;var StrictMode$1=H$1;
    var Suspense$1=I$1;var isAsyncMode$1=function(){return !1};var isConcurrentMode$1=function(){return !1};var isContextConsumer$1=function(a){return y$1(a)===h$1};var isContextProvider$1=function(a){return y$1(a)===g$1};var isElement$1=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b$1};var isForwardRef$1=function(a){return y$1(a)===k$1};var isFragment$1=function(a){return y$1(a)===d$1};var isLazy$1=function(a){return y$1(a)===p$1};var isMemo$1=function(a){return y$1(a)===n$1};
    var isPortal$1=function(a){return y$1(a)===c$1};var isProfiler$1=function(a){return y$1(a)===f$1};var isStrictMode$1=function(a){return y$1(a)===e$1};var isSuspense$1=function(a){return y$1(a)===l$1};var isValidElementType$1=function(a){return "string"===typeof a||"function"===typeof a||a===d$1||a===f$1||a===v$1||a===e$1||a===l$1||a===m$1||a===w$1||"object"===typeof a&&null!==a&&(a.$$typeof===p$1||a.$$typeof===n$1||a.$$typeof===g$1||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===u$1||a.$$typeof===q$1||a[0]===r$1)?!0:!1};
    var typeOf$1=y$1;

    var reactIs_production_min$1 = {
    	ContextConsumer: ContextConsumer$1,
    	ContextProvider: ContextProvider$1,
    	Element: Element$2,
    	ForwardRef: ForwardRef$1,
    	Fragment: Fragment$1,
    	Lazy: Lazy$1,
    	Memo: Memo$1,
    	Portal: Portal$2,
    	Profiler: Profiler$1,
    	StrictMode: StrictMode$1,
    	Suspense: Suspense$1,
    	isAsyncMode: isAsyncMode$1,
    	isConcurrentMode: isConcurrentMode$1,
    	isContextConsumer: isContextConsumer$1,
    	isContextProvider: isContextProvider$1,
    	isElement: isElement$1,
    	isForwardRef: isForwardRef$1,
    	isFragment: isFragment$1,
    	isLazy: isLazy$1,
    	isMemo: isMemo$1,
    	isPortal: isPortal$1,
    	isProfiler: isProfiler$1,
    	isStrictMode: isStrictMode$1,
    	isSuspense: isSuspense$1,
    	isValidElementType: isValidElementType$1,
    	typeOf: typeOf$1
    };

    /** @license React v17.0.2
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var reactIs_development$1 = createCommonjsModule(function (module, exports) {

    if (process.env.NODE_ENV !== "production") {
      (function() {

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      symbolFor('react.scope');
      symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }

    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

    var enableScopeAPI = false; // Experimental Create Event Handle API.

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
          return true;
        }
      }

      return false;
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
      })();
    }
    });

    var reactIs$1 = createCommonjsModule(function (module) {

    if (process.env.NODE_ENV === 'production') {
      module.exports = reactIs_production_min$1;
    } else {
      module.exports = reactIs_development$1;
    }
    });

    // https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

    var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
    function getFunctionName(fn) {
      var match = "".concat(fn).match(fnNameMatchRegex);
      var name = match && match[1];
      return name || '';
    }
    /**
     * @param {function} Component
     * @param {string} fallback
     * @returns {string | undefined}
     */

    function getFunctionComponentName(Component) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return Component.displayName || Component.name || getFunctionName(Component) || fallback;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
    }
    /**
     * cherry-pick from
     * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
     * originally forked from recompose/getDisplayName with added IE 11 support
     *
     * @param {React.ReactType} Component
     * @returns {string | undefined}
     */


    function getDisplayName(Component) {
      if (Component == null) {
        return undefined;
      }

      if (typeof Component === 'string') {
        return Component;
      }

      if (typeof Component === 'function') {
        return getFunctionComponentName(Component, 'Component');
      }

      if (_typeof$1(Component) === 'object') {
        switch (Component.$$typeof) {
          case reactIs$1.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');

          case reactIs$1.Memo:
            return getWrappedName(Component, Component.type, 'memo');

          default:
            return undefined;
        }
      }

      return undefined;
    }

    function HTMLElementType(props, propName, componentName, location, propFullName) {
      if (process.env.NODE_ENV === 'production') {
        return null;
      }

      var propValue = props[propName];
      var safePropName = propFullName || propName;

      if (propValue == null) {
        return null;
      }

      if (propValue && propValue.nodeType !== 1) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
      }

      return null;
    }

    var refType = propTypes.oneOfType([propTypes.func, propTypes.object]);

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

    /**
     * This is the list of the style rule name we use as drop in replacement for the built-in
     * pseudo classes (:checked, :disabled, :focused, etc.).
     *
     * Why do they exist in the first place?
     * These classes are used at a specificity of 2.
     * It allows them to override previously definied styles as well as
     * being untouched by simple user overrides.
     */

    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.
    // When new generator function is created, rule counter is reset.
    // We need to reset the rule counter for SSR for each request.
    //
    // It's inspired by
    // https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

    function createGenerateClassName() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _options$disableGloba = options.disableGlobal,
          disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,
          _options$productionPr = options.productionPrefix,
          productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,
          _options$seed = options.seed,
          seed = _options$seed === void 0 ? '' : _options$seed;
      var seedPrefix = seed === '' ? '' : "".concat(seed, "-");
      var ruleCounter = 0;

      var getNextCounterId = function getNextCounterId() {
        ruleCounter += 1;

        if (process.env.NODE_ENV !== 'production') {
          if (ruleCounter >= 1e10) {
            console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
          }
        }

        return ruleCounter;
      };

      return function (rule, styleSheet) {
        var name = styleSheet.options.name; // Is a global static MUI style?

        if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {
          // We can use a shorthand class name, we never use the keys to style the components.
          if (pseudoClasses.indexOf(rule.key) !== -1) {
            return "Mui-".concat(rule.key);
          }

          var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);

          if (!styleSheet.options.theme[nested] || seed !== '') {
            return prefix;
          }

          return "".concat(prefix, "-").concat(getNextCounterId());
        }

        if (process.env.NODE_ENV === 'production') {
          return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
        }

        var suffix = "".concat(rule.key, "-").concat(getNextCounterId()); // Help with debuggability.

        if (styleSheet.options.classNamePrefix) {
          return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
        }

        return "".concat(seedPrefix).concat(suffix);
      };
    }

    function createStyles$1(styles) {
      return styles;
    }

    /* eslint-disable no-restricted-syntax */
    function getThemeProps(params) {
      var theme = params.theme,
          name = params.name,
          props = params.props;

      if (!theme || !theme.props || !theme.props[name]) {
        return props;
      } // Resolve default props, code borrow from React source.
      // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


      var defaultProps = theme.props[name];
      var propName;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }

      return props;
    }

    var isProduction = process.env.NODE_ENV === 'production';
    function warning(condition, message) {
      if (!isProduction) {
        if (condition) {
          return;
        }

        var text = "Warning: " + message;

        if (typeof console !== 'undefined') {
          console.warn(text);
        }

        try {
          throw Error(text);
        } catch (x) {}
      }
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var isBrowser$1 = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _setPrototypeOf$1(o, p) {
      _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf$1(o, p);
    }

    function _inheritsLoose$1(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf$1(subClass, superClass);
    }

    function _assertThisInitialized$1(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    var plainObjectConstrurctor = {}.constructor;
    function cloneStyle(style) {
      if (style == null || typeof style !== 'object') return style;
      if (Array.isArray(style)) return style.map(cloneStyle);
      if (style.constructor !== plainObjectConstrurctor) return style;
      var newStyle = {};

      for (var name in style) {
        newStyle[name] = cloneStyle(style[name]);
      }

      return newStyle;
    }

    /**
     * Create a rule instance.
     */

    function createRule(name, decl, options) {
      if (name === void 0) {
        name = 'unnamed';
      }

      var jss = options.jss;
      var declCopy = cloneStyle(decl);
      var rule = jss.plugins.onCreateRule(name, declCopy, options);
      if (rule) return rule; // It is an at-rule and it has no instance.

      if (name[0] === '@') {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown rule " + name) : void 0;
      }

      return null;
    }

    var join = function join(value, by) {
      var result = '';

      for (var i = 0; i < value.length; i++) {
        // Remove !important from the value, it will be readded later.
        if (value[i] === '!important') break;
        if (result) result += by;
        result += value[i];
      }

      return result;
    };

    /**
     * Converts array values to string.
     *
     * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
     * `border: ['1px', '2px']` > `border: 1px, 2px;`
     * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
     * `color: ['red', !important]` > `color: red !important;`
     */
    var toCssValue = function toCssValue(value, ignoreImportant) {
      if (ignoreImportant === void 0) {
        ignoreImportant = false;
      }

      if (!Array.isArray(value)) return value;
      var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.

      if (Array.isArray(value[0])) {
        for (var i = 0; i < value.length; i++) {
          if (value[i] === '!important') break;
          if (cssValue) cssValue += ', ';
          cssValue += join(value[i], ' ');
        }
      } else cssValue = join(value, ', '); // Add !important, because it was ignored.


      if (!ignoreImportant && value[value.length - 1] === '!important') {
        cssValue += ' !important';
      }

      return cssValue;
    };

    /**
     * Indent a string.
     * http://jsperf.com/array-join-vs-for
     */
    function indentStr(str, indent) {
      var result = '';

      for (var index = 0; index < indent; index++) {
        result += '  ';
      }

      return result + str;
    }
    /**
     * Converts a Rule to CSS string.
     */


    function toCss(selector, style, options) {
      if (options === void 0) {
        options = {};
      }

      var result = '';
      if (!style) return result;
      var _options = options,
          _options$indent = _options.indent,
          indent = _options$indent === void 0 ? 0 : _options$indent;
      var fallbacks = style.fallbacks;
      if (selector) indent++; // Apply fallbacks first.

      if (fallbacks) {
        // Array syntax {fallbacks: [{prop: value}]}
        if (Array.isArray(fallbacks)) {
          for (var index = 0; index < fallbacks.length; index++) {
            var fallback = fallbacks[index];

            for (var prop in fallback) {
              var value = fallback[prop];

              if (value != null) {
                if (result) result += '\n';
                result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
              }
            }
          }
        } else {
          // Object syntax {fallbacks: {prop: value}}
          for (var _prop in fallbacks) {
            var _value = fallbacks[_prop];

            if (_value != null) {
              if (result) result += '\n';
              result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
            }
          }
        }
      }

      for (var _prop2 in style) {
        var _value2 = style[_prop2];

        if (_value2 != null && _prop2 !== 'fallbacks') {
          if (result) result += '\n';
          result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
        }
      } // Allow empty style in this case, because properties will be added dynamically.


      if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.

      if (!selector) return result;
      indent--;
      if (result) result = "\n" + result + "\n";
      return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
    }

    var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
    var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
    var escape = (function (str) {
      return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
    });

    var BaseStyleRule =
    /*#__PURE__*/
    function () {
      function BaseStyleRule(key, style, options) {
        this.type = 'style';
        this.key = void 0;
        this.isProcessed = false;
        this.style = void 0;
        this.renderer = void 0;
        this.renderable = void 0;
        this.options = void 0;
        var sheet = options.sheet,
            Renderer = options.Renderer;
        this.key = key;
        this.options = options;
        this.style = style;
        if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
      }
      /**
       * Get or set a style property.
       */


      var _proto = BaseStyleRule.prototype;

      _proto.prop = function prop(name, value, options) {
        // It's a getter.
        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.

        var force = options ? options.force : false;
        if (!force && this.style[name] === value) return this;
        var newValue = value;

        if (!options || options.process !== false) {
          newValue = this.options.jss.plugins.onChangeValue(value, name, this);
        }

        var isEmpty = newValue == null || newValue === false;
        var isDefined = name in this.style; // Value is empty and wasn't defined before.

        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.

        var remove = isEmpty && isDefined;
        if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.

        if (this.renderable && this.renderer) {
          if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
          return this;
        }

        var sheet = this.options.sheet;

        if (sheet && sheet.attached) {
          process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
        }

        return this;
      };

      return BaseStyleRule;
    }();
    var StyleRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose$1(StyleRule, _BaseStyleRule);

      function StyleRule(key, style, options) {
        var _this;

        _this = _BaseStyleRule.call(this, key, style, options) || this;
        _this.selectorText = void 0;
        _this.id = void 0;
        _this.renderable = void 0;
        var selector = options.selector,
            scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;

        if (selector) {
          _this.selectorText = selector;
        } else if (scoped !== false) {
          _this.id = generateId(_assertThisInitialized$1(_assertThisInitialized$1(_this)), sheet);
          _this.selectorText = "." + escape(_this.id);
        }

        return _this;
      }
      /**
       * Set selector string.
       * Attention: use this with caution. Most browsers didn't implement
       * selectorText setter, so this may result in rerendering of entire Style Sheet.
       */


      var _proto2 = StyleRule.prototype;

      /**
       * Apply rule to an element inline.
       */
      _proto2.applyTo = function applyTo(renderable) {
        var renderer = this.renderer;

        if (renderer) {
          var json = this.toJSON();

          for (var prop in json) {
            renderer.setProperty(renderable, prop, json[prop]);
          }
        }

        return this;
      }
      /**
       * Returns JSON representation of the rule.
       * Fallbacks are not supported.
       * Useful for inline styles.
       */
      ;

      _proto2.toJSON = function toJSON() {
        var json = {};

        for (var prop in this.style) {
          var value = this.style[prop];
          if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
        }

        return json;
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto2.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends$3({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.selectorText, this.style, opts);
      };

      _createClass(StyleRule, [{
        key: "selector",
        set: function set(selector) {
          if (selector === this.selectorText) return;
          this.selectorText = selector;
          var renderer = this.renderer,
              renderable = this.renderable;
          if (!renderable || !renderer) return;
          var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.

          if (!hasChanged) {
            renderer.replaceRule(renderable, this);
          }
        }
        /**
         * Get selector string.
         */
        ,
        get: function get() {
          return this.selectorText;
        }
      }]);

      return StyleRule;
    }(BaseStyleRule);
    var pluginStyleRule = {
      onCreateRule: function onCreateRule(name, style, options) {
        if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') {
          return null;
        }

        return new StyleRule(name, style, options);
      }
    };

    var defaultToStringOptions = {
      indent: 1,
      children: true
    };
    var atRegExp = /@([\w-]+)/;
    /**
     * Conditional rule for @media, @supports
     */

    var ConditionalRule =
    /*#__PURE__*/
    function () {
      function ConditionalRule(key, styles, options) {
        this.type = 'conditional';
        this.at = void 0;
        this.key = void 0;
        this.query = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        var atMatch = key.match(atRegExp);
        this.at = atMatch ? atMatch[1] : 'unknown'; // Key might contain a unique suffix in case the `name` passed by user was duplicate.

        this.query = options.name || "@" + this.at;
        this.options = options;
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }

        this.rules.process();
      }
      /**
       * Get a rule.
       */


      var _proto = ConditionalRule.prototype;

      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;

      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions;
        }

        if (options.indent == null) options.indent = defaultToStringOptions.indent;
        if (options.children == null) options.children = defaultToStringOptions.children;

        if (options.children === false) {
          return this.query + " {}";
        }

        var children = this.rules.toString(options);
        return children ? this.query + " {\n" + children + "\n}" : '';
      };

      return ConditionalRule;
    }();
    var keyRegExp = /@media|@supports\s+/;
    var pluginConditionalRule = {
      onCreateRule: function onCreateRule(key, styles, options) {
        return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
      }
    };

    var defaultToStringOptions$1 = {
      indent: 1,
      children: true
    };
    var nameRegExp = /@keyframes\s+([\w-]+)/;
    /**
     * Rule for @keyframes
     */

    var KeyframesRule =
    /*#__PURE__*/
    function () {
      function KeyframesRule(key, frames, options) {
        this.type = 'keyframes';
        this.at = '@keyframes';
        this.key = void 0;
        this.name = void 0;
        this.id = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        var nameMatch = key.match(nameRegExp);

        if (nameMatch && nameMatch[1]) {
          this.name = nameMatch[1];
        } else {
          this.name = 'noname';
          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Bad keyframes name " + key) : void 0;
        }

        this.key = this.type + "-" + this.name;
        this.options = options;
        var scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;
        this.id = scoped === false ? this.name : escape(generateId(this, sheet));
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var name in frames) {
          this.rules.add(name, frames[name], _extends$3({}, options, {
            parent: this
          }));
        }

        this.rules.process();
      }
      /**
       * Generates a CSS string.
       */


      var _proto = KeyframesRule.prototype;

      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions$1;
        }

        if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
        if (options.children == null) options.children = defaultToStringOptions$1.children;

        if (options.children === false) {
          return this.at + " " + this.id + " {}";
        }

        var children = this.rules.toString(options);
        if (children) children = "\n" + children + "\n";
        return this.at + " " + this.id + " {" + children + "}";
      };

      return KeyframesRule;
    }();
    var keyRegExp$1 = /@keyframes\s+/;
    var refRegExp$1 = /\$([\w-]+)/g;

    var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
      if (typeof val === 'string') {
        return val.replace(refRegExp$1, function (match, name) {
          if (name in keyframes) {
            return keyframes[name];
          }

          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.") : void 0;
          return match;
        });
      }

      return val;
    };
    /**
     * Replace the reference for a animation name.
     */


    var replaceRef = function replaceRef(style, prop, keyframes) {
      var value = style[prop];
      var refKeyframe = findReferencedKeyframe(value, keyframes);

      if (refKeyframe !== value) {
        style[prop] = refKeyframe;
      }
    };

    var plugin$1 = {
      onCreateRule: function onCreateRule(key, frames, options) {
        return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
      },
      // Animation name ref replacer.
      onProcessStyle: function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style' || !sheet) return style;
        if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
        if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
        return style;
      },
      onChangeValue: function onChangeValue(val, prop, rule) {
        var sheet = rule.options.sheet;

        if (!sheet) {
          return val;
        }

        switch (prop) {
          case 'animation':
            return findReferencedKeyframe(val, sheet.keyframes);

          case 'animation-name':
            return findReferencedKeyframe(val, sheet.keyframes);

          default:
            return val;
        }
      }
    };

    var KeyframeRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose$1(KeyframeRule, _BaseStyleRule);

      function KeyframeRule() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
        _this.renderable = void 0;
        return _this;
      }

      var _proto = KeyframeRule.prototype;

      /**
       * Generates a CSS string.
       */
      _proto.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends$3({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.key, this.style, opts);
      };

      return KeyframeRule;
    }(BaseStyleRule);
    var pluginKeyframeRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        if (options.parent && options.parent.type === 'keyframes') {
          return new KeyframeRule(key, style, options);
        }

        return null;
      }
    };

    var FontFaceRule =
    /*#__PURE__*/
    function () {
      function FontFaceRule(key, style, options) {
        this.type = 'font-face';
        this.at = '@font-face';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */


      var _proto = FontFaceRule.prototype;

      _proto.toString = function toString(options) {
        if (Array.isArray(this.style)) {
          var str = '';

          for (var index = 0; index < this.style.length; index++) {
            str += toCss(this.at, this.style[index]);
            if (this.style[index + 1]) str += '\n';
          }

          return str;
        }

        return toCss(this.at, this.style, options);
      };

      return FontFaceRule;
    }();
    var keyRegExp$2 = /@font-face/;
    var pluginFontFaceRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
      }
    };

    var ViewportRule =
    /*#__PURE__*/
    function () {
      function ViewportRule(key, style, options) {
        this.type = 'viewport';
        this.at = '@viewport';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */


      var _proto = ViewportRule.prototype;

      _proto.toString = function toString(options) {
        return toCss(this.key, this.style, options);
      };

      return ViewportRule;
    }();
    var pluginViewportRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
      }
    };

    var SimpleRule =
    /*#__PURE__*/
    function () {
      function SimpleRule(key, value, options) {
        this.type = 'simple';
        this.key = void 0;
        this.value = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.value = value;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */
      // eslint-disable-next-line no-unused-vars


      var _proto = SimpleRule.prototype;

      _proto.toString = function toString(options) {
        if (Array.isArray(this.value)) {
          var str = '';

          for (var index = 0; index < this.value.length; index++) {
            str += this.key + " " + this.value[index] + ";";
            if (this.value[index + 1]) str += '\n';
          }

          return str;
        }

        return this.key + " " + this.value + ";";
      };

      return SimpleRule;
    }();
    var keysMap = {
      '@charset': true,
      '@import': true,
      '@namespace': true
    };
    var pluginSimpleRule = {
      onCreateRule: function onCreateRule(key, value, options) {
        return key in keysMap ? new SimpleRule(key, value, options) : null;
      }
    };

    var plugins$1 = [pluginStyleRule, pluginConditionalRule, plugin$1, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];

    var defaultUpdateOptions = {
      process: true
    };
    var forceUpdateOptions = {
      force: true,
      process: true
      /**
       * Contains rules objects and allows adding/removing etc.
       * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
       */

    };

    var RuleList =
    /*#__PURE__*/
    function () {
      // Rules registry for access by .get() method.
      // It contains the same rule registered by name and by selector.
      // Original styles object.
      // Used to ensure correct rules order.
      function RuleList(options) {
        this.map = {};
        this.raw = {};
        this.index = [];
        this.counter = 0;
        this.options = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.options = options;
        this.classes = options.classes;
        this.keyframes = options.keyframes;
      }
      /**
       * Create and register rule.
       *
       * Will not render after Style Sheet was rendered the first time.
       */


      var _proto = RuleList.prototype;

      _proto.add = function add(name, decl, ruleOptions) {
        var _this$options = this.options,
            parent = _this$options.parent,
            sheet = _this$options.sheet,
            jss = _this$options.jss,
            Renderer = _this$options.Renderer,
            generateId = _this$options.generateId,
            scoped = _this$options.scoped;

        var options = _extends$3({
          classes: this.classes,
          parent: parent,
          sheet: sheet,
          jss: jss,
          Renderer: Renderer,
          generateId: generateId,
          scoped: scoped,
          name: name,
          keyframes: this.keyframes,
          selector: undefined
        }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
        // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
        // we need to make the key unique within this RuleList instance scope.


        var key = name;

        if (name in this.raw) {
          key = name + "-d" + this.counter++;
        } // We need to save the original decl before creating the rule
        // because cache plugin needs to use it as a key to return a cached rule.


        this.raw[key] = decl;

        if (key in this.classes) {
          // E.g. rules inside of @media container
          options.selector = "." + escape(this.classes[key]);
        }

        var rule = createRule(key, decl, options);
        if (!rule) return null;
        this.register(rule);
        var index = options.index === undefined ? this.index.length : options.index;
        this.index.splice(index, 0, rule);
        return rule;
      }
      /**
       * Get a rule.
       */
      ;

      _proto.get = function get(name) {
        return this.map[name];
      }
      /**
       * Delete a rule.
       */
      ;

      _proto.remove = function remove(rule) {
        this.unregister(rule);
        delete this.raw[rule.key];
        this.index.splice(this.index.indexOf(rule), 1);
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.index.indexOf(rule);
      }
      /**
       * Run `onProcessRule()` plugins on every rule.
       */
      ;

      _proto.process = function process() {
        var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
        // we end up with very hard-to-track-down side effects.

        this.index.slice(0).forEach(plugins.onProcessRule, plugins);
      }
      /**
       * Register a rule in `.map`, `.classes` and `.keyframes` maps.
       */
      ;

      _proto.register = function register(rule) {
        this.map[rule.key] = rule;

        if (rule instanceof StyleRule) {
          this.map[rule.selector] = rule;
          if (rule.id) this.classes[rule.key] = rule.id;
        } else if (rule instanceof KeyframesRule && this.keyframes) {
          this.keyframes[rule.name] = rule.id;
        }
      }
      /**
       * Unregister a rule.
       */
      ;

      _proto.unregister = function unregister(rule) {
        delete this.map[rule.key];

        if (rule instanceof StyleRule) {
          delete this.map[rule.selector];
          delete this.classes[rule.key];
        } else if (rule instanceof KeyframesRule) {
          delete this.keyframes[rule.name];
        }
      }
      /**
       * Update the function values with a new data.
       */
      ;

      _proto.update = function update() {
        var name;
        var data;
        var options;

        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
          name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe[invalid-tuple-index]

          data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe[invalid-tuple-index]

          options = arguments.length <= 2 ? undefined : arguments[2];
        } else {
          data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe[invalid-tuple-index]

          options = arguments.length <= 1 ? undefined : arguments[1];
          name = null;
        }

        if (name) {
          this.updateOne(this.map[name], data, options);
        } else {
          for (var index = 0; index < this.index.length; index++) {
            this.updateOne(this.index[index], data, options);
          }
        }
      }
      /**
       * Execute plugins, update rule props.
       */
      ;

      _proto.updateOne = function updateOne(rule, data, options) {
        if (options === void 0) {
          options = defaultUpdateOptions;
        }

        var _this$options2 = this.options,
            plugins = _this$options2.jss.plugins,
            sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.

        if (rule.rules instanceof RuleList) {
          rule.rules.update(data, options);
          return;
        }

        var styleRule = rule;
        var style = styleRule.style;
        plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.

        if (options.process && style && style !== styleRule.style) {
          // We need to run the plugins in case new `style` relies on syntax plugins.
          plugins.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.

          for (var prop in styleRule.style) {
            var nextValue = styleRule.style[prop];
            var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

            if (nextValue !== prevValue) {
              styleRule.prop(prop, nextValue, forceUpdateOptions);
            }
          } // Remove props.


          for (var _prop in style) {
            var _nextValue = styleRule.style[_prop];
            var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

            if (_nextValue == null && _nextValue !== _prevValue) {
              styleRule.prop(_prop, null, forceUpdateOptions);
            }
          }
        }
      }
      /**
       * Convert rules to a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        var str = '';
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;

        for (var index = 0; index < this.index.length; index++) {
          var rule = this.index[index];
          var css = rule.toString(options); // No need to render an empty rule.

          if (!css && !link) continue;
          if (str) str += '\n';
          str += css;
        }

        return str;
      };

      return RuleList;
    }();

    var StyleSheet =
    /*#__PURE__*/
    function () {
      function StyleSheet(styles, options) {
        this.options = void 0;
        this.deployed = void 0;
        this.attached = void 0;
        this.rules = void 0;
        this.renderer = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.queue = void 0;
        this.attached = false;
        this.deployed = false;
        this.classes = {};
        this.keyframes = {};
        this.options = _extends$3({}, options, {
          sheet: this,
          parent: this,
          classes: this.classes,
          keyframes: this.keyframes
        });

        if (options.Renderer) {
          this.renderer = new options.Renderer(this);
        }

        this.rules = new RuleList(this.options);

        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }

        this.rules.process();
      }
      /**
       * Attach renderable to the render tree.
       */


      var _proto = StyleSheet.prototype;

      _proto.attach = function attach() {
        if (this.attached) return this;
        if (this.renderer) this.renderer.attach();
        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.

        if (!this.deployed) this.deploy();
        return this;
      }
      /**
       * Remove renderable from render tree.
       */
      ;

      _proto.detach = function detach() {
        if (!this.attached) return this;
        if (this.renderer) this.renderer.detach();
        this.attached = false;
        return this;
      }
      /**
       * Add a rule to the current stylesheet.
       * Will insert a rule also after the stylesheet has been rendered first time.
       */
      ;

      _proto.addRule = function addRule(name, decl, options) {
        var queue = this.queue; // Plugins can create rules.
        // In order to preserve the right order, we need to queue all `.addRule` calls,
        // which happen after the first `rules.add()` call.

        if (this.attached && !queue) this.queue = [];
        var rule = this.rules.add(name, decl, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);

        if (this.attached) {
          if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
          // It will be inserted all together when .attach is called.

          if (queue) queue.push(rule);else {
            this.insertRule(rule);

            if (this.queue) {
              this.queue.forEach(this.insertRule, this);
              this.queue = undefined;
            }
          }
          return rule;
        } // We can't add rules to a detached style node.
        // We will redeploy the sheet once user will attach it.


        this.deployed = false;
        return rule;
      }
      /**
       * Insert rule into the StyleSheet
       */
      ;

      _proto.insertRule = function insertRule(rule) {
        if (this.renderer) {
          this.renderer.insertRule(rule);
        }
      }
      /**
       * Create and add rules.
       * Will render also after Style Sheet was rendered the first time.
       */
      ;

      _proto.addRules = function addRules(styles, options) {
        var added = [];

        for (var name in styles) {
          var rule = this.addRule(name, styles[name], options);
          if (rule) added.push(rule);
        }

        return added;
      }
      /**
       * Get a rule by name.
       */
      ;

      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Delete a rule by name.
       * Returns `true`: if rule has been deleted from the DOM.
       */
      ;

      _proto.deleteRule = function deleteRule(name) {
        var rule = typeof name === 'object' ? name : this.rules.get(name);

        if (!rule || // Style sheet was created without link: true and attached, in this case we
        // won't be able to remove the CSS rule from the DOM.
        this.attached && !rule.renderable) {
          return false;
        }

        this.rules.remove(rule);

        if (this.attached && rule.renderable && this.renderer) {
          return this.renderer.deleteRule(rule.renderable);
        }

        return true;
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Deploy pure CSS string to a renderable.
       */
      ;

      _proto.deploy = function deploy() {
        if (this.renderer) this.renderer.deploy();
        this.deployed = true;
        return this;
      }
      /**
       * Update the function values with a new data.
       */
      ;

      _proto.update = function update() {
        var _this$rules;

        (_this$rules = this.rules).update.apply(_this$rules, arguments);

        return this;
      }
      /**
       * Updates a single rule.
       */
      ;

      _proto.updateOne = function updateOne(rule, data, options) {
        this.rules.updateOne(rule, data, options);
        return this;
      }
      /**
       * Convert rules to a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        return this.rules.toString(options);
      };

      return StyleSheet;
    }();

    var PluginsRegistry =
    /*#__PURE__*/
    function () {
      function PluginsRegistry() {
        this.plugins = {
          internal: [],
          external: []
        };
        this.registry = void 0;
      }

      var _proto = PluginsRegistry.prototype;

      /**
       * Call `onCreateRule` hooks and return an object if returned by a hook.
       */
      _proto.onCreateRule = function onCreateRule(name, decl, options) {
        for (var i = 0; i < this.registry.onCreateRule.length; i++) {
          var rule = this.registry.onCreateRule[i](name, decl, options);
          if (rule) return rule;
        }

        return null;
      }
      /**
       * Call `onProcessRule` hooks.
       */
      ;

      _proto.onProcessRule = function onProcessRule(rule) {
        if (rule.isProcessed) return;
        var sheet = rule.options.sheet;

        for (var i = 0; i < this.registry.onProcessRule.length; i++) {
          this.registry.onProcessRule[i](rule, sheet);
        }

        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
        rule.isProcessed = true;
      }
      /**
       * Call `onProcessStyle` hooks.
       */
      ;

      _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
        for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
          // $FlowFixMe[prop-missing]
          rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
        }
      }
      /**
       * Call `onProcessSheet` hooks.
       */
      ;

      _proto.onProcessSheet = function onProcessSheet(sheet) {
        for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
          this.registry.onProcessSheet[i](sheet);
        }
      }
      /**
       * Call `onUpdate` hooks.
       */
      ;

      _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
        for (var i = 0; i < this.registry.onUpdate.length; i++) {
          this.registry.onUpdate[i](data, rule, sheet, options);
        }
      }
      /**
       * Call `onChangeValue` hooks.
       */
      ;

      _proto.onChangeValue = function onChangeValue(value, prop, rule) {
        var processedValue = value;

        for (var i = 0; i < this.registry.onChangeValue.length; i++) {
          processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
        }

        return processedValue;
      }
      /**
       * Register a plugin.
       */
      ;

      _proto.use = function use(newPlugin, options) {
        if (options === void 0) {
          options = {
            queue: 'external'
          };
        }

        var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.

        if (plugins.indexOf(newPlugin) !== -1) {
          return;
        }

        plugins.push(newPlugin);
        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
          for (var name in plugin) {
            if (name in registry) {
              registry[name].push(plugin[name]);
            } else {
              process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown hook \"" + name + "\".") : void 0;
            }
          }

          return registry;
        }, {
          onCreateRule: [],
          onProcessRule: [],
          onProcessStyle: [],
          onProcessSheet: [],
          onChangeValue: [],
          onUpdate: []
        });
      };

      return PluginsRegistry;
    }();

    /**
     * Sheets registry to access them all at one place.
     */
    var SheetsRegistry =
    /*#__PURE__*/
    function () {
      function SheetsRegistry() {
        this.registry = [];
      }

      var _proto = SheetsRegistry.prototype;

      /**
       * Register a Style Sheet.
       */
      _proto.add = function add(sheet) {
        var registry = this.registry;
        var index = sheet.options.index;
        if (registry.indexOf(sheet) !== -1) return;

        if (registry.length === 0 || index >= this.index) {
          registry.push(sheet);
          return;
        } // Find a position.


        for (var i = 0; i < registry.length; i++) {
          if (registry[i].options.index > index) {
            registry.splice(i, 0, sheet);
            return;
          }
        }
      }
      /**
       * Reset the registry.
       */
      ;

      _proto.reset = function reset() {
        this.registry = [];
      }
      /**
       * Remove a Style Sheet.
       */
      ;

      _proto.remove = function remove(sheet) {
        var index = this.registry.indexOf(sheet);
        this.registry.splice(index, 1);
      }
      /**
       * Convert all attached sheets to a CSS string.
       */
      ;

      _proto.toString = function toString(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            attached = _ref.attached,
            options = _objectWithoutPropertiesLoose(_ref, ["attached"]);

        var css = '';

        for (var i = 0; i < this.registry.length; i++) {
          var sheet = this.registry[i];

          if (attached != null && sheet.attached !== attached) {
            continue;
          }

          if (css) css += '\n';
          css += sheet.toString(options);
        }

        return css;
      };

      _createClass(SheetsRegistry, [{
        key: "index",

        /**
         * Current highest index number.
         */
        get: function get() {
          return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
        }
      }]);

      return SheetsRegistry;
    }();

    /**
     * This is a global sheets registry. Only DomRenderer will add sheets to it.
     * On the server one should use an own SheetsRegistry instance and add the
     * sheets to it, because you need to make sure to create a new registry for
     * each request in order to not leak sheets across requests.
     */

    var registry = new SheetsRegistry();

    /* eslint-disable */

    /**
     * Now that `globalThis` is available on most platforms
     * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility)
     * we check for `globalThis` first. `globalThis` is necessary for jss
     * to run in Agoric's secure version of JavaScript (SES). Under SES,
     * `globalThis` exists, but `window`, `self`, and `Function('return
     * this')()` are all undefined for security reasons.
     *
     * https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
     */
    var globalThis$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' && window.Math === Math ? window : typeof self !== 'undefined' && self.Math === Math ? self : Function('return this')();

    var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
    if (globalThis$1[ns] == null) globalThis$1[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
    // the current version with just one short number and use it for classes generation
    // we use a counter. Also it is more accurate, because user can manually reevaluate
    // the module.

    var moduleId = globalThis$1[ns]++;

    var maxRules = 1e10;

    /**
     * Returns a function which generates unique class names based on counters.
     * When new generator function is created, rule counter is reseted.
     * We need to reset the rule counter for SSR for each request.
     */
    var createGenerateId = function createGenerateId(options) {
      if (options === void 0) {
        options = {};
      }

      var ruleCounter = 0;
      return function (rule, sheet) {
        ruleCounter += 1;

        if (ruleCounter > maxRules) {
          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
        }

        var jssId = '';
        var prefix = '';

        if (sheet) {
          if (sheet.options.classNamePrefix) {
            prefix = sheet.options.classNamePrefix;
          }

          if (sheet.options.jss.id != null) {
            jssId = String(sheet.options.jss.id);
          }
        }

        if (options.minify) {
          // Using "c" because a number can't be the first char in a class name.
          return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
        }

        return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
      };
    };

    /**
     * Cache the value from the first time a function is called.
     */
    var memoize = function memoize(fn) {
      var value;
      return function () {
        if (!value) value = fn();
        return value;
      };
    };

    /**
     * Get a style property value.
     */
    var getPropertyValue = function getPropertyValue(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          return cssRule.attributeStyleMap.get(prop);
        }

        return cssRule.style.getPropertyValue(prop);
      } catch (err) {
        // IE may throw if property is unknown.
        return '';
      }
    };

    /**
     * Set a style property.
     */
    var setProperty = function setProperty(cssRule, prop, value) {
      try {
        var cssValue = value;

        if (Array.isArray(value)) {
          cssValue = toCssValue(value, true);

          if (value[value.length - 1] === '!important') {
            cssRule.style.setProperty(prop, cssValue, 'important');
            return true;
          }
        } // Support CSSTOM.


        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.set(prop, cssValue);
        } else {
          cssRule.style.setProperty(prop, cssValue);
        }
      } catch (err) {
        // IE may throw if property is unknown.
        return false;
      }

      return true;
    };

    /**
     * Remove a style property.
     */
    var removeProperty = function removeProperty(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.delete(prop);
        } else {
          cssRule.style.removeProperty(prop);
        }
      } catch (err) {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".") : void 0;
      }
    };

    /**
     * Set the selector.
     */
    var setSelector = function setSelector(cssRule, selectorText) {
      cssRule.selectorText = selectorText; // Return false if setter was not successful.
      // Currently works in chrome only.

      return cssRule.selectorText === selectorText;
    };
    /**
     * Gets the `head` element upon the first call and caches it.
     * We assume it can't be null.
     */


    var getHead = memoize(function () {
      return document.querySelector('head');
    });
    /**
     * Find attached sheet with an index higher than the passed one.
     */

    function findHigherSheet(registry, options) {
      for (var i = 0; i < registry.length; i++) {
        var sheet = registry[i];

        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }

      return null;
    }
    /**
     * Find attached sheet with the highest index.
     */


    function findHighestSheet(registry, options) {
      for (var i = registry.length - 1; i >= 0; i--) {
        var sheet = registry[i];

        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }

      return null;
    }
    /**
     * Find a comment with "jss" inside.
     */


    function findCommentNode(text) {
      var head = getHead();

      for (var i = 0; i < head.childNodes.length; i++) {
        var node = head.childNodes[i];

        if (node.nodeType === 8 && node.nodeValue.trim() === text) {
          return node;
        }
      }

      return null;
    }

    /**
     * Find a node before which we can insert the sheet.
     */
    function findPrevNode(options) {
      var registry$1 = registry.registry;

      if (registry$1.length > 0) {
        // Try to insert before the next higher sheet.
        var sheet = findHigherSheet(registry$1, options);

        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element
          };
        } // Otherwise insert after the last attached.


        sheet = findHighestSheet(registry$1, options);

        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element.nextSibling
          };
        }
      } // Try to find a comment placeholder if registry is empty.


      var insertionPoint = options.insertionPoint;

      if (insertionPoint && typeof insertionPoint === 'string') {
        var comment = findCommentNode(insertionPoint);

        if (comment) {
          return {
            parent: comment.parentNode,
            node: comment.nextSibling
          };
        } // If user specifies an insertion point and it can't be found in the document -
        // bad specificity issues may appear.


        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.") : void 0;
      }

      return false;
    }
    /**
     * Insert style element into the DOM.
     */


    function insertStyle(style, options) {
      var insertionPoint = options.insertionPoint;
      var nextNode = findPrevNode(options);

      if (nextNode !== false && nextNode.parent) {
        nextNode.parent.insertBefore(style, nextNode.node);
        return;
      } // Works with iframes and any node types.


      if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
        // https://stackoverflow.com/questions/41328728/force-casting-in-flow
        var insertionPointElement = insertionPoint;
        var parentNode = insertionPointElement.parentNode;
        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Insertion point is not in the DOM.') : void 0;
        return;
      }

      getHead().appendChild(style);
    }
    /**
     * Read jss nonce setting from the page if the user has set it.
     */


    var getNonce = memoize(function () {
      var node = document.querySelector('meta[property="csp-nonce"]');
      return node ? node.getAttribute('content') : null;
    });

    var _insertRule = function insertRule(container, rule, index) {
      try {
        if ('insertRule' in container) {
          var c = container;
          c.insertRule(rule, index);
        } // Keyframes rule.
        else if ('appendRule' in container) {
            var _c = container;

            _c.appendRule(rule);
          }
      } catch (err) {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] " + err.message) : void 0;
        return false;
      }

      return container.cssRules[index];
    };

    var getValidRuleInsertionIndex = function getValidRuleInsertionIndex(container, index) {
      var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong

      if (index === undefined || index > maxIndex) {
        // eslint-disable-next-line no-param-reassign
        return maxIndex;
      }

      return index;
    };

    var createStyle = function createStyle() {
      var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
      // insert rules after we insert the style tag.
      // It seems to kick-off the source order specificity algorithm.

      el.textContent = '\n';
      return el;
    };

    var DomRenderer =
    /*#__PURE__*/
    function () {
      // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
      // Will be empty if link: true option is not set, because
      // it is only for use together with insertRule API.
      function DomRenderer(sheet) {
        this.getPropertyValue = getPropertyValue;
        this.setProperty = setProperty;
        this.removeProperty = removeProperty;
        this.setSelector = setSelector;
        this.element = void 0;
        this.sheet = void 0;
        this.hasInsertedRules = false;
        this.cssRules = [];
        // There is no sheet when the renderer is used from a standalone StyleRule.
        if (sheet) registry.add(sheet);
        this.sheet = sheet;

        var _ref = this.sheet ? this.sheet.options : {},
            media = _ref.media,
            meta = _ref.meta,
            element = _ref.element;

        this.element = element || createStyle();
        this.element.setAttribute('data-jss', '');
        if (media) this.element.setAttribute('media', media);
        if (meta) this.element.setAttribute('data-meta', meta);
        var nonce = getNonce();
        if (nonce) this.element.setAttribute('nonce', nonce);
      }
      /**
       * Insert style element into render tree.
       */


      var _proto = DomRenderer.prototype;

      _proto.attach = function attach() {
        // In the case the element node is external and it is already in the DOM.
        if (this.element.parentNode || !this.sheet) return;
        insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
        // most browsers create a new CSSStyleSheet, except of all IEs.

        var deployed = Boolean(this.sheet && this.sheet.deployed);

        if (this.hasInsertedRules && deployed) {
          this.hasInsertedRules = false;
          this.deploy();
        }
      }
      /**
       * Remove style element from render tree.
       */
      ;

      _proto.detach = function detach() {
        if (!this.sheet) return;
        var parentNode = this.element.parentNode;
        if (parentNode) parentNode.removeChild(this.element); // In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.
        // Though IE will keep them and we need a consistent behavior.

        if (this.sheet.options.link) {
          this.cssRules = [];
          this.element.textContent = '\n';
        }
      }
      /**
       * Inject CSS string into element.
       */
      ;

      _proto.deploy = function deploy() {
        var sheet = this.sheet;
        if (!sheet) return;

        if (sheet.options.link) {
          this.insertRules(sheet.rules);
          return;
        }

        this.element.textContent = "\n" + sheet.toString() + "\n";
      }
      /**
       * Insert RuleList into an element.
       */
      ;

      _proto.insertRules = function insertRules(rules, nativeParent) {
        for (var i = 0; i < rules.index.length; i++) {
          this.insertRule(rules.index[i], i, nativeParent);
        }
      }
      /**
       * Insert a rule into element.
       */
      ;

      _proto.insertRule = function insertRule(rule, index, nativeParent) {
        if (nativeParent === void 0) {
          nativeParent = this.element.sheet;
        }

        if (rule.rules) {
          var parent = rule;
          var latestNativeParent = nativeParent;

          if (rule.type === 'conditional' || rule.type === 'keyframes') {
            var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index); // We need to render the container without children first.


            latestNativeParent = _insertRule(nativeParent, parent.toString({
              children: false
            }), _insertionIndex);

            if (latestNativeParent === false) {
              return false;
            }

            this.refCssRule(rule, _insertionIndex, latestNativeParent);
          }

          this.insertRules(parent.rules, latestNativeParent);
          return latestNativeParent;
        }

        var ruleStr = rule.toString();
        if (!ruleStr) return false;
        var insertionIndex = getValidRuleInsertionIndex(nativeParent, index);

        var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);

        if (nativeRule === false) {
          return false;
        }

        this.hasInsertedRules = true;
        this.refCssRule(rule, insertionIndex, nativeRule);
        return nativeRule;
      };

      _proto.refCssRule = function refCssRule(rule, index, cssRule) {
        rule.renderable = cssRule; // We only want to reference the top level rules, deleteRule API doesn't support removing nested rules
        // like rules inside media queries or keyframes

        if (rule.options.parent instanceof StyleSheet) {
          this.cssRules[index] = cssRule;
        }
      }
      /**
       * Delete a rule.
       */
      ;

      _proto.deleteRule = function deleteRule(cssRule) {
        var sheet = this.element.sheet;
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return true;
      }
      /**
       * Get index of a CSS Rule.
       */
      ;

      _proto.indexOf = function indexOf(cssRule) {
        return this.cssRules.indexOf(cssRule);
      }
      /**
       * Generate a new CSS rule and replace the existing one.
       *
       * Only used for some old browsers because they can't set a selector.
       */
      ;

      _proto.replaceRule = function replaceRule(cssRule, rule) {
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        this.element.sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return this.insertRule(rule, index);
      }
      /**
       * Get all rules elements.
       */
      ;

      _proto.getRules = function getRules() {
        return this.element.sheet.cssRules;
      };

      return DomRenderer;
    }();

    var instanceCounter = 0;

    var Jss =
    /*#__PURE__*/
    function () {
      function Jss(options) {
        this.id = instanceCounter++;
        this.version = "10.6.0";
        this.plugins = new PluginsRegistry();
        this.options = {
          id: {
            minify: false
          },
          createGenerateId: createGenerateId,
          Renderer: isBrowser$1 ? DomRenderer : null,
          plugins: []
        };
        this.generateId = createGenerateId({
          minify: false
        });

        for (var i = 0; i < plugins$1.length; i++) {
          this.plugins.use(plugins$1[i], {
            queue: 'internal'
          });
        }

        this.setup(options);
      }
      /**
       * Prepares various options, applies plugins.
       * Should not be used twice on the same instance, because there is no plugins
       * deduplication logic.
       */


      var _proto = Jss.prototype;

      _proto.setup = function setup(options) {
        if (options === void 0) {
          options = {};
        }

        if (options.createGenerateId) {
          this.options.createGenerateId = options.createGenerateId;
        }

        if (options.id) {
          this.options.id = _extends$3({}, this.options.id, options.id);
        }

        if (options.createGenerateId || options.id) {
          this.generateId = this.options.createGenerateId(this.options.id);
        }

        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;

        if ('Renderer' in options) {
          this.options.Renderer = options.Renderer;
        } // eslint-disable-next-line prefer-spread


        if (options.plugins) this.use.apply(this, options.plugins);
        return this;
      }
      /**
       * Create a Style Sheet.
       */
      ;

      _proto.createStyleSheet = function createStyleSheet(styles, options) {
        if (options === void 0) {
          options = {};
        }

        var _options = options,
            index = _options.index;

        if (typeof index !== 'number') {
          index = registry.index === 0 ? 0 : registry.index + 1;
        }

        var sheet = new StyleSheet(styles, _extends$3({}, options, {
          jss: this,
          generateId: options.generateId || this.generateId,
          insertionPoint: this.options.insertionPoint,
          Renderer: this.options.Renderer,
          index: index
        }));
        this.plugins.onProcessSheet(sheet);
        return sheet;
      }
      /**
       * Detach the Style Sheet and remove it from the registry.
       */
      ;

      _proto.removeStyleSheet = function removeStyleSheet(sheet) {
        sheet.detach();
        registry.remove(sheet);
        return this;
      }
      /**
       * Create a rule without a Style Sheet.
       * [Deprecated] will be removed in the next major version.
       */
      ;

      _proto.createRule = function createRule$1(name, style, options) {
        if (style === void 0) {
          style = {};
        }

        if (options === void 0) {
          options = {};
        }

        // Enable rule without name for inline styles.
        if (typeof name === 'object') {
          // $FlowFixMe[incompatible-call]
          return this.createRule(undefined, name, style);
        } // $FlowFixMe[incompatible-type]


        var ruleOptions = _extends$3({}, options, {
          name: name,
          jss: this,
          Renderer: this.options.Renderer
        });

        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
        if (!ruleOptions.classes) ruleOptions.classes = {};
        if (!ruleOptions.keyframes) ruleOptions.keyframes = {};

        var rule = createRule(name, style, ruleOptions);

        if (rule) this.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Register plugin. Passed function will be invoked with a rule instance.
       */
      ;

      _proto.use = function use() {
        var _this = this;

        for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
          plugins[_key] = arguments[_key];
        }

        plugins.forEach(function (plugin) {
          _this.plugins.use(plugin);
        });
        return this;
      };

      return Jss;
    }();

    /**
     * Extracts a styles object with only props that contain function values.
     */
    function getDynamicStyles(styles) {
      var to = null;

      for (var key in styles) {
        var value = styles[key];
        var type = typeof value;

        if (type === 'function') {
          if (!to) to = {};
          to[key] = value;
        } else if (type === 'object' && value !== null && !Array.isArray(value)) {
          var extracted = getDynamicStyles(value);

          if (extracted) {
            if (!to) to = {};
            to[key] = extracted;
          }
        }
      }

      return to;
    }

    /**
     * A better abstraction over CSS.
     *
     * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
     * @website https://github.com/cssinjs/jss
     * @license MIT
     */

    /**
     * Export a constant indicating if this browser has CSSTOM support.
     * https://developers.google.com/web/updates/2018/03/cssom
     */
    var hasCSSTOMSupport = typeof CSS === 'object' && CSS != null && 'number' in CSS;
    /**
     * Creates a new instance of Jss.
     */

    var create = function create(options) {
      return new Jss(options);
    };
    /**
     * A global Jss instance.
     */

    create();

    var now$1 = Date.now();
    var fnValuesNs = "fnValues" + now$1;
    var fnRuleNs = "fnStyle" + ++now$1;

    var functionPlugin = function functionPlugin() {
      return {
        onCreateRule: function onCreateRule(name, decl, options) {
          if (typeof decl !== 'function') return null;
          var rule = createRule(name, {}, options);
          rule[fnRuleNs] = decl;
          return rule;
        },
        onProcessStyle: function onProcessStyle(style, rule) {
          // We need to extract function values from the declaration, so that we can keep core unaware of them.
          // We need to do that only once.
          // We don't need to extract functions on each style update, since this can happen only once.
          // We don't support function values inside of function rules.
          if (fnValuesNs in rule || fnRuleNs in rule) return style;
          var fnValues = {};

          for (var prop in style) {
            var value = style[prop];
            if (typeof value !== 'function') continue;
            delete style[prop];
            fnValues[prop] = value;
          } // $FlowFixMe[prop-missing]


          rule[fnValuesNs] = fnValues;
          return style;
        },
        onUpdate: function onUpdate(data, rule, sheet, options) {
          var styleRule = rule; // $FlowFixMe[prop-missing]

          var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
          // will be returned from that function.

          if (fnRule) {
            // Empty object will remove all currently defined props
            // in case function rule returns a falsy value.
            styleRule.style = fnRule(data) || {};

            if (process.env.NODE_ENV === 'development') {
              for (var prop in styleRule.style) {
                if (typeof styleRule.style[prop] === 'function') {
                  process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;
                  break;
                }
              }
            }
          } // $FlowFixMe[prop-missing]


          var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.

          if (fnValues) {
            for (var _prop in fnValues) {
              styleRule.prop(_prop, fnValues[_prop](data), options);
            }
          }
        }
      };
    };

    var at = '@global';
    var atPrefix = '@global ';

    var GlobalContainerRule =
    /*#__PURE__*/
    function () {
      function GlobalContainerRule(key, styles, options) {
        this.type = 'global';
        this.at = at;
        this.rules = void 0;
        this.options = void 0;
        this.key = void 0;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var selector in styles) {
          this.rules.add(selector, styles[selector]);
        }

        this.rules.process();
      }
      /**
       * Get a rule.
       */


      var _proto = GlobalContainerRule.prototype;

      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;

      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (rule) this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto.toString = function toString() {
        return this.rules.toString();
      };

      return GlobalContainerRule;
    }();

    var GlobalPrefixedRule =
    /*#__PURE__*/
    function () {
      function GlobalPrefixedRule(key, style, options) {
        this.type = 'global';
        this.at = at;
        this.options = void 0;
        this.rule = void 0;
        this.isProcessed = false;
        this.key = void 0;
        this.key = key;
        this.options = options;
        var selector = key.substr(atPrefix.length);
        this.rule = options.jss.createRule(selector, style, _extends$3({}, options, {
          parent: this
        }));
      }

      var _proto2 = GlobalPrefixedRule.prototype;

      _proto2.toString = function toString(options) {
        return this.rule ? this.rule.toString(options) : '';
      };

      return GlobalPrefixedRule;
    }();

    var separatorRegExp$1 = /\s*,\s*/g;

    function addScope(selector, scope) {
      var parts = selector.split(separatorRegExp$1);
      var scoped = '';

      for (var i = 0; i < parts.length; i++) {
        scoped += scope + " " + parts[i].trim();
        if (parts[i + 1]) scoped += ', ';
      }

      return scoped;
    }

    function handleNestedGlobalContainerRule(rule, sheet) {
      var options = rule.options,
          style = rule.style;
      var rules = style ? style[at] : null;
      if (!rules) return;

      for (var name in rules) {
        sheet.addRule(name, rules[name], _extends$3({}, options, {
          selector: addScope(name, rule.selector)
        }));
      }

      delete style[at];
    }

    function handlePrefixedGlobalRule(rule, sheet) {
      var options = rule.options,
          style = rule.style;

      for (var prop in style) {
        if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
        var selector = addScope(prop.substr(at.length), rule.selector);
        sheet.addRule(selector, style[prop], _extends$3({}, options, {
          selector: selector
        }));
        delete style[prop];
      }
    }
    /**
     * Convert nested rules to separate, remove them from original styles.
     *
     * @param {Rule} rule
     * @api public
     */


    function jssGlobal() {
      function onCreateRule(name, styles, options) {
        if (!name) return null;

        if (name === at) {
          return new GlobalContainerRule(name, styles, options);
        }

        if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
          return new GlobalPrefixedRule(name, styles, options);
        }

        var parent = options.parent;

        if (parent) {
          if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
            options.scoped = false;
          }
        }

        if (options.scoped === false) {
          options.selector = name;
        }

        return null;
      }

      function onProcessRule(rule, sheet) {
        if (rule.type !== 'style' || !sheet) return;
        handleNestedGlobalContainerRule(rule, sheet);
        handlePrefixedGlobalRule(rule, sheet);
      }

      return {
        onCreateRule: onCreateRule,
        onProcessRule: onProcessRule
      };
    }

    var separatorRegExp = /\s*,\s*/g;
    var parentRegExp = /&/g;
    var refRegExp = /\$([\w-]+)/g;
    /**
     * Convert nested rules to separate, remove them from original styles.
     *
     * @param {Rule} rule
     * @api public
     */

    function jssNested() {
      // Get a function to be used for $ref replacement.
      function getReplaceRef(container, sheet) {
        return function (match, key) {
          var rule = container.getRule(key) || sheet && sheet.getRule(key);

          if (rule) {
            rule = rule;
            return rule.selector;
          }

          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".") : void 0;
          return key;
        };
      }

      function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split(separatorRegExp);
        var nestedSelectors = nestedProp.split(separatorRegExp);
        var result = '';

        for (var i = 0; i < parentSelectors.length; i++) {
          var parent = parentSelectors[i];

          for (var j = 0; j < nestedSelectors.length; j++) {
            var nested = nestedSelectors[j];
            if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.

            result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
          }
        }

        return result;
      }

      function getOptions(rule, container, prevOptions) {
        // Options has been already created, now we only increase index.
        if (prevOptions) return _extends$3({}, prevOptions, {
          index: prevOptions.index + 1 // $FlowFixMe[prop-missing]

        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

        var options = _extends$3({}, rule.options, {
          nestingLevel: nestingLevel,
          index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.

        });

        delete options.name;
        return options;
      }

      function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style') return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;

        for (var prop in style) {
          var isNested = prop.indexOf('&') !== -1;
          var isNestedConditional = prop[0] === '@';
          if (!isNested && !isNestedConditional) continue;
          options = getOptions(styleRule, container, options);

          if (isNested) {
            var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
            // all nested rules within the sheet.

            if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.

            selector = selector.replace(refRegExp, replaceRef);
            container.addRule(selector, style[prop], _extends$3({}, options, {
              selector: selector
            }));
          } else if (isNestedConditional) {
            // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {}, options) // Flow expects more options but they aren't required
            // And flow doesn't know this will always be a StyleRule which has the addRule method
            // $FlowFixMe[incompatible-use]
            // $FlowFixMe[prop-missing]
            .addRule(styleRule.key, style[prop], {
              selector: styleRule.selector
            });
          }

          delete style[prop];
        }

        return style;
      }

      return {
        onProcessStyle: onProcessStyle
      };
    }

    /* eslint-disable no-var, prefer-template */
    var uppercasePattern = /[A-Z]/g;
    var msPattern = /^ms-/;
    var cache$2 = {};

    function toHyphenLower(match) {
      return '-' + match.toLowerCase()
    }

    function hyphenateStyleName(name) {
      if (cache$2.hasOwnProperty(name)) {
        return cache$2[name]
      }

      var hName = name.replace(uppercasePattern, toHyphenLower);
      return (cache$2[name] = msPattern.test(hName) ? '-' + hName : hName)
    }

    /**
     * Convert camel cased property names to dash separated.
     *
     * @param {Object} style
     * @return {Object}
     */

    function convertCase(style) {
      var converted = {};

      for (var prop in style) {
        var key = prop.indexOf('--') === 0 ? prop : hyphenateStyleName(prop);
        converted[key] = style[prop];
      }

      if (style.fallbacks) {
        if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
      }

      return converted;
    }
    /**
     * Allow camel cased property names by converting them back to dasherized.
     *
     * @param {Rule} rule
     */


    function camelCase() {
      function onProcessStyle(style) {
        if (Array.isArray(style)) {
          // Handle rules like @font-face, which can have multiple styles in an array
          for (var index = 0; index < style.length; index++) {
            style[index] = convertCase(style[index]);
          }

          return style;
        }

        return convertCase(style);
      }

      function onChangeValue(value, prop, rule) {
        if (prop.indexOf('--') === 0) {
          return value;
        }

        var hyphenatedProp = hyphenateStyleName(prop); // There was no camel case in place

        if (prop === hyphenatedProp) return value;
        rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.

        return null;
      }

      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    var px = hasCSSTOMSupport && CSS ? CSS.px : 'px';
    var ms = hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
    var percent = hasCSSTOMSupport && CSS ? CSS.percent : '%';
    /**
     * Generated jss-plugin-default-unit CSS property units
     *
     * @type object
     */

    var defaultUnits = {
      // Animation properties
      'animation-delay': ms,
      'animation-duration': ms,
      // Background properties
      'background-position': px,
      'background-position-x': px,
      'background-position-y': px,
      'background-size': px,
      // Border Properties
      border: px,
      'border-bottom': px,
      'border-bottom-left-radius': px,
      'border-bottom-right-radius': px,
      'border-bottom-width': px,
      'border-left': px,
      'border-left-width': px,
      'border-radius': px,
      'border-right': px,
      'border-right-width': px,
      'border-top': px,
      'border-top-left-radius': px,
      'border-top-right-radius': px,
      'border-top-width': px,
      'border-width': px,
      'border-block': px,
      'border-block-end': px,
      'border-block-end-width': px,
      'border-block-start': px,
      'border-block-start-width': px,
      'border-block-width': px,
      'border-inline': px,
      'border-inline-end': px,
      'border-inline-end-width': px,
      'border-inline-start': px,
      'border-inline-start-width': px,
      'border-inline-width': px,
      'border-start-start-radius': px,
      'border-start-end-radius': px,
      'border-end-start-radius': px,
      'border-end-end-radius': px,
      // Margin properties
      margin: px,
      'margin-bottom': px,
      'margin-left': px,
      'margin-right': px,
      'margin-top': px,
      'margin-block': px,
      'margin-block-end': px,
      'margin-block-start': px,
      'margin-inline': px,
      'margin-inline-end': px,
      'margin-inline-start': px,
      // Padding properties
      padding: px,
      'padding-bottom': px,
      'padding-left': px,
      'padding-right': px,
      'padding-top': px,
      'padding-block': px,
      'padding-block-end': px,
      'padding-block-start': px,
      'padding-inline': px,
      'padding-inline-end': px,
      'padding-inline-start': px,
      // Mask properties
      'mask-position-x': px,
      'mask-position-y': px,
      'mask-size': px,
      // Width and height properties
      height: px,
      width: px,
      'min-height': px,
      'max-height': px,
      'min-width': px,
      'max-width': px,
      // Position properties
      bottom: px,
      left: px,
      top: px,
      right: px,
      inset: px,
      'inset-block': px,
      'inset-block-end': px,
      'inset-block-start': px,
      'inset-inline': px,
      'inset-inline-end': px,
      'inset-inline-start': px,
      // Shadow properties
      'box-shadow': px,
      'text-shadow': px,
      // Column properties
      'column-gap': px,
      'column-rule': px,
      'column-rule-width': px,
      'column-width': px,
      // Font and text properties
      'font-size': px,
      'font-size-delta': px,
      'letter-spacing': px,
      'text-decoration-thickness': px,
      'text-indent': px,
      'text-stroke': px,
      'text-stroke-width': px,
      'word-spacing': px,
      // Motion properties
      motion: px,
      'motion-offset': px,
      // Outline properties
      outline: px,
      'outline-offset': px,
      'outline-width': px,
      // Perspective properties
      perspective: px,
      'perspective-origin-x': percent,
      'perspective-origin-y': percent,
      // Transform properties
      'transform-origin': percent,
      'transform-origin-x': percent,
      'transform-origin-y': percent,
      'transform-origin-z': percent,
      // Transition properties
      'transition-delay': ms,
      'transition-duration': ms,
      // Alignment properties
      'vertical-align': px,
      'flex-basis': px,
      // Some random properties
      'shape-margin': px,
      size: px,
      gap: px,
      // Grid properties
      grid: px,
      'grid-gap': px,
      'row-gap': px,
      'grid-row-gap': px,
      'grid-column-gap': px,
      'grid-template-rows': px,
      'grid-template-columns': px,
      'grid-auto-rows': px,
      'grid-auto-columns': px,
      // Not existing properties.
      // Used to avoid issues with jss-plugin-expand integration.
      'box-shadow-x': px,
      'box-shadow-y': px,
      'box-shadow-blur': px,
      'box-shadow-spread': px,
      'font-line-height': px,
      'text-shadow-x': px,
      'text-shadow-y': px,
      'text-shadow-blur': px
    };

    /**
     * Clones the object and adds a camel cased property version.
     */
    function addCamelCasedVersion(obj) {
      var regExp = /(-[a-z])/g;

      var replace = function replace(str) {
        return str[1].toUpperCase();
      };

      var newObj = {};

      for (var _key in obj) {
        newObj[_key] = obj[_key];
        newObj[_key.replace(regExp, replace)] = obj[_key];
      }

      return newObj;
    }

    var units = addCamelCasedVersion(defaultUnits);
    /**
     * Recursive deep style passing function
     */

    function iterate(prop, value, options) {
      if (value == null) return value;

      if (Array.isArray(value)) {
        for (var i = 0; i < value.length; i++) {
          value[i] = iterate(prop, value[i], options);
        }
      } else if (typeof value === 'object') {
        if (prop === 'fallbacks') {
          for (var innerProp in value) {
            value[innerProp] = iterate(innerProp, value[innerProp], options);
          }
        } else {
          for (var _innerProp in value) {
            value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
          }
        } // eslint-disable-next-line no-restricted-globals

      } else if (typeof value === 'number' && isNaN(value) === false) {
        var unit = options[prop] || units[prop]; // Add the unit if available, except for the special case of 0px.

        if (unit && !(value === 0 && unit === px)) {
          return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
        }

        return value.toString();
      }

      return value;
    }
    /**
     * Add unit to numeric values.
     */


    function defaultUnit(options) {
      if (options === void 0) {
        options = {};
      }

      var camelCasedOptions = addCamelCasedVersion(options);

      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;

        for (var prop in style) {
          style[prop] = iterate(prop, style[prop], camelCasedOptions);
        }

        return style;
      }

      function onChangeValue(value, prop) {
        return iterate(prop, value, camelCasedOptions);
      }

      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    // Export javascript style and css style vendor prefixes.
    var js = '';
    var css = '';
    var vendor = '';
    var browser = '';
    var isTouch = isBrowser$1 && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.

    if (isBrowser$1) {
      // Order matters. We need to check Webkit the last one because
      // other vendors use to add Webkit prefixes to some properties
      var jsCssMap = {
        Moz: '-moz-',
        ms: '-ms-',
        O: '-o-',
        Webkit: '-webkit-'
      };

      var _document$createEleme = document.createElement('p'),
          style$2 = _document$createEleme.style;

      var testProp = 'Transform';

      for (var key in jsCssMap) {
        if (key + testProp in style$2) {
          js = key;
          css = jsCssMap[key];
          break;
        }
      } // Correctly detect the Edge browser.


      if (js === 'Webkit' && 'msHyphens' in style$2) {
        js = 'ms';
        css = jsCssMap.ms;
        browser = 'edge';
      } // Correctly detect the Safari browser.


      if (js === 'Webkit' && '-apple-trailing-word' in style$2) {
        vendor = 'apple';
      }
    }
    /**
     * Vendor prefix string for the current browser.
     *
     * @type {{js: String, css: String, vendor: String, browser: String}}
     * @api public
     */


    var prefix = {
      js: js,
      css: css,
      vendor: vendor,
      browser: browser,
      isTouch: isTouch
    };

    /**
     * Test if a keyframe at-rule should be prefixed or not
     *
     * @param {String} vendor prefix string for the current browser.
     * @return {String}
     * @api public
     */

    function supportedKeyframes(key) {
      // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
      if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
      // https://caniuse.com/#search=keyframes

      if (prefix.js === 'ms') return key;
      return "@" + prefix.css + "keyframes" + key.substr(10);
    }

    // https://caniuse.com/#search=appearance

    var appearence = {
      noPrefill: ['appearance'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'appearance') return false;
        if (prefix.js === 'ms') return "-webkit-" + prop;
        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=color-adjust

    var colorAdjust = {
      noPrefill: ['color-adjust'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'color-adjust') return false;
        if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
        return prop;
      }
    };

    var regExp = /[-\s]+(.)?/g;
    /**
     * Replaces the letter with the capital letter
     *
     * @param {String} match
     * @param {String} c
     * @return {String}
     * @api private
     */

    function toUpper(match, c) {
      return c ? c.toUpperCase() : '';
    }
    /**
     * Convert dash separated strings to camel-cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */


    function camelize(str) {
      return str.replace(regExp, toUpper);
    }

    /**
     * Convert dash separated strings to pascal cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */

    function pascalize(str) {
      return camelize("-" + str);
    }

    // but we can use a longhand property instead.
    // https://caniuse.com/#search=mask

    var mask = {
      noPrefill: ['mask'],
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^mask/.test(prop)) return false;

        if (prefix.js === 'Webkit') {
          var longhand = 'mask-image';

          if (camelize(longhand) in style) {
            return prop;
          }

          if (prefix.js + pascalize(longhand) in style) {
            return prefix.css + prop;
          }
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=text-orientation

    var textOrientation = {
      noPrefill: ['text-orientation'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'text-orientation') return false;

        if (prefix.vendor === 'apple' && !prefix.isTouch) {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=transform

    var transform = {
      noPrefill: ['transform'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transform') return false;

        if (options.transform) {
          return prop;
        }

        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=transition

    var transition = {
      noPrefill: ['transition'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transition') return false;

        if (options.transition) {
          return prop;
        }

        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=writing-mode

    var writingMode = {
      noPrefill: ['writing-mode'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'writing-mode') return false;

        if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=user-select

    var userSelect = {
      noPrefill: ['user-select'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'user-select') return false;

        if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=multicolumn
    // https://github.com/postcss/autoprefixer/issues/491
    // https://github.com/postcss/autoprefixer/issues/177

    var breakPropsOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^break-/.test(prop)) return false;

        if (prefix.js === 'Webkit') {
          var jsProp = "WebkitColumn" + pascalize(prop);
          return jsProp in style ? prefix.css + "column-" + prop : false;
        }

        if (prefix.js === 'Moz') {
          var _jsProp = "page" + pascalize(prop);

          return _jsProp in style ? "page-" + prop : false;
        }

        return false;
      }
    };

    // See https://github.com/postcss/autoprefixer/issues/324.

    var inlineLogicalOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^(border|margin|padding)-inline/.test(prop)) return false;
        if (prefix.js === 'Moz') return prop;
        var newProp = prop.replace('-inline', '');
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };

    // Camelization is required because we can't test using.
    // CSS syntax for e.g. in FF.

    var unprefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        return camelize(prop) in style ? prop : false;
      }
    };

    var prefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.

        if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.

        if (prop[0] === '-' && prop[1] === '-') return prop;
        if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.

        if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
        return false;
      }
    };

    // https://caniuse.com/#search=scroll-snap

    var scrollSnap = {
      supportedProperty: function supportedProperty(prop) {
        if (prop.substring(0, 11) !== 'scroll-snap') return false;

        if (prefix.js === 'ms') {
          return "" + prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=overscroll-behavior

    var overscrollBehavior = {
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'overscroll-behavior') return false;

        if (prefix.js === 'ms') {
          return prefix.css + "scroll-chaining";
        }

        return prop;
      }
    };

    var propMap = {
      'flex-grow': 'flex-positive',
      'flex-shrink': 'flex-negative',
      'flex-basis': 'flex-preferred-size',
      'justify-content': 'flex-pack',
      order: 'flex-order',
      'align-items': 'flex-align',
      'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.

    }; // Support old flex spec from 2012.

    var flex2012 = {
      supportedProperty: function supportedProperty(prop, style) {
        var newProp = propMap[prop];
        if (!newProp) return false;
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };

    var propMap$1 = {
      flex: 'box-flex',
      'flex-grow': 'box-flex',
      'flex-direction': ['box-orient', 'box-direction'],
      order: 'box-ordinal-group',
      'align-items': 'box-align',
      'flex-flow': ['box-orient', 'box-direction'],
      'justify-content': 'box-pack'
    };
    var propKeys = Object.keys(propMap$1);

    var prefixCss = function prefixCss(p) {
      return prefix.css + p;
    }; // Support old flex spec from 2009.


    var flex2009 = {
      supportedProperty: function supportedProperty(prop, style, _ref) {
        var multiple = _ref.multiple;

        if (propKeys.indexOf(prop) > -1) {
          var newProp = propMap$1[prop];

          if (!Array.isArray(newProp)) {
            return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
          }

          if (!multiple) return false;

          for (var i = 0; i < newProp.length; i++) {
            if (!(prefix.js + pascalize(newProp[0]) in style)) {
              return false;
            }
          }

          return newProp.map(prefixCss);
        }

        return false;
      }
    };

    // plugins = [
    //   ...plugins,
    //    breakPropsOld,
    //    inlineLogicalOld,
    //    unprefixed,
    //    prefixed,
    //    scrollSnap,
    //    flex2012,
    //    flex2009
    // ]
    // Plugins without 'noPrefill' value, going last.
    // 'flex-*' plugins should be at the bottom.
    // 'flex2009' going after 'flex2012'.
    // 'prefixed' going after 'unprefixed'

    var plugins = [appearence, colorAdjust, mask, textOrientation, transform, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
    var propertyDetectors = plugins.filter(function (p) {
      return p.supportedProperty;
    }).map(function (p) {
      return p.supportedProperty;
    });
    var noPrefill = plugins.filter(function (p) {
      return p.noPrefill;
    }).reduce(function (a, p) {
      a.push.apply(a, _toConsumableArray(p.noPrefill));
      return a;
    }, []);

    var el;
    var cache = {};

    if (isBrowser$1) {
      el = document.createElement('p'); // We test every property on vendor prefix requirement.
      // Once tested, result is cached. It gives us up to 70% perf boost.
      // http://jsperf.com/element-style-object-access-vs-plain-object
      //
      // Prefill cache with known css properties to reduce amount of
      // properties we need to feature test at runtime.
      // http://davidwalsh.name/vendor-prefix

      var computed = window.getComputedStyle(document.documentElement, '');

      for (var key$1 in computed) {
        // eslint-disable-next-line no-restricted-globals
        if (!isNaN(key$1)) cache[computed[key$1]] = computed[key$1];
      } // Properties that cannot be correctly detected using the
      // cache prefill method.


      noPrefill.forEach(function (x) {
        return delete cache[x];
      });
    }
    /**
     * Test if a property is supported, returns supported property with vendor
     * prefix if required. Returns `false` if not supported.
     *
     * @param {String} prop dash separated
     * @param {Object} [options]
     * @return {String|Boolean}
     * @api public
     */


    function supportedProperty(prop, options) {
      if (options === void 0) {
        options = {};
      }

      // For server-side rendering.
      if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.

      if (process.env.NODE_ENV !== 'benchmark' && cache[prop] != null) {
        return cache[prop];
      } // Check if 'transition' or 'transform' natively supported in browser.


      if (prop === 'transition' || prop === 'transform') {
        options[prop] = prop in el.style;
      } // Find a plugin for current prefix property.


      for (var i = 0; i < propertyDetectors.length; i++) {
        cache[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.

        if (cache[prop]) break;
      } // Reset styles for current property.
      // Firefox can even throw an error for invalid properties, e.g., "0".


      try {
        el.style[prop] = '';
      } catch (err) {
        return false;
      }

      return cache[prop];
    }

    var cache$1 = {};
    var transitionProperties = {
      transition: 1,
      'transition-property': 1,
      '-webkit-transition': 1,
      '-webkit-transition-property': 1
    };
    var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
    var el$1;
    /**
     * Returns prefixed value transition/transform if needed.
     *
     * @param {String} match
     * @param {String} p1
     * @param {String} p2
     * @return {String}
     * @api private
     */

    function prefixTransitionCallback(match, p1, p2) {
      if (p1 === 'var') return 'var';
      if (p1 === 'all') return 'all';
      if (p2 === 'all') return ', all';
      var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
      if (!prefixedValue) return p1 || p2;
      return prefixedValue;
    }

    if (isBrowser$1) el$1 = document.createElement('p');
    /**
     * Returns prefixed value if needed. Returns `false` if value is not supported.
     *
     * @param {String} property
     * @param {String} value
     * @return {String|Boolean}
     * @api public
     */

    function supportedValue(property, value) {
      // For server-side rendering.
      var prefixedValue = value;
      if (!el$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
      // We want only prefixable values here.
      // eslint-disable-next-line no-restricted-globals

      if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
        return prefixedValue;
      } // Create cache key for current value.


      var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.

      if (process.env.NODE_ENV !== 'benchmark' && cache$1[cacheKey] != null) {
        return cache$1[cacheKey];
      } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.


      try {
        // Test value as it is.
        el$1.style[property] = prefixedValue;
      } catch (err) {
        // Return false if value not supported.
        cache$1[cacheKey] = false;
        return false;
      } // If 'transition' or 'transition-property' property.


      if (transitionProperties[property]) {
        prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
      } else if (el$1.style[property] === '') {
        // Value with a vendor prefix.
        prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

        if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.

        el$1.style[property] = prefixedValue; // Return false if value not supported.

        if (el$1.style[property] === '') {
          cache$1[cacheKey] = false;
          return false;
        }
      } // Reset styles for current property.


      el$1.style[property] = ''; // Write current value to cache.

      cache$1[cacheKey] = prefixedValue;
      return cache$1[cacheKey];
    }

    /**
     * Add vendor prefix to a property name when needed.
     *
     * @api public
     */

    function jssVendorPrefixer() {
      function onProcessRule(rule) {
        if (rule.type === 'keyframes') {
          var atRule = rule;
          atRule.at = supportedKeyframes(atRule.at);
        }
      }

      function prefixStyle(style) {
        for (var prop in style) {
          var value = style[prop];

          if (prop === 'fallbacks' && Array.isArray(value)) {
            style[prop] = value.map(prefixStyle);
            continue;
          }

          var changeProp = false;
          var supportedProp = supportedProperty(prop);
          if (supportedProp && supportedProp !== prop) changeProp = true;
          var changeValue = false;
          var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
          if (supportedValue$1 && supportedValue$1 !== value) changeValue = true;

          if (changeProp || changeValue) {
            if (changeProp) delete style[prop];
            style[supportedProp || prop] = supportedValue$1 || value;
          }
        }

        return style;
      }

      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
        return prefixStyle(style);
      }

      function onChangeValue(value, prop) {
        return supportedValue(prop, toCssValue(value)) || value;
      }

      return {
        onProcessRule: onProcessRule,
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    /**
     * Sort props by length.
     */
    function jssPropsSort() {
      var sort = function sort(prop0, prop1) {
        if (prop0.length === prop1.length) {
          return prop0 > prop1 ? 1 : -1;
        }

        return prop0.length - prop1.length;
      };

      return {
        onProcessStyle: function onProcessStyle(style, rule) {
          if (rule.type !== 'style') return style;
          var newStyle = {};
          var props = Object.keys(style).sort(sort);

          for (var i = 0; i < props.length; i++) {
            newStyle[props[i]] = style[props[i]];
          }

          return newStyle;
        }
      };
    }

    function jssPreset() {
      return {
        plugins: [functionPlugin(), jssGlobal(), jssNested(), camelCase(), defaultUnit(), // Disable the vendor prefixer server-side, it does nothing.
        // This way, we can get a performance boost.
        // In the documentation, we are using `autoprefixer` to solve this problem.
        typeof window === 'undefined' ? null : jssVendorPrefixer(), jssPropsSort()]
      };
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    function mergeClasses() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var baseClasses = options.baseClasses,
          newClasses = options.newClasses,
          Component = options.Component;

      if (!newClasses) {
        return baseClasses;
      }

      var nextClasses = _extends$3({}, baseClasses);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof newClasses === 'string') {
          console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(getDisplayName(Component), " is incorrect."), 'You might want to use the className prop instead.'].join('\n'));
          return baseClasses;
        }
      }

      Object.keys(newClasses).forEach(function (key) {
        if (process.env.NODE_ENV !== 'production') {
          if (!baseClasses[key] && newClasses[key]) {
            console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat(getDisplayName(Component), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
          }

          if (newClasses[key] && typeof newClasses[key] !== 'string') {
            console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat(getDisplayName(Component), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join('\n'));
          }
        }

        if (newClasses[key]) {
          nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
        }
      });
      return nextClasses;
    }

    // Used https://github.com/thinkloop/multi-key-cache as inspiration
    var multiKeyStore = {
      set: function set(cache, key1, key2, value) {
        var subCache = cache.get(key1);

        if (!subCache) {
          subCache = new Map();
          cache.set(key1, subCache);
        }

        subCache.set(key2, value);
      },
      get: function get(cache, key1, key2) {
        var subCache = cache.get(key1);
        return subCache ? subCache.get(key2) : undefined;
      },
      delete: function _delete(cache, key1, key2) {
        var subCache = cache.get(key1);
        subCache.delete(key2);
      }
    };

    var ThemeContext = React__default['default'].createContext(null);

    if (process.env.NODE_ENV !== 'production') {
      ThemeContext.displayName = 'ThemeContext';
    }

    function useTheme$1() {
      var theme = React__default['default'].useContext(ThemeContext);

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__default['default'].useDebugValue(theme);
      }

      return theme;
    }

    var jss = create(jssPreset()); // Use a singleton or the provided one by the context.
    //
    // The counter-based approach doesn't tolerate any mistake.
    // It's much safer to use the same counter everywhere.

    var generateClassName = createGenerateClassName(); // Exported for test purposes

    var sheetsManager = new Map();
    var defaultOptions = {
      disableGeneration: false,
      generateClassName: generateClassName,
      jss: jss,
      sheetsCache: null,
      sheetsManager: sheetsManager,
      sheetsRegistry: null
    };
    var StylesContext = React__default['default'].createContext(defaultOptions);

    if (process.env.NODE_ENV !== 'production') {
      StylesContext.displayName = 'StylesContext';
    }

    var injectFirstNode;
    function StylesProvider(props) {
      var children = props.children,
          _props$injectFirst = props.injectFirst,
          injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst,
          _props$disableGenerat = props.disableGeneration,
          disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat,
          localOptions = _objectWithoutProperties(props, ["children", "injectFirst", "disableGeneration"]);

      var outerOptions = React__default['default'].useContext(StylesContext);

      var context = _extends$3({}, outerOptions, {
        disableGeneration: disableGeneration
      }, localOptions);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof window === 'undefined' && !context.sheetsManager) {
          console.error('Material-UI: You need to use the ServerStyleSheets API when rendering on the server.');
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (context.jss.options.insertionPoint && injectFirst) {
          console.error('Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (injectFirst && localOptions.jss) {
          console.error('Material-UI: You cannot use the jss and injectFirst props at the same time.');
        }
      }

      if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {
        if (!injectFirstNode) {
          var head = document.head;
          injectFirstNode = document.createComment('mui-inject-first');
          head.insertBefore(injectFirstNode, head.firstChild);
        }

        context.jss = create({
          plugins: jssPreset().plugins,
          insertionPoint: injectFirstNode
        });
      }

      return /*#__PURE__*/React__default['default'].createElement(StylesContext.Provider, {
        value: context
      }, children);
    }
    process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: propTypes.node.isRequired,

      /**
       * You can disable the generation of the styles with this option.
       * It can be useful when traversing the React tree outside of the HTML
       * rendering step on the server.
       * Let's say you are using react-apollo to extract all
       * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
       */
      disableGeneration: propTypes.bool,

      /**
       * JSS's class name generator.
       */
      generateClassName: propTypes.func,

      /**
       * By default, the styles are injected last in the <head> element of the page.
       * As a result, they gain more specificity than any other style sheet.
       * If you want to override Material-UI's styles, set this prop.
       */
      injectFirst: propTypes.bool,

      /**
       * JSS's instance.
       */
      jss: propTypes.object,

      /**
       * @ignore
       */
      serverGenerateClassName: propTypes.func,

      /**
       * @ignore
       *
       * Beta feature.
       *
       * Cache for the sheets.
       */
      sheetsCache: propTypes.object,

      /**
       * @ignore
       *
       * The sheetsManager is used to deduplicate style sheet injection in the page.
       * It's deduplicating using the (theme, styles) couple.
       * On the server, you should provide a new instance for each request.
       */
      sheetsManager: propTypes.object,

      /**
       * @ignore
       *
       * Collect the sheets.
       */
      sheetsRegistry: propTypes.object
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = exactProp(StylesProvider.propTypes) : void 0;
    }

    /* eslint-disable import/prefer-default-export */
    // Global index counter to preserve source order.
    // We create the style sheet during the creation of the component,
    // children are handled after the parents, so the order of style elements would be parent->child.
    // It is a problem though when a parent passes a className
    // which needs to override any child's styles.
    // StyleSheet of the child has a higher specificity, because of the source order.
    // So our solution is to render sheets them in the reverse order child->sheet, so
    // that parent has a higher specificity.
    var indexCounter = -1e9;
    function increment() {
      indexCounter += 1;

      if (process.env.NODE_ENV !== 'production') {
        if (indexCounter >= 0) {
          console.warn(['Material-UI: You might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
        }
      }

      return indexCounter;
    }

    // We use the same empty object to ref count the styles that don't need a theme object.
    var noopTheme = {};

    function getStylesCreator(stylesOrCreator) {
      var themingEnabled = typeof stylesOrCreator === 'function';

      if (process.env.NODE_ENV !== 'production') {
        if (_typeof$1(stylesOrCreator) !== 'object' && !themingEnabled) {
          console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
        }
      }

      return {
        create: function create(theme, name) {
          var styles;

          try {
            styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
          } catch (err) {
            if (process.env.NODE_ENV !== 'production') {
              if (themingEnabled === true && theme === noopTheme) {
                // TODO: prepend error message/name instead
                console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
              }
            }

            throw err;
          }

          if (!name || !theme.overrides || !theme.overrides[name]) {
            return styles;
          }

          var overrides = theme.overrides[name];

          var stylesWithOverrides = _extends$3({}, styles);

          Object.keys(overrides).forEach(function (key) {
            if (process.env.NODE_ENV !== 'production') {
              if (!stylesWithOverrides[key]) {
                console.warn(['Material-UI: You are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
              }
            }

            stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);
          });
          return stylesWithOverrides;
        },
        options: {}
      };
    }

    function getClasses(_ref, classes, Component) {
      var state = _ref.state,
          stylesOptions = _ref.stylesOptions;

      if (stylesOptions.disableGeneration) {
        return classes || {};
      }

      if (!state.cacheClasses) {
        state.cacheClasses = {
          // Cache for the finalized classes value.
          value: null,
          // Cache for the last used classes prop pointer.
          lastProp: null,
          // Cache for the last used rendered classes pointer.
          lastJSS: {}
        };
      } // Tracks if either the rendered classes or classes prop has changed,
      // requiring the generation of a new finalized classes object.


      var generate = false;

      if (state.classes !== state.cacheClasses.lastJSS) {
        state.cacheClasses.lastJSS = state.classes;
        generate = true;
      }

      if (classes !== state.cacheClasses.lastProp) {
        state.cacheClasses.lastProp = classes;
        generate = true;
      }

      if (generate) {
        state.cacheClasses.value = mergeClasses({
          baseClasses: state.cacheClasses.lastJSS,
          newClasses: classes,
          Component: Component
        });
      }

      return state.cacheClasses.value;
    }

    function attach(_ref2, props) {
      var state = _ref2.state,
          theme = _ref2.theme,
          stylesOptions = _ref2.stylesOptions,
          stylesCreator = _ref2.stylesCreator,
          name = _ref2.name;

      if (stylesOptions.disableGeneration) {
        return;
      }

      var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);

      if (!sheetManager) {
        sheetManager = {
          refs: 0,
          staticSheet: null,
          dynamicStyles: null
        };
        multiKeyStore.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
      }

      var options = _extends$3({}, stylesCreator.options, stylesOptions, {
        theme: theme,
        flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
      });

      options.generateId = options.serverGenerateClassName || options.generateClassName;
      var sheetsRegistry = stylesOptions.sheetsRegistry;

      if (sheetManager.refs === 0) {
        var staticSheet;

        if (stylesOptions.sheetsCache) {
          staticSheet = multiKeyStore.get(stylesOptions.sheetsCache, stylesCreator, theme);
        }

        var styles = stylesCreator.create(theme, name);

        if (!staticSheet) {
          staticSheet = stylesOptions.jss.createStyleSheet(styles, _extends$3({
            link: false
          }, options));
          staticSheet.attach();

          if (stylesOptions.sheetsCache) {
            multiKeyStore.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
          }
        }

        if (sheetsRegistry) {
          sheetsRegistry.add(staticSheet);
        }

        sheetManager.staticSheet = staticSheet;
        sheetManager.dynamicStyles = getDynamicStyles(styles);
      }

      if (sheetManager.dynamicStyles) {
        var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends$3({
          link: true
        }, options));
        dynamicSheet.update(props);
        dynamicSheet.attach();
        state.dynamicSheet = dynamicSheet;
        state.classes = mergeClasses({
          baseClasses: sheetManager.staticSheet.classes,
          newClasses: dynamicSheet.classes
        });

        if (sheetsRegistry) {
          sheetsRegistry.add(dynamicSheet);
        }
      } else {
        state.classes = sheetManager.staticSheet.classes;
      }

      sheetManager.refs += 1;
    }

    function update$1(_ref3, props) {
      var state = _ref3.state;

      if (state.dynamicSheet) {
        state.dynamicSheet.update(props);
      }
    }

    function detach(_ref4) {
      var state = _ref4.state,
          theme = _ref4.theme,
          stylesOptions = _ref4.stylesOptions,
          stylesCreator = _ref4.stylesCreator;

      if (stylesOptions.disableGeneration) {
        return;
      }

      var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);
      sheetManager.refs -= 1;
      var sheetsRegistry = stylesOptions.sheetsRegistry;

      if (sheetManager.refs === 0) {
        multiKeyStore.delete(stylesOptions.sheetsManager, stylesCreator, theme);
        stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);

        if (sheetsRegistry) {
          sheetsRegistry.remove(sheetManager.staticSheet);
        }
      }

      if (state.dynamicSheet) {
        stylesOptions.jss.removeStyleSheet(state.dynamicSheet);

        if (sheetsRegistry) {
          sheetsRegistry.remove(state.dynamicSheet);
        }
      }
    }

    function useSynchronousEffect(func, values) {
      var key = React__default['default'].useRef([]);
      var output; // Store "generation" key. Just returns a new object every time

      var currentKey = React__default['default'].useMemo(function () {
        return {};
      }, values); // eslint-disable-line react-hooks/exhaustive-deps
      // "the first render", or "memo dropped the value"

      if (key.current !== currentKey) {
        key.current = currentKey;
        output = func();
      }

      React__default['default'].useEffect(function () {
        return function () {
          if (output) {
            output();
          }
        };
      }, [currentKey] // eslint-disable-line react-hooks/exhaustive-deps
      );
    }

    function makeStyles$1(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var name = options.name,
          classNamePrefixOption = options.classNamePrefix,
          Component = options.Component,
          _options$defaultTheme = options.defaultTheme,
          defaultTheme = _options$defaultTheme === void 0 ? noopTheme : _options$defaultTheme,
          stylesOptions2 = _objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);

      var stylesCreator = getStylesCreator(stylesOrCreator);
      var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
      stylesCreator.options = {
        index: increment(),
        name: name,
        meta: classNamePrefix,
        classNamePrefix: classNamePrefix
      };

      var useStyles = function useStyles() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var theme = useTheme$1() || defaultTheme;

        var stylesOptions = _extends$3({}, React__default['default'].useContext(StylesContext), stylesOptions2);

        var instance = React__default['default'].useRef();
        var shouldUpdate = React__default['default'].useRef();
        useSynchronousEffect(function () {
          var current = {
            name: name,
            state: {},
            stylesCreator: stylesCreator,
            stylesOptions: stylesOptions,
            theme: theme
          };
          attach(current, props);
          shouldUpdate.current = false;
          instance.current = current;
          return function () {
            detach(current);
          };
        }, [theme, stylesCreator]);
        React__default['default'].useEffect(function () {
          if (shouldUpdate.current) {
            update$1(instance.current, props);
          }

          shouldUpdate.current = true;
        });
        var classes = getClasses(instance.current, props.classes, Component);

        if (process.env.NODE_ENV !== 'production') {
          // eslint-disable-next-line react-hooks/rules-of-hooks
          React__default['default'].useDebugValue(classes);
        }

        return classes;
      };

      return useStyles;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function toVal(mix) {
    	var k, y, str='';

    	if (typeof mix === 'string' || typeof mix === 'number') {
    		str += mix;
    	} else if (typeof mix === 'object') {
    		if (Array.isArray(mix)) {
    			for (k=0; k < mix.length; k++) {
    				if (mix[k]) {
    					if (y = toVal(mix[k])) {
    						str && (str += ' ');
    						str += y;
    					}
    				}
    			}
    		} else {
    			for (k in mix) {
    				if (mix[k]) {
    					str && (str += ' ');
    					str += k;
    				}
    			}
    		}
    	}

    	return str;
    }

    function clsx () {
    	var i=0, tmp, x, str='';
    	while (i < arguments.length) {
    		if (tmp = arguments[i++]) {
    			if (x = toVal(tmp)) {
    				str && (str += ' ');
    				str += x;
    			}
    		}
    	}
    	return str;
    }

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$2.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$2.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (reactIs$2.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above


      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }

    var defineProperty$1 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty$1(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === 'function') {
        var mergedTheme = localTheme(outerTheme);

        if (process.env.NODE_ENV !== 'production') {
          if (!mergedTheme) {
            console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
          }
        }

        return mergedTheme;
      }

      return _extends$3({}, outerTheme, localTheme);
    }
    /**
     * This component takes a `theme` prop.
     * It makes the `theme` available down the React tree thanks to React context.
     * This component should preferably be used at **the root of your component tree**.
     */


    function ThemeProvider(props) {
      var children = props.children,
          localTheme = props.theme;
      var outerTheme = useTheme$1();

      if (process.env.NODE_ENV !== 'production') {
        if (outerTheme === null && typeof localTheme === 'function') {
          console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
        }
      }

      var theme = React__default['default'].useMemo(function () {
        var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

        if (output != null) {
          output[nested] = outerTheme !== null;
        }

        return output;
      }, [localTheme, outerTheme]);
      return /*#__PURE__*/React__default['default'].createElement(ThemeContext.Provider, {
        value: theme
      }, children);
    }

    process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: propTypes.node.isRequired,

      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
    }

    // It does not modify the component passed to it;
    // instead, it returns a new component, with a `classes` property.

    var withStyles$1 = function withStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return function (Component) {
        var defaultTheme = options.defaultTheme,
            _options$withTheme = options.withTheme,
            withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
            name = options.name,
            stylesOptions = _objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);

        if (process.env.NODE_ENV !== 'production') {
          if (Component === undefined) {
            throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
          }
        }

        var classNamePrefix = name;

        if (process.env.NODE_ENV !== 'production') {
          if (!name) {
            // Provide a better DX outside production.
            var displayName = getDisplayName(Component);

            if (displayName !== undefined) {
              classNamePrefix = displayName;
            }
          }
        }

        var useStyles = makeStyles$1(stylesOrCreator, _extends$3({
          defaultTheme: defaultTheme,
          Component: Component,
          name: name || Component.displayName,
          classNamePrefix: classNamePrefix
        }, stylesOptions));
        var WithStyles = /*#__PURE__*/React__default['default'].forwardRef(function WithStyles(props, ref) {
          props.classes;
              var innerRef = props.innerRef,
              other = _objectWithoutProperties(props, ["classes", "innerRef"]); // The wrapper receives only user supplied props, which could be a subset of
          // the actual props Component might receive due to merging with defaultProps.
          // So copying it here would give us the same result in the wrapper as well.


          var classes = useStyles(_extends$3({}, Component.defaultProps, props));
          var theme;
          var more = other;

          if (typeof name === 'string' || withTheme) {
            // name and withTheme are invariant in the outer scope
            // eslint-disable-next-line react-hooks/rules-of-hooks
            theme = useTheme$1() || defaultTheme;

            if (name) {
              more = getThemeProps({
                theme: theme,
                name: name,
                props: other
              });
            } // Provide the theme to the wrapped component.
            // So we don't have to use the `withTheme()` Higher-order Component.


            if (withTheme && !more.theme) {
              more.theme = theme;
            }
          }

          return /*#__PURE__*/React__default['default'].createElement(Component, _extends$3({
            ref: innerRef || ref,
            classes: classes
          }, more));
        });
        process.env.NODE_ENV !== "production" ? WithStyles.propTypes = {
          /**
           * Override or extend the styles applied to the component.
           */
          classes: propTypes.object,

          /**
           * Use that prop to pass a ref to the decorated component.
           * @deprecated
           */
          innerRef: chainPropTypes(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
            if (props.innerRef == null) {
              return null;
            }

            return null; // return new Error(
            //   'Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' +
            //     'Refs are now automatically forwarded to the inner component.',
            // );
          })
        } : void 0;

        if (process.env.NODE_ENV !== 'production') {
          WithStyles.displayName = "WithStyles(".concat(getDisplayName(Component), ")");
        }

        hoistNonReactStatics_cjs(WithStyles, Component);

        if (process.env.NODE_ENV !== 'production') {
          // Exposed for test purposes.
          WithStyles.Naked = Component;
          WithStyles.options = options;
          WithStyles.useStyles = useStyles;
        }

        return WithStyles;
      };
    };

    var ThemeMaker = function (_a) {
        var children = _a.children;
        var theme = themeLanguage.useThemeObject();
        return (React__default['default'].createElement(StylesProvider, { injectFirst: true },
            React__default['default'].createElement(ThemeProvider, { theme: theme }, children)));
    };

    var vtStoreTableSize = {
        currentWidths: {},
        totalWidth: 0,
        setSizes: easyPeasy.action(function (state, _a) {
            var totalWidth = _a.totalWidth, currentWidths = _a.currentWidths;
            state.currentWidths = currentWidths;
            state.totalWidth = totalWidth;
        }),
        setCurrentWidth: easyPeasy.action(function (state, _a) {
            var currentWidths = _a.currentWidths;
            state.currentWidths = currentWidths;
        }),
        setTotalWidth: easyPeasy.action(function (state, _a) {
            var totalWidth = _a.totalWidth;
            state.totalWidth = totalWidth;
        }),
    };

    var TableSizeActionContext$1 = React.createContext({});
    var TableSizeStateContext = React.createContext({});
    // export const TableSizeProvider: FC = ({ children }) => {
    //   const easyPeasyStore = useStore<VTStoreTableSize>();
    //   const isWrapepdWithVTSizeProvider = easyPeasyStore?.getState()?.VTSizeVersion;
    //   if (isWrapepdWithVTSizeProvider) {
    //     return <>{children}</>;
    //   }
    //   return <StoreProvider store={vtStoreTableSize}>{children}</StoreProvider>;
    // };
    function TableSizeProvider(_a) {
        var children = _a.children;
        var _b = easyPeasy.useLocalStore(function () { return vtStoreTableSize; }), state = _b[0], actions = _b[1];
        return (React__default['default'].createElement(TableSizeStateContext.Provider, { value: { state: state } },
            React__default['default'].createElement(TableSizeActionContext$1.Provider, { value: { actions: actions } }, children)));
    }
    function useTableSizeState() {
        var state = React.useContext(TableSizeStateContext).state;
        if (!state) {
            throw Error("use state inside provider");
        }
        return state;
    }
    function useTableSizeAction() {
        var actions = React.useContext(TableSizeActionContext$1).actions;
        if (!actions) {
            throw Error("use state inside provider");
        }
        return actions;
    }

    var TableSizeActionContext = React.createContext({});
    var TableRowStateContext = React.createContext({});
    function TableRowProvider(_a) {
        var children = _a.children;
        // const [state, actions] = useLocalStore(() => vtStoreTableSize);
        var _b = React.useState({
            activeRow: -1,
        }), state = _b[0], setState = _b[1];
        var setActiveRow = React.useCallback(function (index) {
            setState({ activeRow: index });
        }, []);
        return (React__default['default'].createElement(TableRowStateContext.Provider, { value: state },
            React__default['default'].createElement(TableSizeActionContext.Provider, { value: setActiveRow }, children)));
    }
    function useTableRowState() {
        var state = React.useContext(TableRowStateContext);
        if (!state) {
            throw Error("use state inside provider");
        }
        return state;
    }
    function useTableRowAction() {
        var actions = React.useContext(TableSizeActionContext);
        if (!actions) {
            throw Error("use state inside provider");
        }
        return actions;
    }

    var TableStoreProvider = function (_a) {
        var _b;
        var children = _a.children;
        var easyPeasyStore = easyPeasy.useStore();
        var isWrapepdWithCTProvider = (_b = easyPeasyStore === null || easyPeasyStore === void 0 ? void 0 : easyPeasyStore.getState()) === null || _b === void 0 ? void 0 : _b.VTVersion;
        if (isWrapepdWithCTProvider) {
            return React__default['default'].createElement(React__default['default'].Fragment, null, children);
        }
        return (React__default['default'].createElement(TableSizeProvider, null,
            React__default['default'].createElement(TableRowProvider, null,
                React__default['default'].createElement(easyPeasy.StoreProvider, { store: store }, children))));
    };
    var Provider = function (_a) {
        var children = _a.children, direction = _a.direction, language = _a.language, theme = _a.theme;
        return (React__default['default'].createElement(themeLanguage.StyleProvider, { language: language, direction: direction, theme: theme },
            React__default['default'].createElement(ThemeMaker, null, children)));
    };

    var DRAG_CLASS = "HESABA_DRAG_HANDLER";
    var HESABA_TABLE_HEADER_CLASS = "HESABA_TABLE_HEADER_CLASS";
    var HESABA_TABLE_ROW_CLASS = "HESABA_TABLE_ROW_CLASS";
    var HESABA_DATA_FIELD = "HESABA_DATA_FIELD";
    var DATA_FIELD = "data-field";
    var MAIN_LIST_ID = "MainVirtualListId";

    var commonSidebar = {
        panelHeight: 200,
        itemHeight: 50,
    };
    var MIN_TABLE_WIDTH = 24;
    var RESIZE_HANDLE_WIDTH = 24;
    var ROW_MIN_WIDTH = 100;
    var CHECKBOX_SIZE = 48;
    var DEFAULT_PAGINATION_HEIGHT = 70;
    var DEFAULT_TOOLBAR_HEIGHT = 70;

    // import { useStoreState } from "../store/reducerHooks";
    var useTableResizer = function () {
        var columnElements = React.useRef();
        var headers = React.useRef();
        var rowRef = React.useRef();
        var direction = themeLanguage.useLanguageState().direction;
        // const placeholderCellRef = useRef<QuerySelectType>();
        var dirRef = React.useRef(direction);
        var currentWidths = React.useRef({});
        var totalWidth = React.useRef(0);
        var currentField = React.useRef();
        var setSizes = useTableSizeAction().setSizes;
        var tableRef = React.useRef();
        // const dir = useStoreState((state) => state.settings.direction);
        var _a = React.useMemo(function () {
            var init = function () {
                var _a, _b;
                // if (!headers.current) {
                headers.current = (_a = tableRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll("." + HESABA_TABLE_HEADER_CLASS);
                rowRef.current = (_b = tableRef.current) === null || _b === void 0 ? void 0 : _b.querySelectorAll("." + HESABA_TABLE_ROW_CLASS);
                // }
            };
            var onMouseDown = function (e) {
                var _a;
                init();
                var div = e.target;
                if (!div.classList.contains(DRAG_CLASS))
                    return;
                var parent = div.previousElementSibling;
                if (!parent)
                    return;
                currentField.current = parent.getAttribute(DATA_FIELD);
                //   columnElements.current = el as HTMLElement;
                window.addEventListener("mousemove", onMouseMove);
                window.addEventListener("mouseup", onMouseUp);
                columnElements.current = (_a = tableRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll("[" + DATA_FIELD + "=\"" + currentField.current + "\"]");
            };
            var onMouseMove = function (e) {
                if (!columnElements.current ||
                    columnElements.current.length === 0 ||
                    !headers.current ||
                    headers.current.length === 0 ||
                    !tableRef ||
                    !rowRef.current)
                    return;
                var newWidth = MIN_TABLE_WIDTH;
                if (dirRef.current === "rtl") {
                    var right = columnElements.current[0].getBoundingClientRect().right;
                    newWidth = Math.max(-e.clientX + right, MIN_TABLE_WIDTH);
                }
                else {
                    var left = columnElements.current[0].getBoundingClientRect().left;
                    newWidth = Math.max(e.clientX - left, MIN_TABLE_WIDTH);
                }
                var headerWidth = 0;
                headers.current.forEach(function (el) {
                    return (headerWidth +=
                        el.getBoundingClientRect().width + RESIZE_HANDLE_WIDTH);
                });
                totalWidth.current = headerWidth;
                columnElements.current.forEach(function (el, index) {
                    if (index === 0) {
                        el.style.width = newWidth + "px";
                        el.style.minWidth = newWidth + "px";
                        el.style.maxWidth = newWidth + "px";
                    }
                    else {
                        el.style.width = newWidth + RESIZE_HANDLE_WIDTH + "px";
                        el.style.minWidth = newWidth + RESIZE_HANDLE_WIDTH + "px";
                        el.style.maxWidth = newWidth + RESIZE_HANDLE_WIDTH + "px";
                    }
                });
                // rowRef.current.forEach((el) => {
                //   el.style.width = `${headerWidth}px`;
                //   el.style.minWidth = `${headerWidth}px`;
                //   el.style.maxWidth = `${headerWidth}px`;
                // });
            };
            var onMouseUp = function (e) {
                window.removeEventListener("mousemove", onMouseMove);
                window.removeEventListener("mouseup", onMouseUp);
                if (!currentField.current ||
                    !columnElements.current ||
                    columnElements.current.length === 0)
                    return;
                if (dirRef.current === "rtl") {
                    currentWidths.current[currentField.current] =
                        -e.clientX + columnElements.current[0].getBoundingClientRect().right;
                }
                else {
                    currentWidths.current[currentField.current] =
                        e.clientX - columnElements.current[0].getBoundingClientRect().left;
                }
                setSizes({
                    totalWidth: totalWidth.current,
                    currentWidths: currentWidths.current,
                });
            };
            var removeMouseDown = function (table) {
                table.removeEventListener("mousedown", onMouseDown);
            };
            var addMouseDownListerner = function (table) {
                table.addEventListener("mousedown", onMouseDown);
            };
            var setTableRef = function (ref) {
                if (ref) {
                    tableRef.current = ref;
                    addMouseDownListerner(tableRef.current);
                }
            };
            return [setTableRef, removeMouseDown];
        }, []), setTableRef = _a[0], removeMouseDownListerner = _a[1];
        React.useEffect(function () {
            return function () {
                tableRef.current && removeMouseDownListerner(tableRef.current);
            };
        }, [removeMouseDownListerner]);
        React.useEffect(function () {
            dirRef.current = direction;
        }, [direction]);
        return { setTableRef: setTableRef, tableRef: tableRef };
    };

    // import { VTStoreTableSize } from "./tableSize";
    var typedHooks = easyPeasy.createTypedHooks();
    var useTStoreActions = typedHooks.useStoreActions;
    var useStoreDispatch = typedHooks.useStoreDispatch;
    var useTStoreState = typedHooks.useStoreState;
    var useStore = typedHooks.useStore;
    // const typedHooksTableSize = createTypedHooks<VTStoreTableSize>();
    // export const useTableSizeStoreActions = typedHooksTableSize.useStoreActions;
    // export const useTableSizeStoreDispatch = typedHooksTableSize.useStoreDispatch;
    // export const useTableSizeStoreState = typedHooksTableSize.useStoreState;
    // export const useTableSizeStore = typedHooksTableSize.useStore;

    function createEnhancedColumns(columns) {
        return columns.map(function (c) {
            var _a;
            var _b;
            return (__assign(__assign({}, c), (_a = {}, _a[DATA_FIELD] = HESABA_DATA_FIELD + "-" + c.key, _a.visible = true, _a.sticky = false, _a.sorted = undefined, _a.type = (_b = c === null || c === void 0 ? void 0 : c.type) !== null && _b !== void 0 ? _b : "string", _a)));
        });
    }
    function createEnhancedRows(rows) {
        return rows.map(function (r, index) { return (__assign({ id: index, selected: false }, r)); });
    }
    function parseTableData(columns, rows) {
        var enhancedColumns = createEnhancedColumns(columns);
        var visibleRows = createEnhancedRows(rows);
        return { enhancedColumns: enhancedColumns, visibleRows: visibleRows };
    }
    function useTableData(columns, rows, tableDataParser) {
        var setTableData = useTStoreActions(function (actions) { return actions.setTableData; });
        React.useEffect(function () {
            if (tableDataParser)
                setTableData(tableDataParser(columns, rows));
            else
                setTableData(parseTableData(columns, rows));
        }, [columns, rows, tableDataParser]);
    }

    var common = {
      black: '#000',
      white: '#fff'
    };

    var red = {
      50: '#ffebee',
      100: '#ffcdd2',
      200: '#ef9a9a',
      300: '#e57373',
      400: '#ef5350',
      500: '#f44336',
      600: '#e53935',
      700: '#d32f2f',
      800: '#c62828',
      900: '#b71c1c',
      A100: '#ff8a80',
      A200: '#ff5252',
      A400: '#ff1744',
      A700: '#d50000'
    };

    var pink = {
      50: '#fce4ec',
      100: '#f8bbd0',
      200: '#f48fb1',
      300: '#f06292',
      400: '#ec407a',
      500: '#e91e63',
      600: '#d81b60',
      700: '#c2185b',
      800: '#ad1457',
      900: '#880e4f',
      A100: '#ff80ab',
      A200: '#ff4081',
      A400: '#f50057',
      A700: '#c51162'
    };

    var indigo = {
      50: '#e8eaf6',
      100: '#c5cae9',
      200: '#9fa8da',
      300: '#7986cb',
      400: '#5c6bc0',
      500: '#3f51b5',
      600: '#3949ab',
      700: '#303f9f',
      800: '#283593',
      900: '#1a237e',
      A100: '#8c9eff',
      A200: '#536dfe',
      A400: '#3d5afe',
      A700: '#304ffe'
    };

    var blue = {
      50: '#e3f2fd',
      100: '#bbdefb',
      200: '#90caf9',
      300: '#64b5f6',
      400: '#42a5f5',
      500: '#2196f3',
      600: '#1e88e5',
      700: '#1976d2',
      800: '#1565c0',
      900: '#0d47a1',
      A100: '#82b1ff',
      A200: '#448aff',
      A400: '#2979ff',
      A700: '#2962ff'
    };

    var green = {
      50: '#e8f5e9',
      100: '#c8e6c9',
      200: '#a5d6a7',
      300: '#81c784',
      400: '#66bb6a',
      500: '#4caf50',
      600: '#43a047',
      700: '#388e3c',
      800: '#2e7d32',
      900: '#1b5e20',
      A100: '#b9f6ca',
      A200: '#69f0ae',
      A400: '#00e676',
      A700: '#00c853'
    };

    var orange = {
      50: '#fff3e0',
      100: '#ffe0b2',
      200: '#ffcc80',
      300: '#ffb74d',
      400: '#ffa726',
      500: '#ff9800',
      600: '#fb8c00',
      700: '#f57c00',
      800: '#ef6c00',
      900: '#e65100',
      A100: '#ffd180',
      A200: '#ffab40',
      A400: '#ff9100',
      A700: '#ff6d00'
    };

    var grey = {
      50: '#fafafa',
      100: '#f5f5f5',
      200: '#eeeeee',
      300: '#e0e0e0',
      400: '#bdbdbd',
      500: '#9e9e9e',
      600: '#757575',
      700: '#616161',
      800: '#424242',
      900: '#212121',
      A100: '#d5d5d5',
      A200: '#aaaaaa',
      A400: '#303030',
      A700: '#616161'
    };

    /* eslint-disable no-use-before-define */

    /**
     * Returns a number whose value is limited to the given range.
     *
     * @param {number} value The value to be clamped
     * @param {number} min The lower boundary of the output range
     * @param {number} max The upper boundary of the output range
     * @returns {number} A number in the range [min, max]
     */
    function clamp(value) {
      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (process.env.NODE_ENV !== 'production') {
        if (value < min || value > max) {
          console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
        }
      }

      return Math.min(Math.max(min, value), max);
    }
    /**
     * Converts a color from CSS hex format to CSS rgb format.
     *
     * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
     * @returns {string} A CSS rgb color string
     */


    function hexToRgb(color) {
      color = color.substr(1);
      var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
      var colors = color.match(re);

      if (colors && colors[0].length === 1) {
        colors = colors.map(function (n) {
          return n + n;
        });
      }

      return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
      }).join(', '), ")") : '';
    }
    /**
     * Converts a color from hsl format to rgb format.
     *
     * @param {string} color - HSL color values
     * @returns {string} rgb color values
     */

    function hslToRgb(color) {
      color = decomposeColor(color);
      var _color = color,
          values = _color.values;
      var h = values[0];
      var s = values[1] / 100;
      var l = values[2] / 100;
      var a = s * Math.min(l, 1 - l);

      var f = function f(n) {
        var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      };

      var type = 'rgb';
      var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

      if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
      }

      return recomposeColor({
        type: type,
        values: rgb
      });
    }
    /**
     * Returns an object with the type and values of a color.
     *
     * Note: Does not support rgb % values.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {object} - A MUI color object: {type: string, values: number[]}
     */

    function decomposeColor(color) {
      // Idempotent
      if (color.type) {
        return color;
      }

      if (color.charAt(0) === '#') {
        return decomposeColor(hexToRgb(color));
      }

      var marker = color.indexOf('(');
      var type = color.substring(0, marker);

      if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : formatMuiErrorMessage(3, color));
      }

      var values = color.substring(marker + 1, color.length - 1).split(',');
      values = values.map(function (value) {
        return parseFloat(value);
      });
      return {
        type: type,
        values: values
      };
    }
    /**
     * Converts a color object with type and values to a string.
     *
     * @param {object} color - Decomposed color
     * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
     * @param {array} color.values - [n,n,n] or [n,n,n,n]
     * @returns {string} A CSS color string
     */

    function recomposeColor(color) {
      var type = color.type;
      var values = color.values;

      if (type.indexOf('rgb') !== -1) {
        // Only convert the first 3 values to int (i.e. not alpha)
        values = values.map(function (n, i) {
          return i < 3 ? parseInt(n, 10) : n;
        });
      } else if (type.indexOf('hsl') !== -1) {
        values[1] = "".concat(values[1], "%");
        values[2] = "".concat(values[2], "%");
      }

      return "".concat(type, "(").concat(values.join(', '), ")");
    }
    /**
     * Calculates the contrast ratio between two colors.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} A contrast ratio value in the range 0 - 21.
     */

    function getContrastRatio(foreground, background) {
      var lumA = getLuminance(foreground);
      var lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    /**
     * The relative brightness of any point in a color space,
     * normalized to 0 for darkest black and 1 for lightest white.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} The relative brightness of the color in the range 0 - 1
     */

    function getLuminance(color) {
      color = decomposeColor(color);
      var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map(function (val) {
        val /= 255; // normalized

        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      }); // Truncate at 3 digits

      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    /**
     * Darken or lighten a color, depending on its luminance.
     * Light colors are darkened, dark colors are lightened.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function emphasize(color) {
      var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
      return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
    }
    /**
     * Set the absolute transparency of a color.
     * Any existing alpha values are overwritten.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} value - value to set the alpha channel to in the range 0 -1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function fade(color, value) {
      color = decomposeColor(color);
      value = clamp(value);

      if (color.type === 'rgb' || color.type === 'hsl') {
        color.type += 'a';
      }

      color.values[3] = value;
      return recomposeColor(color);
    }
    /**
     * Darkens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);

      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }

      return recomposeColor(color);
    }
    /**
     * Lightens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp(coefficient);

      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      }

      return recomposeColor(color);
    }

    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    var keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

    function createBreakpoints(breakpoints) {
      var _breakpoints$values = breakpoints.values,
          values = _breakpoints$values === void 0 ? {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1280,
        xl: 1920
      } : _breakpoints$values,
          _breakpoints$unit = breakpoints.unit,
          unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
          _breakpoints$step = breakpoints.step,
          step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
          other = _objectWithoutProperties(breakpoints, ["values", "unit", "step"]);

      function up(key) {
        var value = typeof values[key] === 'number' ? values[key] : key;
        return "@media (min-width:".concat(value).concat(unit, ")");
      }

      function down(key) {
        var endIndex = keys.indexOf(key) + 1;
        var upperbound = values[keys[endIndex]];

        if (endIndex === keys.length) {
          // xl down applies to all sizes
          return up('xs');
        }

        var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
        return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
      }

      function between(start, end) {
        var endIndex = keys.indexOf(end);

        if (endIndex === keys.length - 1) {
          return up(start);
        }

        return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex + 1]] === 'number' ? values[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
      }

      function only(key) {
        return between(key, key);
      }

      function width(key) {
        return values[key];
      }

      return _extends$3({
        keys: keys,
        values: values,
        up: up,
        down: down,
        between: between,
        only: only,
        width: width
      }, other);
    }

    function createMixins(breakpoints, spacing, mixins) {
      var _toolbar;

      return _extends$3({
        gutters: function gutters() {
          var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          // To deprecate in v4.1
          //       warning(
          //         false,
          //         [
          //           'Material-UI: Theme.mixins.gutters() is deprecated.',
          //           'You can use the source of the mixin directly:',
          //           `
          // paddingLeft: theme.spacing(2),
          // paddingRight: theme.spacing(2),
          // [theme.breakpoints.up('sm')]: {
          //   paddingLeft: theme.spacing(3),
          //   paddingRight: theme.spacing(3),
          // },
          // `,
          //         ].join('\n'),
          //       );
          return _extends$3({
            paddingLeft: spacing(2),
            paddingRight: spacing(2)
          }, styles, _defineProperty({}, breakpoints.up('sm'), _extends$3({
            paddingLeft: spacing(3),
            paddingRight: spacing(3)
          }, styles[breakpoints.up('sm')])));
        },
        toolbar: (_toolbar = {
          minHeight: 56
        }, _defineProperty(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
          minHeight: 48
        }), _defineProperty(_toolbar, breakpoints.up('sm'), {
          minHeight: 64
        }), _toolbar)
      }, mixins);
    }

    var light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.54)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)',
        // Text hints.
        hint: 'rgba(0, 0, 0, 0.38)'
      },
      // The color used to divide different elements.
      divider: 'rgba(0, 0, 0, 0.12)',
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common.white,
        default: grey[50]
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    var dark = {
      text: {
        primary: common.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        hint: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
      },
      divider: 'rgba(255, 255, 255, 0.12)',
      background: {
        paper: grey[800],
        default: '#303030'
      },
      action: {
        active: common.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };

    function addLightOrDark(intent, direction, shade, tonalOffset) {
      var tonalOffsetLight = tonalOffset.light || tonalOffset;
      var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === 'light') {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === 'dark') {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }

    function createPalette(palette) {
      var _palette$primary = palette.primary,
          primary = _palette$primary === void 0 ? {
        light: indigo[300],
        main: indigo[500],
        dark: indigo[700]
      } : _palette$primary,
          _palette$secondary = palette.secondary,
          secondary = _palette$secondary === void 0 ? {
        light: pink.A200,
        main: pink.A400,
        dark: pink.A700
      } : _palette$secondary,
          _palette$error = palette.error,
          error = _palette$error === void 0 ? {
        light: red[300],
        main: red[500],
        dark: red[700]
      } : _palette$error,
          _palette$warning = palette.warning,
          warning = _palette$warning === void 0 ? {
        light: orange[300],
        main: orange[500],
        dark: orange[700]
      } : _palette$warning,
          _palette$info = palette.info,
          info = _palette$info === void 0 ? {
        light: blue[300],
        main: blue[500],
        dark: blue[700]
      } : _palette$info,
          _palette$success = palette.success,
          success = _palette$success === void 0 ? {
        light: green[300],
        main: green[500],
        dark: green[700]
      } : _palette$success,
          _palette$type = palette.type,
          type = _palette$type === void 0 ? 'light' : _palette$type,
          _palette$contrastThre = palette.contrastThreshold,
          contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
          _palette$tonalOffset = palette.tonalOffset,
          tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
          other = _objectWithoutProperties(palette, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
      // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
      // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54


      function getContrastText(background) {
        var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

        if (process.env.NODE_ENV !== 'production') {
          var contrast = getContrastRatio(background, contrastText);

          if (contrast < 3) {
            console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
          }
        }

        return contrastText;
      }

      var augmentColor = function augmentColor(color) {
        var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
        var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
        var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
        color = _extends$3({}, color);

        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }

        if (!color.main) {
          throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : formatMuiErrorMessage(4, mainShade));
        }

        if (typeof color.main !== 'string') {
          throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), "` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });") : formatMuiErrorMessage(5, JSON.stringify(color.main)));
        }

        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);

        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }

        return color;
      };

      var types = {
        dark: dark,
        light: light
      };

      if (process.env.NODE_ENV !== 'production') {
        if (!types[type]) {
          console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
        }
      }

      var paletteOutput = deepmerge(_extends$3({
        // A collection of common colors.
        common: common,
        // The palette type, can be light or dark.
        type: type,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor(primary),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor(error),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor(warning),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor(info),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor(success),
        // The grey colors.
        grey: grey,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold: contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText: getContrastText,
        // Generate a rich color object.
        augmentColor: augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset: tonalOffset
      }, types[type]), other);
      return paletteOutput;
    }

    function round(value) {
      return Math.round(value * 1e5) / 1e5;
    }

    var caseAllCaps = {
      textTransform: 'uppercase'
    };
    var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    /**
     * @see @link{https://material.io/design/typography/the-type-system.html}
     * @see @link{https://material.io/design/typography/understanding-typography.html}
     */

    function createTypography(palette, typography) {
      var _ref = typeof typography === 'function' ? typography(palette) : typography,
          _ref$fontFamily = _ref.fontFamily,
          fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
          _ref$fontSize = _ref.fontSize,
          fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
          _ref$fontWeightLight = _ref.fontWeightLight,
          fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
          _ref$fontWeightRegula = _ref.fontWeightRegular,
          fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
          _ref$fontWeightMedium = _ref.fontWeightMedium,
          fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
          _ref$fontWeightBold = _ref.fontWeightBold,
          fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
          _ref$htmlFontSize = _ref.htmlFontSize,
          htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
          allVariants = _ref.allVariants,
          pxToRem2 = _ref.pxToRem,
          other = _objectWithoutProperties(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof fontSize !== 'number') {
          console.error('Material-UI: `fontSize` is required to be a number.');
        }

        if (typeof htmlFontSize !== 'number') {
          console.error('Material-UI: `htmlFontSize` is required to be a number.');
        }
      }

      var coef = fontSize / 14;

      var pxToRem = pxToRem2 || function (size) {
        return "".concat(size / htmlFontSize * coef, "rem");
      };

      var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
        return _extends$3({
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          fontSize: pxToRem(size),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight: lineHeight
        }, fontFamily === defaultFontFamily ? {
          letterSpacing: "".concat(round(letterSpacing / size), "em")
        } : {}, casing, allVariants);
      };

      var variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
      };
      return deepmerge(_extends$3({
        htmlFontSize: htmlFontSize,
        pxToRem: pxToRem,
        round: round,
        // TODO v5: remove
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontWeightLight: fontWeightLight,
        fontWeightRegular: fontWeightRegular,
        fontWeightMedium: fontWeightMedium,
        fontWeightBold: fontWeightBold
      }, variants), other, {
        clone: false // No need to clone deep

      });
    }

    var shadowKeyUmbraOpacity = 0.2;
    var shadowKeyPenumbraOpacity = 0.14;
    var shadowAmbientShadowOpacity = 0.12;

    function createShadow() {
      return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
    } // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


    var shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

    var shape = {
      borderRadius: 4
    };

    var responsivePropType = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.object, propTypes.array]) : {};

    function _arrayWithHoles$1(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit$1(arr, i) {
      var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableRest$1() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _slicedToArray$1(arr, i) {
      return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest$1();
    }

    var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];
    function createUnarySpacing(theme) {
      var themeSpacing = theme.spacing || 8;

      if (typeof themeSpacing === 'number') {
        return function (abs) {
          if (process.env.NODE_ENV !== 'production') {
            if (typeof abs !== 'number') {
              console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
            }
          }

          return themeSpacing * abs;
        };
      }

      if (Array.isArray(themeSpacing)) {
        return function (abs) {
          if (process.env.NODE_ENV !== 'production') {
            if (abs > themeSpacing.length - 1) {
              console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
            }
          }

          return themeSpacing[abs];
        };
      }

      if (typeof themeSpacing === 'function') {
        return themeSpacing;
      }

      if (process.env.NODE_ENV !== 'production') {
        console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
      }

      return function () {
        return undefined;
      };
    }

    process.env.NODE_ENV !== 'production' ? spacingKeys.reduce(function (obj, key) {
      obj[key] = responsivePropType;
      return obj;
    }, {}) : {};

    var warnOnce;
    function createSpacing() {
      var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

      // Already transformed.
      if (spacingInput.mui) {
        return spacingInput;
      } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
      // Smaller components, such as icons and type, can align to a 4dp grid.
      // https://material.io/design/layout/understanding-layout.html#usage


      var transform = createUnarySpacing({
        spacing: spacingInput
      });

      var spacing = function spacing() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (process.env.NODE_ENV !== 'production') {
          if (!(args.length <= 4)) {
            console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
          }
        }

        if (args.length === 0) {
          return transform(1);
        }

        if (args.length === 1) {
          return transform(args[0]);
        }

        return args.map(function (argument) {
          if (typeof argument === 'string') {
            return argument;
          }

          var output = transform(argument);
          return typeof output === 'number' ? "".concat(output, "px") : output;
        }).join(' ');
      }; // Backward compatibility, to remove in v5.


      Object.defineProperty(spacing, 'unit', {
        get: function get() {
          if (process.env.NODE_ENV !== 'production') {
            if (!warnOnce || process.env.NODE_ENV === 'test') {
              console.error(['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
            }

            warnOnce = true;
          }

          return spacingInput;
        }
      });
      spacing.mui = true;
      return spacing;
    }

    // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
    // to learn the context in which each easing should be used.
    var easing = {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
    }; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    // to learn when use what timing

    var duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };

    function formatMs(milliseconds) {
      return "".concat(Math.round(milliseconds), "ms");
    }
    /**
     * @param {string|Array} props
     * @param {object} param
     * @param {string} param.prop
     * @param {number} param.duration
     * @param {string} param.easing
     * @param {number} param.delay
     */


    var transitions = {
      easing: easing,
      duration: duration,
      create: function create() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _options$duration = options.duration,
            durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
            _options$easing = options.easing,
            easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
            _options$delay = options.delay,
            delay = _options$delay === void 0 ? 0 : _options$delay,
            other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);

        if (process.env.NODE_ENV !== 'production') {
          var isString = function isString(value) {
            return typeof value === 'string';
          };

          var isNumber = function isNumber(value) {
            return !isNaN(parseFloat(value));
          };

          if (!isString(props) && !Array.isArray(props)) {
            console.error('Material-UI: Argument "props" must be a string or Array.');
          }

          if (!isNumber(durationOption) && !isString(durationOption)) {
            console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
          }

          if (!isString(easingOption)) {
            console.error('Material-UI: Argument "easing" must be a string.');
          }

          if (!isNumber(delay) && !isString(delay)) {
            console.error('Material-UI: Argument "delay" must be a number or a string.');
          }

          if (Object.keys(other).length !== 0) {
            console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
          }
        }

        return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
          return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
        }).join(',');
      },
      getAutoHeightDuration: function getAutoHeightDuration(height) {
        if (!height) {
          return 0;
        }

        var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

        return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
      }
    };

    // We need to centralize the zIndex definitions as they work
    // like global values in the browser.
    var zIndex = {
      mobileStepper: 1000,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };

    function createMuiTheme() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _options$breakpoints = options.breakpoints,
          breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
          _options$mixins = options.mixins,
          mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
          _options$palette = options.palette,
          paletteInput = _options$palette === void 0 ? {} : _options$palette,
          spacingInput = options.spacing,
          _options$typography = options.typography,
          typographyInput = _options$typography === void 0 ? {} : _options$typography,
          other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);

      var palette = createPalette(paletteInput);
      var breakpoints = createBreakpoints(breakpointsInput);
      var spacing = createSpacing(spacingInput);
      var muiTheme = deepmerge({
        breakpoints: breakpoints,
        direction: 'ltr',
        mixins: createMixins(breakpoints, spacing, mixinsInput),
        overrides: {},
        // Inject custom styles
        palette: palette,
        props: {},
        // Provide default props
        shadows: shadows,
        typography: createTypography(palette, typographyInput),
        spacing: spacing,
        shape: shape,
        transitions: transitions,
        zIndex: zIndex
      }, other);

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      muiTheme = args.reduce(function (acc, argument) {
        return deepmerge(acc, argument);
      }, muiTheme);

      if (process.env.NODE_ENV !== 'production') {
        var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

        var traverse = function traverse(node, parentKey) {
          var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
          var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

          for (key in node) {
            var child = node[key];

            if (depth === 1) {
              if (key.indexOf('Mui') === 0 && child) {
                traverse(child, key, depth + 1);
              }
            } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
              if (process.env.NODE_ENV !== 'production') {
                console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
                  root: _defineProperty({}, "&$".concat(key), child)
                }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
              } // Remove the style to prevent global conflicts.


              node[key] = {};
            }
          }
        };

        traverse(muiTheme.overrides);
      }

      return muiTheme;
    }

    // To remove in v5

    function createStyles(styles) {
      // warning(
      //   warnOnce,
      //   [
      //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',
      //     'Please use @material-ui/styles/createStyles',
      //   ].join('\n'),
      // );
      // warnOnce = true;
      return createStyles$1(styles);
    }

    var defaultTheme = createMuiTheme();

    function makeStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return makeStyles$1(stylesOrCreator, _extends$3({
        defaultTheme: defaultTheme
      }, options));
    }

    function useTheme() {
      var theme = useTheme$1() || defaultTheme;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__default['default'].useDebugValue(theme);
      }

      return theme;
    }

    function withStyles(stylesOrCreator, options) {
      return withStyles$1(stylesOrCreator, _extends$3({
        defaultTheme: defaultTheme
      }, options));
    }

    // It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
    //
    // A strict capitalization should uppercase the first letter of each word a the sentence.
    // We only handle the first word.
    function capitalize(string) {
      if (typeof string !== 'string') {
        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: capitalize(string) expects a string argument." : formatMuiErrorMessage(7));
      }

      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Safe chained function
     *
     * Will only create a new function if needed,
     * otherwise will pass back existing functions or null.
     *
     * @param {function} functions to chain
     * @returns {function|null}
     */
    function createChainedFunction() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      return funcs.reduce(function (acc, func) {
        if (func == null) {
          return acc;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (typeof func !== 'function') {
            console.error('Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.');
          }
        }

        return function chainedFunction() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          acc.apply(this, args);
          func.apply(this, args);
        };
      }, function () {});
    }

    var styles$K = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: 'none',
          width: '1em',
          height: '1em',
          display: 'inline-block',
          fill: 'currentColor',
          flexShrink: 0,
          fontSize: theme.typography.pxToRem(24),
          transition: theme.transitions.create('fill', {
            duration: theme.transitions.duration.shorter
          })
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },

        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },

        /* Styles applied to the root element if `fontSize="inherit"`. */
        fontSizeInherit: {
          fontSize: 'inherit'
        },

        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },

        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(35)
        }
      };
    };
    var SvgIcon$1 = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'inherit' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'svg' : _props$component,
          _props$fontSize = props.fontSize,
          fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
          htmlColor = props.htmlColor,
          titleAccess = props.titleAccess,
          _props$viewBox = props.viewBox,
          viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && classes["fontSize".concat(capitalize(fontSize))]),
        focusable: "false",
        viewBox: viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
      }, other), children, titleAccess ? /*#__PURE__*/React__namespace.createElement("title", null, titleAccess) : null);
    });
    process.env.NODE_ENV !== "production" ? SvgIcon$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Node passed into the SVG element.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
       */
      color: propTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: propTypes.oneOf(['default', 'inherit', 'large', 'small']),

      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: propTypes.string,

      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this property.
       */
      shapeRendering: propTypes.string,

      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: propTypes.string,

      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       */
      viewBox: propTypes.string
    } : void 0;
    SvgIcon$1.muiName = 'SvgIcon';
    var SvgIcon$2 = withStyles(styles$K, {
      name: 'MuiSvgIcon'
    })(SvgIcon$1);

    /**
     * Private module reserved for @material-ui/x packages.
     */

    function createSvgIcon(path, displayName) {
      var Component = function Component(props, ref) {
        return /*#__PURE__*/React__default['default'].createElement(SvgIcon$2, _extends$3({
          ref: ref
        }, props), path);
      };

      if (process.env.NODE_ENV !== 'production') {
        // Need to set `displayName` on the inner component for React.memo.
        // React prior to 16.14 ignores `displayName` on the wrapper.
        Component.displayName = "".concat(displayName, "Icon");
      }

      Component.muiName = SvgIcon$2.muiName;
      return /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef(Component));
    }

    // Corresponds to 10 frames at 60 Hz.
    // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
    function debounce$1(func) {
      var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
      var timeout;

      function debounced() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        // eslint-disable-next-line consistent-this
        var that = this;

        var later = function later() {
          func.apply(that, args);
        };

        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }

      debounced.clear = function () {
        clearTimeout(timeout);
      };

      return debounced;
    }

    function isMuiElement(element, muiNames) {
      return /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }

    function ownerDocument(node) {
      return node && node.ownerDocument || document;
    }

    function ownerWindow(node) {
      var doc = ownerDocument(node);
      return doc.defaultView || window;
    }

    // TODO v5: consider to make it private
    function setRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }

    function unsupportedProp(props, propName, componentName, location, propFullName) {
      if (process.env.NODE_ENV === 'production') {
        return null;
      }

      var propFullNameSafe = propFullName || propName;

      if (typeof props[propName] !== 'undefined') {
        return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
      }

      return null;
    }

    /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
    function useControlled(_ref) {
      var controlled = _ref.controlled,
          defaultProp = _ref.default,
          name = _ref.name,
          _ref$state = _ref.state,
          state = _ref$state === void 0 ? 'value' : _ref$state;

      var _React$useRef = React__namespace.useRef(controlled !== undefined),
          isControlled = _React$useRef.current;

      var _React$useState = React__namespace.useState(defaultProp),
          valueState = _React$useState[0],
          setValue = _React$useState[1];

      var value = isControlled ? controlled : valueState;

      if (process.env.NODE_ENV !== 'production') {
        React__namespace.useEffect(function () {
          if (isControlled !== (controlled !== undefined)) {
            console.error(["Material-UI: A component is changing the ".concat(isControlled ? '' : 'un', "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? 'un' : '', "controlled."), 'Elements should not switch from uncontrolled to controlled (or vice versa).', "Decide between using a controlled or uncontrolled ".concat(name, " ") + 'element for the lifetime of the component.', "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
          }
        }, [controlled]);

        var _React$useRef2 = React__namespace.useRef(defaultProp),
            defaultValue = _React$useRef2.current;

        React__namespace.useEffect(function () {
          if (!isControlled && defaultValue !== defaultProp) {
            console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join('\n'));
          }
        }, [JSON.stringify(defaultProp)]);
      }

      var setValueIfUncontrolled = React__namespace.useCallback(function (newValue) {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }

    var useEnhancedEffect$7 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    /**
     * https://github.com/facebook/react/issues/14099#issuecomment-440013892
     *
     * @param {function} fn
     */

    function useEventCallback(fn) {
      var ref = React__namespace.useRef(fn);
      useEnhancedEffect$7(function () {
        ref.current = fn;
      });
      return React__namespace.useCallback(function () {
        return (ref.current).apply(void 0, arguments);
      }, []);
    }

    function useForkRef(refA, refB) {
      /**
       * This will create a new function if the ref props change and are defined.
       * This means react will call the old forkRef with `null` and the new forkRef
       * with the ref. Cleanup naturally emerges from this behavior
       */
      return React__namespace.useMemo(function () {
        if (refA == null && refB == null) {
          return null;
        }

        return function (refValue) {
          setRef(refA, refValue);
          setRef(refB, refValue);
        };
      }, [refA, refB]);
    }

    /**
     * Private module reserved for @material-ui/x packages.
     */

    function useId(idOverride) {
      var _React$useState = React__namespace.useState(idOverride),
          defaultId = _React$useState[0],
          setDefaultId = _React$useState[1];

      var id = idOverride || defaultId;
      React__namespace.useEffect(function () {
        if (defaultId == null) {
          // Fallback to this default id when possible.
          // Use the random value for client-side rendering only.
          // We can't use it server-side.
          setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
        }
      }, [defaultId]);
      return id;
    }

    // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = null;
    var inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };
    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} node
     * @return {boolean}
     */

    function focusTriggersKeyboardModality(node) {
      var type = node.type,
          tagName = node.tagName;

      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
        return true;
      }

      if (tagName === 'TEXTAREA' && !node.readOnly) {
        return true;
      }

      if (node.isContentEditable) {
        return true;
      }

      return false;
    }
    /**
     * Keep track of our keyboard modality state with `hadKeyboardEvent`.
     * If the most recent user interaction was via the keyboard;
     * and the key press did not include a meta, alt/option, or control key;
     * then the modality is keyboard. Otherwise, the modality is not keyboard.
     * @param {KeyboardEvent} event
     */


    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }

      hadKeyboardEvent = true;
    }
    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     */


    function handlePointerDown() {
      hadKeyboardEvent = false;
    }

    function handleVisibilityChange() {
      if (this.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }

    function prepare(doc) {
      doc.addEventListener('keydown', handleKeyDown, true);
      doc.addEventListener('mousedown', handlePointerDown, true);
      doc.addEventListener('pointerdown', handlePointerDown, true);
      doc.addEventListener('touchstart', handlePointerDown, true);
      doc.addEventListener('visibilitychange', handleVisibilityChange, true);
    }

    function isFocusVisible(event) {
      var target = event.target;

      try {
        return target.matches(':focus-visible');
      } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
      // we use our own heuristic for those browsers
      // rethrow might be better if it's not the expected error but do we really
      // want to crash if focus-visible malfunctioned?
      // no need for validFocusTarget check. the user does that by attaching it to
      // focusable events only


      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    /**
     * Should be called if a blur event is fired on a focus-visible element
     */


    function handleBlurVisible() {
      // To detect a tab/window switch, we look for a blur event followed
      // rapidly by a visibility change.
      // If we don't see a visibility change within 100ms, it's probably a
      // regular focus change.
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
        hadFocusVisibleRecently = false;
      }, 100);
    }

    function useIsFocusVisible() {
      var ref = React__namespace.useCallback(function (instance) {
        var node = ReactDOM__namespace.findDOMNode(instance);

        if (node != null) {
          prepare(node.ownerDocument);
        }
      }, []);

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue(isFocusVisible);
      }

      return {
        isFocusVisible: isFocusVisible,
        onBlurVisible: handleBlurVisible,
        ref: ref
      };
    }

    /** @license React v17.0.2
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;
    if("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element");c=x("react.portal");d=x("react.fragment");e=x("react.strict_mode");f=x("react.profiler");g=x("react.provider");h=x("react.context");k=x("react.forward_ref");l=x("react.suspense");m=x("react.suspense_list");n=x("react.memo");p=x("react.lazy");q=x("react.block");r=x("react.server.block");u=x("react.fundamental");v=x("react.debug_trace_mode");w=x("react.legacy_hidden");}
    function y(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D$1=p,E=n,F=c,G=f,H=e,I=l;var ContextConsumer=h;var ContextProvider=z;var Element$1=A;var ForwardRef=B;var Fragment=C;var Lazy=D$1;var Memo=E;var Portal$1=F;var Profiler=G;var StrictMode=H;
    var Suspense=I;var isAsyncMode=function(){return !1};var isConcurrentMode=function(){return !1};var isContextConsumer=function(a){return y(a)===h};var isContextProvider=function(a){return y(a)===g};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};var isForwardRef=function(a){return y(a)===k};var isFragment=function(a){return y(a)===d};var isLazy=function(a){return y(a)===p};var isMemo=function(a){return y(a)===n};
    var isPortal=function(a){return y(a)===c};var isProfiler=function(a){return y(a)===f};var isStrictMode=function(a){return y(a)===e};var isSuspense=function(a){return y(a)===l};var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};
    var typeOf=y;

    var reactIs_production_min = {
    	ContextConsumer: ContextConsumer,
    	ContextProvider: ContextProvider,
    	Element: Element$1,
    	ForwardRef: ForwardRef,
    	Fragment: Fragment,
    	Lazy: Lazy,
    	Memo: Memo,
    	Portal: Portal$1,
    	Profiler: Profiler,
    	StrictMode: StrictMode,
    	Suspense: Suspense,
    	isAsyncMode: isAsyncMode,
    	isConcurrentMode: isConcurrentMode,
    	isContextConsumer: isContextConsumer,
    	isContextProvider: isContextProvider,
    	isElement: isElement,
    	isForwardRef: isForwardRef,
    	isFragment: isFragment,
    	isLazy: isLazy,
    	isMemo: isMemo,
    	isPortal: isPortal,
    	isProfiler: isProfiler,
    	isStrictMode: isStrictMode,
    	isSuspense: isSuspense,
    	isValidElementType: isValidElementType,
    	typeOf: typeOf
    };

    /** @license React v17.0.2
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var reactIs_development = createCommonjsModule(function (module, exports) {

    if (process.env.NODE_ENV !== "production") {
      (function() {

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      symbolFor('react.scope');
      symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }

    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

    var enableScopeAPI = false; // Experimental Create Event Handle API.

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
          return true;
        }
      }

      return false;
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
      })();
    }
    });

    var reactIs = createCommonjsModule(function (module) {

    if (process.env.NODE_ENV === 'production') {
      module.exports = reactIs_production_min;
    } else {
      module.exports = reactIs_development;
    }
    });

    /**
     * Checks if a given element has a CSS class.
     * 
     * @param element the element
     * @param className the CSS class name
     */
    function hasClass(element, className) {
      if (element.classList) return !!className && element.classList.contains(className);
      return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    }

    /**
     * Adds a CSS class to a given element.
     * 
     * @param element the element
     * @param className the CSS class name
     */

    function addClass(element, className) {
      if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }

    function replaceClassName(origClass, classToRemove) {
      return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
    }
    /**
     * Removes a CSS class from a given element.
     * 
     * @param element the element
     * @param className the CSS class name
     */


    function removeClass$1(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (typeof element.className === 'string') {
        element.className = replaceClassName(element.className, className);
      } else {
        element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
      }
    }

    var config = {
      disabled: false
    };

    var timeoutsShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.shape({
      enter: propTypes.number,
      exit: propTypes.number,
      appear: propTypes.number
    }).isRequired]) : null;
    var classNamesShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.string, propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string,
      active: propTypes.string
    }), propTypes.shape({
      enter: propTypes.string,
      enterDone: propTypes.string,
      enterActive: propTypes.string,
      exit: propTypes.string,
      exitDone: propTypes.string,
      exitActive: propTypes.string
    })]) : null;

    var TransitionGroupContext = React__default['default'].createContext(null);

    var UNMOUNTED = 'unmounted';
    var EXITED = 'exited';
    var ENTERING = 'entering';
    var ENTERED = 'entered';
    var EXITING = 'exiting';
    /**
     * The Transition component lets you describe a transition from one component
     * state to another _over time_ with a simple declarative API. Most commonly
     * it's used to animate the mounting and unmounting of a component, but can also
     * be used to describe in-place transition states as well.
     *
     * ---
     *
     * **Note**: `Transition` is a platform-agnostic base component. If you're using
     * transitions in CSS, you'll probably want to use
     * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
     * instead. It inherits all the features of `Transition`, but contains
     * additional features necessary to play nice with CSS transitions (hence the
     * name of the component).
     *
     * ---
     *
     * By default the `Transition` component does not alter the behavior of the
     * component it renders, it only tracks "enter" and "exit" states for the
     * components. It's up to you to give meaning and effect to those states. For
     * example we can add styles to a component when it enters or exits:
     *
     * ```jsx
     * import { Transition } from 'react-transition-group';
     *
     * const duration = 300;
     *
     * const defaultStyle = {
     *   transition: `opacity ${duration}ms ease-in-out`,
     *   opacity: 0,
     * }
     *
     * const transitionStyles = {
     *   entering: { opacity: 1 },
     *   entered:  { opacity: 1 },
     *   exiting:  { opacity: 0 },
     *   exited:  { opacity: 0 },
     * };
     *
     * const Fade = ({ in: inProp }) => (
     *   <Transition in={inProp} timeout={duration}>
     *     {state => (
     *       <div style={{
     *         ...defaultStyle,
     *         ...transitionStyles[state]
     *       }}>
     *         I'm a fade Transition!
     *       </div>
     *     )}
     *   </Transition>
     * );
     * ```
     *
     * There are 4 main states a Transition can be in:
     *  - `'entering'`
     *  - `'entered'`
     *  - `'exiting'`
     *  - `'exited'`
     *
     * Transition state is toggled via the `in` prop. When `true` the component
     * begins the "Enter" stage. During this stage, the component will shift from
     * its current transition state, to `'entering'` for the duration of the
     * transition and then to the `'entered'` stage once it's complete. Let's take
     * the following example (we'll use the
     * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <Transition in={inProp} timeout={500}>
     *         {state => (
     *           // ...
     *         )}
     *       </Transition>
     *       <button onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the button is clicked the component will shift to the `'entering'` state
     * and stay there for 500ms (the value of `timeout`) before it finally switches
     * to `'entered'`.
     *
     * When `in` is `false` the same thing happens except the state moves from
     * `'exiting'` to `'exited'`.
     */

    var Transition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose$1(Transition, _React$Component);

      function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }

        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }

      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }

        return null;
      } // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }
      ;

      var _proto = Transition.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
          var status = this.state.status;

          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }

        this.updateStatus(false, nextStatus);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };

      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major

          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
          exit: exit,
          enter: enter,
          appear: appear
        };
      };

      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }

        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();

          if (nextStatus === ENTERING) {
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };

      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;

        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default['default'].findDOMNode(this), appearing],
            maybeNode = _ref2[0],
            maybeAppearing = _ref2[1];

        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if (!mounting && !enter || config.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }

        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function () {
          _this2.props.onEntering(maybeNode, maybeAppearing);

          _this2.onTransitionEnd(enterTimeout, function () {
            _this2.safeSetState({
              status: ENTERED
            }, function () {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };

      _proto.performExit = function performExit() {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default['default'].findDOMNode(this); // no exit animation skip right to EXITED

        if (!exit || config.disabled) {
          this.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
          return;
        }

        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function () {
          _this3.props.onExiting(maybeNode);

          _this3.onTransitionEnd(timeouts.exit, function () {
            _this3.safeSetState({
              status: EXITED
            }, function () {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };

      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };

      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };

      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };

        this.nextCallback.cancel = function () {
          active = false;
        };

        return this.nextCallback;
      };

      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default['default'].findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }

        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
              maybeNode = _ref3[0],
              maybeNextCallback = _ref3[1];

          this.props.addEndListener(maybeNode, maybeNextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };

      _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
          return null;
        }

        var _this$props = this.props,
            children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

        return (
          /*#__PURE__*/
          // allows for nested Transitions
          React__default['default'].createElement(TransitionGroupContext.Provider, {
            value: null
          }, typeof children === 'function' ? children(status, childProps) : React__default['default'].cloneElement(React__default['default'].Children.only(children), childProps))
        );
      };

      return Transition;
    }(React__default['default'].Component);

    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = process.env.NODE_ENV !== "production" ? {
      /**
       * A React reference to DOM element that need to transition:
       * https://stackoverflow.com/a/51127130/4671932
       *
       *   - When `nodeRef` prop is used, `node` is not passed to callback functions
       *      (e.g. `onEnter`) because user already has direct access to the node.
       *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
       *     `nodeRef` need to be provided to `Transition` with changed `key` prop
       *     (see
       *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
       */
      nodeRef: propTypes.shape({
        current: typeof Element === 'undefined' ? propTypes.any : propTypes.instanceOf(Element)
      }),

      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: propTypes.oneOfType([propTypes.func.isRequired, propTypes.element.isRequired]).isRequired,

      /**
       * Show the component; triggers the enter or exit states
       */
      in: propTypes.bool,

      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: propTypes.bool,

      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: propTypes.bool,

      /**
       * By default the child component does not perform the enter transition when
       * it first mounts, regardless of the value of `in`. If you want this
       * behavior, set both `appear` and `in` to `true`.
       *
       * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
       * > only adds an additional enter transition. However, in the
       * > `<CSSTransition>` component that first enter transition does result in
       * > additional `.appear-*` classes, that way you can choose to style it
       * > differently.
       */
      appear: propTypes.bool,

      /**
       * Enable or disable enter transitions.
       */
      enter: propTypes.bool,

      /**
       * Enable or disable exit transitions.
       */
      exit: propTypes.bool,

      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function timeout(props) {
        var pt = timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return pt.apply(void 0, [props].concat(args));
      },

      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. Timeouts are still used as a fallback if provided.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: propTypes.func,

      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: propTypes.func,

      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: propTypes.func,

      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: propTypes.func,

      /**
       * Callback fired before the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: propTypes.func,

      /**
       * Callback fired after the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: propTypes.func,

      /**
       * Callback fired after the "exited" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: propTypes.func
    } : {}; // Name the function so it is clearer in the documentation

    function noop() {}

    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop,
      onEntering: noop,
      onEntered: noop,
      onExit: noop,
      onExiting: noop,
      onExited: noop
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;

    var _addClass = function addClass$1(node, classes) {
      return node && classes && classes.split(' ').forEach(function (c) {
        return addClass(node, c);
      });
    };

    var removeClass = function removeClass(node, classes) {
      return node && classes && classes.split(' ').forEach(function (c) {
        return removeClass$1(node, c);
      });
    };
    /**
     * A transition component inspired by the excellent
     * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
     * use it if you're using CSS transitions or animations. It's built upon the
     * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
     * component, so it inherits all of its props.
     *
     * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
     * and `exit` states of the transition. The first class is applied and then a
     * second `*-active` class in order to activate the CSS transition. After the
     * transition, matching `*-done` class names are applied to persist the
     * transition state.
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
     *         <div>
     *           {"I'll receive my-node-* classes"}
     *         </div>
     *       </CSSTransition>
     *       <button type="button" onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the `in` prop is set to `true`, the child component will first receive
     * the class `example-enter`, then the `example-enter-active` will be added in
     * the next tick. `CSSTransition` [forces a
     * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
     * between before adding the `example-enter-active`. This is an important trick
     * because it allows us to transition between `example-enter` and
     * `example-enter-active` even though they were added immediately one after
     * another. Most notably, this is what makes it possible for us to animate
     * _appearance_.
     *
     * ```css
     * .my-node-enter {
     *   opacity: 0;
     * }
     * .my-node-enter-active {
     *   opacity: 1;
     *   transition: opacity 200ms;
     * }
     * .my-node-exit {
     *   opacity: 1;
     * }
     * .my-node-exit-active {
     *   opacity: 0;
     *   transition: opacity 200ms;
     * }
     * ```
     *
     * `*-active` classes represent which styles you want to animate **to**, so it's
     * important to add `transition` declaration only to them, otherwise transitions
     * might not behave as intended! This might not be obvious when the transitions
     * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
     * the example above (minus `transition`), but it becomes apparent in more
     * complex transitions.
     *
     * **Note**: If you're using the
     * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
     * prop, make sure to define styles for `.appear-*` classes as well.
     */


    var CSSTransition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose$1(CSSTransition, _React$Component);

      function CSSTransition() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };

        _this.onEnter = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument[0],
              appearing = _this$resolveArgument[1];

          _this.removeClasses(node, 'exit');

          _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };

        _this.onEntering = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument2[0],
              appearing = _this$resolveArgument2[1];

          var type = appearing ? 'appear' : 'enter';

          _this.addClass(node, type, 'active');

          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };

        _this.onEntered = function (maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
              node = _this$resolveArgument3[0],
              appearing = _this$resolveArgument3[1];

          var type = appearing ? 'appear' : 'enter';

          _this.removeClasses(node, type);

          _this.addClass(node, type, 'done');

          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };

        _this.onExit = function (maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument4[0];

          _this.removeClasses(node, 'appear');

          _this.removeClasses(node, 'enter');

          _this.addClass(node, 'exit', 'base');

          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };

        _this.onExiting = function (maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument5[0];

          _this.addClass(node, 'exit', 'active');

          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };

        _this.onExited = function (maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
              node = _this$resolveArgument6[0];

          _this.removeClasses(node, 'exit');

          _this.addClass(node, 'exit', 'done');

          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };

        _this.resolveArguments = function (maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
          : [maybeNode, maybeAppearing];
        };

        _this.getClassNames = function (type) {
          var classNames = _this.props.classNames;
          var isStringClassNames = typeof classNames === 'string';
          var prefix = isStringClassNames && classNames ? classNames + "-" : '';
          var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
          return {
            baseClassName: baseClassName,
            activeClassName: activeClassName,
            doneClassName: doneClassName
          };
        };

        return _this;
      }

      var _proto = CSSTransition.prototype;

      _proto.addClass = function addClass(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];

        var _this$getClassNames = this.getClassNames('enter'),
            doneClassName = _this$getClassNames.doneClassName;

        if (type === 'appear' && phase === 'done' && doneClassName) {
          className += " " + doneClassName;
        } // This is for to force a repaint,
        // which is necessary in order to transition styles when adding a class name.


        if (phase === 'active') {
          /* eslint-disable no-unused-expressions */
          node && node.scrollTop;
        }

        if (className) {
          this.appliedClasses[type][phase] = className;

          _addClass(node, className);
        }
      };

      _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type],
            baseClassName = _this$appliedClasses$.base,
            activeClassName = _this$appliedClasses$.active,
            doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};

        if (baseClassName) {
          removeClass(node, baseClassName);
        }

        if (activeClassName) {
          removeClass(node, activeClassName);
        }

        if (doneClassName) {
          removeClass(node, doneClassName);
        }
      };

      _proto.render = function render() {
        var _this$props = this.props;
            _this$props.classNames;
            var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

        return /*#__PURE__*/React__default['default'].createElement(Transition, _extends$3({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      };

      return CSSTransition;
    }(React__default['default'].Component);

    CSSTransition.defaultProps = {
      classNames: ''
    };
    CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends$3({}, Transition.propTypes, {
      /**
       * The animation classNames applied to the component as it appears, enters,
       * exits or has finished the transition. A single name can be provided, which
       * will be suffixed for each stage, e.g. `classNames="fade"` applies:
       *
       * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
       * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
       * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
       *
       * A few details to note about how these classes are applied:
       *
       * 1. They are _joined_ with the ones that are already defined on the child
       *    component, so if you want to add some base styles, you can use
       *    `className` without worrying that it will be overridden.
       *
       * 2. If the transition component mounts with `in={false}`, no classes are
       *    applied yet. You might be expecting `*-exit-done`, but if you think
       *    about it, a component cannot finish exiting if it hasn't entered yet.
       *
       * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
       *    allows you to define different behavior for when appearing is done and
       *    when regular entering is done, using selectors like
       *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
       *    an epic entrance animation when element first appears in the DOM using
       *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       *    simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: classNamesShape,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: propTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: propTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: propTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExit: propTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: propTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExited: propTypes.func
    }) : {};

    /**
     * Given `this.props.children`, return an object mapping key to child.
     *
     * @param {*} children `this.props.children`
     * @return {object} Mapping of key to child
     */

    function getChildMapping(children, mapFn) {
      var mapper = function mapper(child) {
        return mapFn && React.isValidElement(child) ? mapFn(child) : child;
      };

      var result = Object.create(null);
      if (children) React.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
      return result;
    }
    /**
     * When you're adding or removing children some may be added or removed in the
     * same render pass. We want to show *both* since we want to simultaneously
     * animate elements in and out. This function takes a previous set of keys
     * and a new set of keys and merges them with its best guess of the correct
     * ordering. In the future we may expose some of the utilities in
     * ReactMultiChild to make this easy, but for now React itself does not
     * directly have this concept of the union of prevChildren and nextChildren
     * so we implement it here.
     *
     * @param {object} prev prev children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @param {object} next next children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @return {object} a key set that contains all keys in `prev` and all keys
     * in `next` in a reasonable order.
     */

    function mergeChildMappings(prev, next) {
      prev = prev || {};
      next = next || {};

      function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
      } // For each key of `next`, the list of keys to insert before that key in
      // the combined list


      var nextKeysPending = Object.create(null);
      var pendingKeys = [];

      for (var prevKey in prev) {
        if (prevKey in next) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }

      var i;
      var childMapping = {};

      for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }

        childMapping[nextKey] = getValueForKey(nextKey);
      } // Finally, add the keys which didn't appear before any key in `next`


      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }

      return childMapping;
    }

    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }

    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function (child) {
        return React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, 'appear', props),
          enter: getProp(child, 'enter', props),
          exit: getProp(child, 'exit', props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!React.isValidElement(child)) return;
        var hasPrev = (key in prevChildMapping);
        var hasNext = (key in nextChildMapping);
        var prevChild = prevChildMapping[key];
        var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

        if (hasNext && (!hasPrev || isLeaving)) {
          // console.log('entering', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          // item is old (exiting)
          // console.log('leaving', key)
          children[key] = React.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
          // item hasn't changed transition states
          // copy over the last transition props;
          // console.log('unchanged', key)
          children[key] = React.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        }
      });
      return children;
    }

    var values = Object.values || function (obj) {
      return Object.keys(obj).map(function (k) {
        return obj[k];
      });
    };

    var defaultProps$1 = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      }
    };
    /**
     * The `<TransitionGroup>` component manages a set of transition components
     * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
     * components, `<TransitionGroup>` is a state machine for managing the mounting
     * and unmounting of components over time.
     *
     * Consider the example below. As items are removed or added to the TodoList the
     * `in` prop is toggled automatically by the `<TransitionGroup>`.
     *
     * Note that `<TransitionGroup>`  does not define any animation behavior!
     * Exactly _how_ a list item animates is up to the individual transition
     * component. This means you can mix and match animations across different list
     * items.
     */

    var TransitionGroup = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose$1(TransitionGroup, _React$Component);

      function TransitionGroup(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;

        var handleExited = _this.handleExited.bind(_assertThisInitialized$1(_this)); // Initial children should all be entering, dependent on appear


        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited: handleExited,
          firstRender: true
        };
        return _this;
      }

      var _proto = TransitionGroup.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };

      TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      } // node is `undefined` when user provided `nodeRef` prop
      ;

      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;

        if (child.props.onExited) {
          child.props.onExited(node);
        }

        if (this.mounted) {
          this.setState(function (state) {
            var children = _extends$3({}, state.children);

            delete children[child.key];
            return {
              children: children
            };
          });
        }
      };

      _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;

        if (Component === null) {
          return /*#__PURE__*/React__default['default'].createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }

        return /*#__PURE__*/React__default['default'].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, /*#__PURE__*/React__default['default'].createElement(Component, props, children));
      };

      return TransitionGroup;
    }(React__default['default'].Component);

    TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: propTypes.any,

      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: propTypes.node,

      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: propTypes.bool,

      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: propTypes.bool,

      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: propTypes.bool,

      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: propTypes.func
    } : {};
    TransitionGroup.defaultProps = defaultProps$1;

    var reflow = function reflow(node) {
      return node.scrollTop;
    };
    function getTransitionProps(props, options) {
      var timeout = props.timeout,
          _props$style = props.style,
          style = _props$style === void 0 ? {} : _props$style;
      return {
        duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        delay: style.transitionDelay
      };
    }

    var styles$J = function styles(theme) {
      var elevations = {};
      theme.shadows.forEach(function (shadow, index) {
        elevations["elevation".concat(index)] = {
          boxShadow: shadow
        };
      });
      return _extends$3({
        /* Styles applied to the root element. */
        root: {
          backgroundColor: theme.palette.background.paper,
          color: theme.palette.text.primary,
          transition: theme.transitions.create('box-shadow')
        },

        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          border: "1px solid ".concat(theme.palette.divider)
        }
      }, elevations);
    };
    var Paper = /*#__PURE__*/React__namespace.forwardRef(function Paper(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 1 : _props$elevation,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'elevation' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Paper.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Shadow depth, corresponds to `dp` in the spec.
       * It accepts values between 0 and 24 inclusive.
       */
      elevation: chainPropTypes(propTypes.number, function (props) {
        var classes = props.classes,
            elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning

        if (classes === undefined) {
          return null;
        }

        if (elevation != null && classes["elevation".concat(elevation)] === undefined) {
          return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
        }

        return null;
      }),

      /**
       * If `true`, rounded corners are disabled.
       */
      square: propTypes.bool,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['elevation', 'outlined'])
    } : void 0;
    var Paper$1 = withStyles(styles$J, {
      name: 'MuiPaper'
    })(Paper);

    var useEnhancedEffect$6 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * @ignore - internal component.
     */

    function Ripple(props) {
      var classes = props.classes,
          _props$pulsate = props.pulsate,
          pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
          rippleX = props.rippleX,
          rippleY = props.rippleY,
          rippleSize = props.rippleSize,
          inProp = props.in,
          _props$onExited = props.onExited,
          onExited = _props$onExited === void 0 ? function () {} : _props$onExited,
          timeout = props.timeout;

      var _React$useState = React__namespace.useState(false),
          leaving = _React$useState[0],
          setLeaving = _React$useState[1];

      var rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      var rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

      useEnhancedEffect$6(function () {
        if (!inProp) {
          // react-transition-group#onExit
          setLeaving(true); // react-transition-group#onExited

          var timeoutId = setTimeout(handleExited, timeout);
          return function () {
            clearTimeout(timeoutId);
          };
        }

        return undefined;
      }, [handleExited, inProp, timeout]);
      return /*#__PURE__*/React__namespace.createElement("span", {
        className: rippleClassName,
        style: rippleStyles
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: childClassName
      }));
    }

    process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore - injected from TransitionGroup
       */
      in: propTypes.bool,

      /**
       * @ignore - injected from TransitionGroup
       */
      onExited: propTypes.func,

      /**
       * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
       */
      pulsate: propTypes.bool,

      /**
       * Diameter of the ripple.
       */
      rippleSize: propTypes.number,

      /**
       * Horizontal position of the ripple center.
       */
      rippleX: propTypes.number,

      /**
       * Vertical position of the ripple center.
       */
      rippleY: propTypes.number,

      /**
       * exit delay
       */
      timeout: propTypes.number.isRequired
    } : void 0;

    var DURATION = 550;
    var DELAY_RIPPLE = 80;
    var styles$I = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          overflow: 'hidden',
          pointerEvents: 'none',
          position: 'absolute',
          zIndex: 0,
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: 'inherit'
        },

        /* Styles applied to the internal `Ripple` components `ripple` class. */
        ripple: {
          opacity: 0,
          position: 'absolute'
        },

        /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
        rippleVisible: {
          opacity: 0.3,
          transform: 'scale(1)',
          animation: "$enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },

        /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
        ripplePulsate: {
          animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
        },

        /* Styles applied to the internal `Ripple` components `child` class. */
        child: {
          opacity: 1,
          display: 'block',
          width: '100%',
          height: '100%',
          borderRadius: '50%',
          backgroundColor: 'currentColor'
        },

        /* Styles applied to the internal `Ripple` components `childLeaving` class. */
        childLeaving: {
          opacity: 0,
          animation: "$exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },

        /* Styles applied to the internal `Ripple` components `childPulsate` class. */
        childPulsate: {
          position: 'absolute',
          left: 0,
          top: 0,
          animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
        },
        '@keyframes enter': {
          '0%': {
            transform: 'scale(0)',
            opacity: 0.1
          },
          '100%': {
            transform: 'scale(1)',
            opacity: 0.3
          }
        },
        '@keyframes exit': {
          '0%': {
            opacity: 1
          },
          '100%': {
            opacity: 0
          }
        },
        '@keyframes pulsate': {
          '0%': {
            transform: 'scale(1)'
          },
          '50%': {
            transform: 'scale(0.92)'
          },
          '100%': {
            transform: 'scale(1)'
          }
        }
      };
    };
    /**
     * @ignore - internal component.
     *
     * TODO v5: Make private
     */

    var TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(props, ref) {
      var _props$center = props.center,
          centerProp = _props$center === void 0 ? false : _props$center,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["center", "classes", "className"]);

      var _React$useState = React__namespace.useState([]),
          ripples = _React$useState[0],
          setRipples = _React$useState[1];

      var nextKey = React__namespace.useRef(0);
      var rippleCallback = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]); // Used to filter out mouse emulated events on mobile.

      var ignoringMouseDown = React__namespace.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
      // We don't want to display the ripple for touch scroll events.

      var startTimer = React__namespace.useRef(null); // This is the hook called once the previous timeout is ready.

      var startTimerCommit = React__namespace.useRef(null);
      var container = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(startTimer.current);
        };
      }, []);
      var startCommit = React__namespace.useCallback(function (params) {
        var pulsate = params.pulsate,
            rippleX = params.rippleX,
            rippleY = params.rippleY,
            rippleSize = params.rippleSize,
            cb = params.cb;
        setRipples(function (oldRipples) {
          return [].concat(_toConsumableArray(oldRipples), [/*#__PURE__*/React__namespace.createElement(Ripple, {
            key: nextKey.current,
            classes: classes,
            timeout: DURATION,
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize
          })]);
        });
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      var start = React__namespace.useCallback(function () {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var cb = arguments.length > 2 ? arguments[2] : undefined;
        var _options$pulsate = options.pulsate,
            pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
            _options$center = options.center,
            center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
            _options$fakeElement = options.fakeElement,
            fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

        if (event.type === 'mousedown' && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }

        if (event.type === 'touchstart') {
          ignoringMouseDown.current = true;
        }

        var element = fakeElement ? null : container.current;
        var rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        }; // Get the size of the ripple

        var rippleX;
        var rippleY;
        var rippleSize;

        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          var _ref = event.touches ? event.touches[0] : event,
              clientX = _ref.clientX,
              clientY = _ref.clientY;

          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }

        if (center) {
          rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.

          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
        } // Touche devices


        if (event.touches) {
          // check that this isn't another touchstart due to multitouch
          // otherwise we will only clear a single timer when unmounting while two
          // are running
          if (startTimerCommit.current === null) {
            // Prepare the ripple effect.
            startTimerCommit.current = function () {
              startCommit({
                pulsate: pulsate,
                rippleX: rippleX,
                rippleY: rippleY,
                rippleSize: rippleSize,
                cb: cb
              });
            }; // Delay the execution of the ripple effect.


            startTimer.current = setTimeout(function () {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
          }
        } else {
          startCommit({
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize,
            cb: cb
          });
        }
      }, [centerProp, startCommit]);
      var pulsate = React__namespace.useCallback(function () {
        start({}, {
          pulsate: true
        });
      }, [start]);
      var stop = React__namespace.useCallback(function (event, cb) {
        clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
        // We still want to show ripple effect.

        if (event.type === 'touchend' && startTimerCommit.current) {
          event.persist();
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(function () {
            stop(event, cb);
          });
          return;
        }

        startTimerCommit.current = null;
        setRipples(function (oldRipples) {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }

          return oldRipples;
        });
        rippleCallback.current = cb;
      }, []);
      React__namespace.useImperativeHandle(ref, function () {
        return {
          pulsate: pulsate,
          start: start,
          stop: stop
        };
      }, [pulsate, start, stop]);
      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: clsx(classes.root, className),
        ref: container
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionGroup, {
        component: null,
        exit: true
      }, ripples));
    });
    process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
      /**
       * If `true`, the ripple starts at the center of the component
       * rather than at the point of interaction.
       */
      center: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string
    } : void 0;
    var TouchRipple$1 = withStyles(styles$I, {
      flip: false,
      name: 'MuiTouchRipple'
    })( /*#__PURE__*/React__namespace.memo(TouchRipple));

    var styles$H = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        textDecoration: 'none',
        // So we take precedent over the style of a native <a /> element.
        color: 'inherit',
        '&::-moz-focus-inner': {
          borderStyle: 'none' // Remove Firefox dotted outline.

        },
        '&$disabled': {
          pointerEvents: 'none',
          // Disable link interactions
          cursor: 'default'
        },
        '@media print': {
          colorAdjust: 'exact'
        }
      },

      /* Pseudo-class applied to the root element if `disabled={true}`. */
      disabled: {},

      /* Pseudo-class applied to the root element if keyboard focused. */
      focusVisible: {}
    };
    /**
     * `ButtonBase` contains as few styles as possible.
     * It aims to be a simple building block for creating a button.
     * It contains a load of style reset and some focus/ripple logic.
     */

    var ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(props, ref) {
      var action = props.action,
          buttonRefProp = props.buttonRef,
          _props$centerRipple = props.centerRipple,
          centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableRipple = props.disableRipple,
          disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
          _props$disableTouchRi = props.disableTouchRipple,
          disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
          _props$focusRipple = props.focusRipple,
          focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
          focusVisibleClassName = props.focusVisibleClassName,
          onBlur = props.onBlur,
          onClick = props.onClick,
          onFocus = props.onFocus,
          onFocusVisible = props.onFocusVisible,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          onMouseDown = props.onMouseDown,
          onMouseLeave = props.onMouseLeave,
          onMouseUp = props.onMouseUp,
          onTouchEnd = props.onTouchEnd,
          onTouchMove = props.onTouchMove,
          onTouchStart = props.onTouchStart,
          onDragLeave = props.onDragLeave,
          _props$tabIndex = props.tabIndex,
          tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
          TouchRippleProps = props.TouchRippleProps,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);

      var buttonRef = React__namespace.useRef(null);

      function getButtonNode() {
        // #StrictMode ready
        return ReactDOM__namespace.findDOMNode(buttonRef.current);
      }

      var rippleRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(false),
          focusVisible = _React$useState[0],
          setFocusVisible = _React$useState[1];

      if (disabled && focusVisible) {
        setFocusVisible(false);
      }

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      React__namespace.useImperativeHandle(action, function () {
        return {
          focusVisible: function focusVisible() {
            setFocusVisible(true);
            buttonRef.current.focus();
          }
        };
      }, []);
      React__namespace.useEffect(function () {
        if (focusVisible && focusRipple && !disableRipple) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible]);

      function useRippleHandler(rippleAction, eventCallback) {
        var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
        return useEventCallback(function (event) {
          if (eventCallback) {
            eventCallback(event);
          }

          var ignore = skipRippleAction;

          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }

          return true;
        });
      }

      var handleMouseDown = useRippleHandler('start', onMouseDown);
      var handleDragLeave = useRippleHandler('stop', onDragLeave);
      var handleMouseUp = useRippleHandler('stop', onMouseUp);
      var handleMouseLeave = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          event.preventDefault();
        }

        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      var handleTouchStart = useRippleHandler('start', onTouchStart);
      var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
      var handleTouchMove = useRippleHandler('stop', onTouchMove);
      var handleBlur = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          onBlurVisible(event);
          setFocusVisible(false);
        }

        if (onBlur) {
          onBlur(event);
        }
      }, false);
      var handleFocus = useEventCallback(function (event) {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }

        if (isFocusVisible(event)) {
          setFocusVisible(true);

          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }

        if (onFocus) {
          onFocus(event);
        }
      });

      var isNonNativeButton = function isNonNativeButton() {
        var button = getButtonNode();
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
      };
      /**
       * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
       */


      var keydownRef = React__namespace.useRef(false);
      var handleKeyDown = useEventCallback(function (event) {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
          keydownRef.current = true;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.start(event);
          });
        }

        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
          event.preventDefault();
        }

        if (onKeyDown) {
          onKeyDown(event);
        } // Keyboard accessibility for non interactive elements


        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
          event.preventDefault();

          if (onClick) {
            onClick(event);
          }
        }
      });
      var handleKeyUp = useEventCallback(function (event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.pulsate(event);
          });
        }

        if (onKeyUp) {
          onKeyUp(event);
        } // Keyboard accessibility for non interactive elements


        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
          onClick(event);
        }
      });
      var ComponentProp = component;

      if (ComponentProp === 'button' && other.href) {
        ComponentProp = 'a';
      }

      var buttonProps = {};

      if (ComponentProp === 'button') {
        buttonProps.type = type;
        buttonProps.disabled = disabled;
      } else {
        if (ComponentProp !== 'a' || !other.href) {
          buttonProps.role = 'button';
        }

        buttonProps['aria-disabled'] = disabled;
      }

      var handleUserRef = useForkRef(buttonRefProp, ref);
      var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
      var handleRef = useForkRef(handleUserRef, handleOwnRef);

      var _React$useState2 = React__namespace.useState(false),
          mountedState = _React$useState2[0],
          setMountedState = _React$useState2[1];

      React__namespace.useEffect(function () {
        setMountedState(true);
      }, []);
      var enableTouchRipple = mountedState && !disableRipple && !disabled;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (enableTouchRipple && !rippleRef.current) {
            console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
          }
        }, [enableTouchRipple]);
      }

      return /*#__PURE__*/React__namespace.createElement(ComponentProp, _extends$3({
        className: clsx(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
        onBlur: handleBlur,
        onClick: onClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex
      }, buttonProps, other), children, enableTouchRipple ?
      /*#__PURE__*/

      /* TouchRipple is only needed client-side, x2 boost on the server. */
      React__namespace.createElement(TouchRipple$1, _extends$3({
        ref: rippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null);
    });
    process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A ref for imperative actions.
       * It currently only supports `focusVisible()` action.
       */
      action: refType,

      /**
       * @ignore
       *
       * Use that prop to pass a ref to the native button component.
       * @deprecated Use `ref` instead.
       */
      buttonRef: refType,

      /**
       * If `true`, the ripples will be centered.
       * They won't start at the cursor interaction position.
       */
      centerRipple: propTypes.bool,

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef$1,

      /**
       * If `true`, the base button will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: propTypes.bool,

      /**
       * If `true`, the touch ripple effect will be disabled.
       */
      disableTouchRipple: propTypes.bool,

      /**
       * If `true`, the base button will have a keyboard focus ripple.
       */
      focusRipple: propTypes.bool,

      /**
       * This prop can help a person know which element has the keyboard focus.
       * The class name will be applied when the element gain the focus through a keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: propTypes.string,

      /**
       * @ignore
       */
      href: propTypes.string,

      /**
       * @ignore
       */
      onBlur: propTypes.func,

      /**
       * @ignore
       */
      onClick: propTypes.func,

      /**
       * @ignore
       */
      onDragLeave: propTypes.func,

      /**
       * @ignore
       */
      onFocus: propTypes.func,

      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: propTypes.func,

      /**
       * @ignore
       */
      onKeyDown: propTypes.func,

      /**
       * @ignore
       */
      onKeyUp: propTypes.func,

      /**
       * @ignore
       */
      onMouseDown: propTypes.func,

      /**
       * @ignore
       */
      onMouseLeave: propTypes.func,

      /**
       * @ignore
       */
      onMouseUp: propTypes.func,

      /**
       * @ignore
       */
      onTouchEnd: propTypes.func,

      /**
       * @ignore
       */
      onTouchMove: propTypes.func,

      /**
       * @ignore
       */
      onTouchStart: propTypes.func,

      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Props applied to the `TouchRipple` element.
       */
      TouchRippleProps: propTypes.object,

      /**
       * @ignore
       */
      type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string])
    } : void 0;
    var ButtonBase$1 = withStyles(styles$H, {
      name: 'MuiButtonBase'
    })(ButtonBase);

    var styles$G = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          textAlign: 'center',
          flex: '0 0 auto',
          fontSize: theme.typography.pxToRem(24),
          padding: 12,
          borderRadius: '50%',
          overflow: 'visible',
          // Explicitly set the default value to solve a bug on IE 11.
          color: theme.palette.action.active,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            backgroundColor: 'transparent',
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -12,
          '$sizeSmall&': {
            marginLeft: -3
          }
        },

        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -12,
          '$sizeSmall&': {
            marginRight: -3
          }
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: 3,
          fontSize: theme.typography.pxToRem(18)
        },

        /* Styles applied to the children container element. */
        label: {
          width: '100%',
          display: 'flex',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        }
      };
    };
    /**
     * Refer to the [Icons](/components/icons/) section of the documentation
     * regarding the available icon options.
     */

    var IconButton = /*#__PURE__*/React__namespace.forwardRef(function IconButton(props, ref) {
      var _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: clsx(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
          'start': classes.edgeStart,
          'end': classes.edgeEnd
        }[edge]),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, children));
    });
    process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
      /**
       * The icon element.
       */
      children: chainPropTypes(propTypes.node, function (props) {
        var found = React__namespace.Children.toArray(props.children).some(function (child) {
          return /*#__PURE__*/React__namespace.isValidElement(child) && child.props.onClick;
        });

        if (found) {
          return new Error(['Material-UI: You are providing an onClick event listener ' + 'to a child of a button element.', 'Firefox will never trigger the event.', 'You should move the onClick listener to the parent button element.', 'https://github.com/mui-org/material-ui/issues/13957'].join('\n'));
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * If `true`, the button will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: propTypes.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,

      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: propTypes.oneOf(['start', 'end', false]),

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['small', 'medium'])
    } : void 0;
    var IconButton$1 = withStyles(styles$G, {
      name: 'MuiIconButton'
    })(IconButton);

    var styles$F = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    var defaultTimeout = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Fade transition is used by the [Modal](/components/modal/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Fade = /*#__PURE__*/React__namespace.forwardRef(function Fade(props, ref) {
      var children = props.children,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
          other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);

      var theme = useTheme();
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var foreignRef = useForkRef(children.ref, ref);
      var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray$1(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEntering = normalizedTransitionCallback(onEntering);
      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        reflow(node); // So the animation always start from the start.

        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        timeout: timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          style: _extends$3({
            opacity: 0,
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$F[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Fade.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: propTypes.element,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the child component.
       */
      disableStrictModeCompat: propTypes.bool,

      /**
       * If `true`, the component will transition in.
       */
      in: propTypes.bool,

      /**
       * @ignore
       */
      onEnter: propTypes.func,

      /**
       * @ignore
       */
      onEntered: propTypes.func,

      /**
       * @ignore
       */
      onEntering: propTypes.func,

      /**
       * @ignore
       */
      onExit: propTypes.func,

      /**
       * @ignore
       */
      onExited: propTypes.func,

      /**
       * @ignore
       */
      onExiting: propTypes.func,

      /**
       * @ignore
       */
      style: propTypes.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })])
    } : void 0;

    var styles$E = {
      /* Styles applied to the root element. */
      root: {
        // Improve scrollable dialog support.
        zIndex: -1,
        position: 'fixed',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        WebkitTapHighlightColor: 'transparent'
      },

      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    var Backdrop = /*#__PURE__*/React__namespace.forwardRef(function Backdrop(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$invisible = props.invisible,
          invisible = _props$invisible === void 0 ? false : _props$invisible,
          open = props.open,
          transitionDuration = props.transitionDuration,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Fade : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);

      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: open,
        timeout: transitionDuration
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: clsx(classes.root, className, invisible && classes.invisible),
        "aria-hidden": true,
        ref: ref
      }, children));
    });
    process.env.NODE_ENV !== "production" ? Backdrop.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: propTypes.bool,

      /**
       * If `true`, the backdrop is open.
       */
      open: propTypes.bool.isRequired,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })])
    } : void 0;
    var Backdrop$1 = withStyles(styles$E, {
      name: 'MuiBackdrop'
    })(Backdrop);

    var styles$D = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          margin: 0
        },

        /* Styles applied to the root element if `variant="body2"`. */
        body2: theme.typography.body2,

        /* Styles applied to the root element if `variant="body1"`. */
        body1: theme.typography.body1,

        /* Styles applied to the root element if `variant="caption"`. */
        caption: theme.typography.caption,

        /* Styles applied to the root element if `variant="button"`. */
        button: theme.typography.button,

        /* Styles applied to the root element if `variant="h1"`. */
        h1: theme.typography.h1,

        /* Styles applied to the root element if `variant="h2"`. */
        h2: theme.typography.h2,

        /* Styles applied to the root element if `variant="h3"`. */
        h3: theme.typography.h3,

        /* Styles applied to the root element if `variant="h4"`. */
        h4: theme.typography.h4,

        /* Styles applied to the root element if `variant="h5"`. */
        h5: theme.typography.h5,

        /* Styles applied to the root element if `variant="h6"`. */
        h6: theme.typography.h6,

        /* Styles applied to the root element if `variant="subtitle1"`. */
        subtitle1: theme.typography.subtitle1,

        /* Styles applied to the root element if `variant="subtitle2"`. */
        subtitle2: theme.typography.subtitle2,

        /* Styles applied to the root element if `variant="overline"`. */
        overline: theme.typography.overline,

        /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */
        srOnly: {
          position: 'absolute',
          height: 1,
          width: 1,
          overflow: 'hidden'
        },

        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {
          textAlign: 'left'
        },

        /* Styles applied to the root element if `align="center"`. */
        alignCenter: {
          textAlign: 'center'
        },

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right'
        },

        /* Styles applied to the root element if `align="justify"`. */
        alignJustify: {
          textAlign: 'justify'
        },

        /* Styles applied to the root element if `nowrap={true}`. */
        noWrap: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the root element if `gutterBottom={true}`. */
        gutterBottom: {
          marginBottom: '0.35em'
        },

        /* Styles applied to the root element if `paragraph={true}`. */
        paragraph: {
          marginBottom: 16
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="textPrimary"`. */
        colorTextPrimary: {
          color: theme.palette.text.primary
        },

        /* Styles applied to the root element if `color="textSecondary"`. */
        colorTextSecondary: {
          color: theme.palette.text.secondary
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },

        /* Styles applied to the root element if `display="inline"`. */
        displayInline: {
          display: 'inline'
        },

        /* Styles applied to the root element if `display="block"`. */
        displayBlock: {
          display: 'block'
        }
      };
    };
    var defaultVariantMapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      subtitle1: 'h6',
      subtitle2: 'h6',
      body1: 'p',
      body2: 'p'
    };
    var Typography = /*#__PURE__*/React__namespace.forwardRef(function Typography(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'inherit' : _props$align,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'initial' : _props$color,
          component = props.component,
          _props$display = props.display,
          display = _props$display === void 0 ? 'initial' : _props$display,
          _props$gutterBottom = props.gutterBottom,
          gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
          _props$noWrap = props.noWrap,
          noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
          _props$paragraph = props.paragraph,
          paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'body1' : _props$variant,
          _props$variantMapping = props.variantMapping,
          variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
          other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);

      var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes["color".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes["align".concat(capitalize(align))], display !== 'initial' && classes["display".concat(capitalize(display))]),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Typography.propTypes = {
      /**
       * Set the text-align on the component.
       */
      align: propTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       * Overrides the behavior of the `variantMapping` prop.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Controls the display type
       */
      display: propTypes.oneOf(['initial', 'block', 'inline']),

      /**
       * If `true`, the text will have a bottom margin.
       */
      gutterBottom: propTypes.bool,

      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       */
      noWrap: propTypes.bool,

      /**
       * If `true`, the text will have a bottom margin.
       */
      paragraph: propTypes.bool,

      /**
       * Applies the theme typography styles.
       */
      variant: propTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),

      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       */
      variantMapping: propTypes.object
    } : void 0;
    var Typography$1 = withStyles(styles$D, {
      name: 'MuiTypography'
    })(Typography);

    var styles$C = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.button, {
          boxSizing: 'border-box',
          minWidth: 64,
          padding: '6px 16px',
          borderRadius: theme.shape.borderRadius,
          color: theme.palette.text.primary,
          transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
            duration: theme.transitions.duration.short
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            },
            '&$disabled': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }),

        /* Styles applied to the span element that wraps the children. */
        label: {
          width: '100%',
          // Ensure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },

        /* Styles applied to the root element if `variant="text"`. */
        text: {
          padding: '6px 8px'
        },

        /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
        textPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
        textSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          padding: '5px 15px',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabledBackground)
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.primary.main),
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.secondary.main),
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabled)
          }
        },

        /* Styles applied to the root element if `variant="contained"`. */
        contained: {
          color: theme.palette.getContrastText(theme.palette.grey[300]),
          backgroundColor: theme.palette.grey[300],
          boxShadow: theme.shadows[2],
          '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            boxShadow: theme.shadows[4],
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              boxShadow: theme.shadows[2],
              backgroundColor: theme.palette.grey[300]
            },
            '&$disabled': {
              backgroundColor: theme.palette.action.disabledBackground
            }
          },
          '&$focusVisible': {
            boxShadow: theme.shadows[6]
          },
          '&:active': {
            boxShadow: theme.shadows[8]
          },
          '&$disabled': {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
          }
        },

        /* Styles applied to the root element if `variant="contained"` and `color="primary"`. */
        containedPrimary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.primary.main
            }
          }
        },

        /* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */
        containedSecondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.secondary.main
            }
          }
        },

        /* Styles applied to the root element if `disableElevation={true}`. */
        disableElevation: {
          boxShadow: 'none',
          '&:hover': {
            boxShadow: 'none'
          },
          '&$focusVisible': {
            boxShadow: 'none'
          },
          '&:active': {
            boxShadow: 'none'
          },
          '&$disabled': {
            boxShadow: 'none'
          }
        },

        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit',
          borderColor: 'currentColor'
        },

        /* Styles applied to the root element if `size="small"` and `variant="text"`. */
        textSizeSmall: {
          padding: '4px 5px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="text"`. */
        textSizeLarge: {
          padding: '8px 11px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"` and `variant="outlined"`. */
        outlinedSizeSmall: {
          padding: '3px 9px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="outlined"`. */
        outlinedSizeLarge: {
          padding: '7px 21px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"` and `variant="contained"`. */
        containedSizeSmall: {
          padding: '4px 10px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="contained"`. */
        containedSizeLarge: {
          padding: '8px 22px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {},

        /* Styles applied to the root element if `size="large"`. */
        sizeLarge: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Styles applied to the startIcon element if supplied. */
        startIcon: {
          display: 'inherit',
          marginRight: 8,
          marginLeft: -4,
          '&$iconSizeSmall': {
            marginLeft: -2
          }
        },

        /* Styles applied to the endIcon element if supplied. */
        endIcon: {
          display: 'inherit',
          marginRight: -4,
          marginLeft: 8,
          '&$iconSizeSmall': {
            marginRight: -2
          }
        },

        /* Styles applied to the icon element if supplied and `size="small"`. */
        iconSizeSmall: {
          '& > *:first-child': {
            fontSize: 18
          }
        },

        /* Styles applied to the icon element if supplied and `size="medium"`. */
        iconSizeMedium: {
          '& > *:first-child': {
            fontSize: 20
          }
        },

        /* Styles applied to the icon element if supplied and `size="large"`. */
        iconSizeLarge: {
          '& > *:first-child': {
            fontSize: 22
          }
        }
      };
    };
    var Button = /*#__PURE__*/React__namespace.forwardRef(function Button(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableElevati = props.disableElevation,
          disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          endIconProp = props.endIcon,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          startIconProp = props.startIcon,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);

      var startIcon = startIconProp && /*#__PURE__*/React__namespace.createElement("span", {
        className: clsx(classes.startIcon, classes["iconSize".concat(capitalize(size))])
      }, startIconProp);
      var endIcon = endIconProp && /*#__PURE__*/React__namespace.createElement("span", {
        className: clsx(classes.endIcon, classes["iconSize".concat(capitalize(size))])
      }, endIconProp);
      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: clsx(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes["".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes["".concat(variant, "Size").concat(capitalize(size))], classes["size".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, startIcon, children, endIcon));
    });
    process.env.NODE_ENV !== "production" ? Button.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the button.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the button will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, no elevation is used.
       */
      disableElevation: propTypes.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: propTypes.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: propTypes.bool,

      /**
       * Element placed after the children.
       */
      endIcon: propTypes.node,

      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string,

      /**
       * If `true`, the button will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: propTypes.string,

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: propTypes.oneOf(['large', 'medium', 'small']),

      /**
       * Element placed before the children.
       */
      startIcon: propTypes.node,

      /**
       * @ignore
       */
      type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string]),

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['contained', 'outlined', 'text'])
    } : void 0;
    var Button$1 = withStyles(styles$C, {
      name: 'MuiButton'
    })(Button);

    /**
     * @ignore - internal component.
     */

    var FormControlContext = React__namespace.createContext();

    if (process.env.NODE_ENV !== 'production') {
      FormControlContext.displayName = 'FormControlContext';
    }

    function useFormControl$1() {
      return React__namespace.useContext(FormControlContext);
    }

    function useFormControl() {
      return React__namespace.useContext(FormControlContext);
    }

    var styles$B = {
      root: {
        padding: 9
      },
      checked: {},
      disabled: {},
      input: {
        cursor: 'inherit',
        position: 'absolute',
        opacity: 0,
        width: '100%',
        height: '100%',
        top: 0,
        left: 0,
        margin: 0,
        padding: 0,
        zIndex: 1
      }
    };
    /**
     * @ignore - internal component.
     */

    var SwitchBase = /*#__PURE__*/React__namespace.forwardRef(function SwitchBase(props, ref) {
      var autoFocus = props.autoFocus,
          checkedProp = props.checked,
          checkedIcon = props.checkedIcon,
          classes = props.classes,
          className = props.className,
          defaultChecked = props.defaultChecked,
          disabledProp = props.disabled,
          icon = props.icon,
          id = props.id,
          inputProps = props.inputProps,
          inputRef = props.inputRef,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          readOnly = props.readOnly,
          required = props.required,
          tabIndex = props.tabIndex,
          type = props.type,
          value = props.value,
          other = _objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);

      var _useControlled = useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'SwitchBase',
        state: 'checked'
      }),
          _useControlled2 = _slicedToArray$1(_useControlled, 2),
          checked = _useControlled2[0],
          setCheckedState = _useControlled2[1];

      var muiFormControl = useFormControl();

      var handleFocus = function handleFocus(event) {
        if (onFocus) {
          onFocus(event);
        }

        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }

        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };

      var handleInputChange = function handleInputChange(event) {
        var newChecked = event.target.checked;
        setCheckedState(newChecked);

        if (onChange) {
          // TODO v5: remove the second argument.
          onChange(event, newChecked);
        }
      };

      var disabled = disabledProp;

      if (muiFormControl) {
        if (typeof disabled === 'undefined') {
          disabled = muiFormControl.disabled;
        }
      }

      var hasLabelFor = type === 'checkbox' || type === 'radio';
      return /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        component: "span",
        className: clsx(classes.root, className, checked && classes.checked, disabled && classes.disabled),
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("input", _extends$3({
        autoFocus: autoFocus,
        checked: checkedProp,
        defaultChecked: defaultChecked,
        className: classes.input,
        disabled: disabled,
        id: hasLabelFor && id,
        name: name,
        onChange: handleInputChange,
        readOnly: readOnly,
        ref: inputRef,
        required: required,
        tabIndex: tabIndex,
        type: type,
        value: value
      }, inputProps)), checked ? checkedIcon : icon);
    }); // NB: If changed, please update Checkbox, Switch and Radio
    // so that the API documentation is updated.

    process.env.NODE_ENV !== "production" ? SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * @ignore
       */
      defaultChecked: propTypes.bool,

      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node.isRequired,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /*
       * @ignore
       */
      name: propTypes.string,

      /**
       * @ignore
       */
      onBlur: propTypes.func,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: propTypes.func,

      /**
       * @ignore
       */
      onFocus: propTypes.func,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * The input component prop `type`.
       */
      type: propTypes.string.isRequired,

      /**
       * The value of the component.
       */
      value: propTypes.any
    } : void 0;
    var SwitchBase$1 = withStyles(styles$B, {
      name: 'PrivateSwitchBase'
    })(SwitchBase);

    /**
     * @ignore - internal component.
     */

    var CheckBoxOutlineBlankIcon = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), 'CheckBoxOutlineBlank');

    /**
     * @ignore - internal component.
     */

    var CheckBoxIcon = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), 'CheckBox');

    /**
     * @ignore - internal component.
     */

    var IndeterminateCheckBoxIcon = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), 'IndeterminateCheckBox');

    var styles$A = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary
        },

        /* Pseudo-class applied to the root element if `checked={true}`. */
        checked: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `indeterminate={true}`. */
        indeterminate: {},

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }
      };
    };
    var defaultCheckedIcon = /*#__PURE__*/React__namespace.createElement(CheckBoxIcon, null);
    var defaultIcon = /*#__PURE__*/React__namespace.createElement(CheckBoxOutlineBlankIcon, null);
    var defaultIndeterminateIcon = /*#__PURE__*/React__namespace.createElement(IndeterminateCheckBoxIcon, null);
    var Checkbox = /*#__PURE__*/React__namespace.forwardRef(function Checkbox(props, ref) {
      var _props$checkedIcon = props.checkedIcon,
          checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,
          classes = props.classes,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$icon = props.icon,
          iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,
          _props$indeterminate = props.indeterminate,
          indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
          _props$indeterminateI = props.indeterminateIcon,
          indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,
          inputProps = props.inputProps,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);

      var icon = indeterminate ? indeterminateIconProp : iconProp;
      var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      return /*#__PURE__*/React__namespace.createElement(SwitchBase$1, _extends$3({
        type: "checkbox",
        classes: {
          root: clsx(classes.root, classes["color".concat(capitalize(color))], indeterminate && classes.indeterminate),
          checked: classes.checked,
          disabled: classes.disabled
        },
        color: color,
        inputProps: _extends$3({
          'data-indeterminate': indeterminate
        }, inputProps),
        icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
          fontSize: icon.props.fontSize === undefined && size === "small" ? size : icon.props.fontSize
        }),
        checkedIcon: /*#__PURE__*/React__namespace.cloneElement(indeterminateIcon, {
          fontSize: indeterminateIcon.props.fontSize === undefined && size === "small" ? size : indeterminateIcon.props.fontSize
        }),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Checkbox.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'secondary']),

      /**
       * If `true`, the checkbox will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,

      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the input.
       */
      indeterminate: propTypes.bool,

      /**
       * The icon to display when the component is indeterminate.
       */
      indeterminateIcon: propTypes.node,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: propTypes.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * The size of the checkbox.
       * `small` is equivalent to the dense checkbox styling.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: propTypes.any
    } : void 0;
    var Checkbox$1 = withStyles(styles$A, {
      name: 'MuiCheckbox'
    })(Checkbox);

    /**
     * @ignore - internal component.
     */

    var CancelIcon = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), 'Cancel');

    var styles$z = function styles(theme) {
      var backgroundColor = theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];
      var deleteIconColor = fade(theme.palette.text.primary, 0.26);
      return {
        /* Styles applied to the root element. */
        root: {
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(13),
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: 32,
          color: theme.palette.getContrastText(backgroundColor),
          backgroundColor: backgroundColor,
          borderRadius: 32 / 2,
          whiteSpace: 'nowrap',
          transition: theme.transitions.create(['background-color', 'box-shadow']),
          // label will inherit this from root, then `clickable` class overrides this for both
          cursor: 'default',
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0,
          textDecoration: 'none',
          border: 'none',
          // Remove `button` border
          padding: 0,
          // Remove `button` padding
          verticalAlign: 'middle',
          boxSizing: 'border-box',
          '&$disabled': {
            opacity: 0.5,
            pointerEvents: 'none'
          },
          '& $avatar': {
            marginLeft: 5,
            marginRight: -6,
            width: 24,
            height: 24,
            color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
            fontSize: theme.typography.pxToRem(12)
          },
          '& $avatarColorPrimary': {
            color: theme.palette.primary.contrastText,
            backgroundColor: theme.palette.primary.dark
          },
          '& $avatarColorSecondary': {
            color: theme.palette.secondary.contrastText,
            backgroundColor: theme.palette.secondary.dark
          },
          '& $avatarSmall': {
            marginLeft: 4,
            marginRight: -4,
            width: 18,
            height: 18,
            fontSize: theme.typography.pxToRem(10)
          }
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          height: 24
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */
        clickable: {
          userSelect: 'none',
          WebkitTapHighlightColor: 'transparent',
          cursor: 'pointer',
          '&:hover, &:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          },
          '&:active': {
            boxShadow: theme.shadows[1]
          }
        },

        /* Styles applied to the root element if `onClick` and `color="primary"` is defined or `clickable={true}`. */
        clickableColorPrimary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.08)
          }
        },

        /* Styles applied to the root element if `onClick` and `color="secondary"` is defined or `clickable={true}`. */
        clickableColorSecondary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.08)
          }
        },

        /* Styles applied to the root element if `onDelete` is defined. */
        deletable: {
          '&:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          }
        },

        /* Styles applied to the root element if `onDelete` and `color="primary"` is defined. */
        deletableColorPrimary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.2)
          }
        },

        /* Styles applied to the root element if `onDelete` and `color="secondary"` is defined. */
        deletableColorSecondary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.2)
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          backgroundColor: 'transparent',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity)
          },
          '& $avatar': {
            marginLeft: 4
          },
          '& $avatarSmall': {
            marginLeft: 2
          },
          '& $icon': {
            marginLeft: 4
          },
          '& $iconSmall': {
            marginLeft: 2
          },
          '& $deleteIcon': {
            marginRight: 5
          },
          '& $deleteIconSmall': {
            marginRight: 3
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(theme.palette.primary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity)
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(theme.palette.secondary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity)
          }
        },
        // TODO v5: remove

        /* Styles applied to the `avatar` element. */
        avatar: {},

        /* Styles applied to the `avatar` element if `size="small"`. */
        avatarSmall: {},

        /* Styles applied to the `avatar` element if `color="primary"`. */
        avatarColorPrimary: {},

        /* Styles applied to the `avatar` element if `color="secondary"`. */
        avatarColorSecondary: {},

        /* Styles applied to the `icon` element. */
        icon: {
          color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
          marginLeft: 5,
          marginRight: -6
        },

        /* Styles applied to the `icon` element if `size="small"`. */
        iconSmall: {
          width: 18,
          height: 18,
          marginLeft: 4,
          marginRight: -4
        },

        /* Styles applied to the `icon` element if `color="primary"`. */
        iconColorPrimary: {
          color: 'inherit'
        },

        /* Styles applied to the `icon` element if `color="secondary"`. */
        iconColorSecondary: {
          color: 'inherit'
        },

        /* Styles applied to the label `span` element. */
        label: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          paddingLeft: 12,
          paddingRight: 12,
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the label `span` element if `size="small"`. */
        labelSmall: {
          paddingLeft: 8,
          paddingRight: 8
        },

        /* Styles applied to the `deleteIcon` element. */
        deleteIcon: {
          WebkitTapHighlightColor: 'transparent',
          color: deleteIconColor,
          height: 22,
          width: 22,
          cursor: 'pointer',
          margin: '0 5px 0 -6px',
          '&:hover': {
            color: fade(deleteIconColor, 0.4)
          }
        },

        /* Styles applied to the `deleteIcon` element if `size="small"`. */
        deleteIconSmall: {
          height: 16,
          width: 16,
          marginRight: 4,
          marginLeft: -4
        },

        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`. */
        deleteIconColorPrimary: {
          color: fade(theme.palette.primary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.contrastText
          }
        },

        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`. */
        deleteIconColorSecondary: {
          color: fade(theme.palette.secondary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.contrastText
          }
        },

        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`. */
        deleteIconOutlinedColorPrimary: {
          color: fade(theme.palette.primary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.main
          }
        },

        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`. */
        deleteIconOutlinedColorSecondary: {
          color: fade(theme.palette.secondary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.main
          }
        }
      };
    };

    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
    }
    /**
     * Chips represent complex entities in small blocks, such as a contact.
     */


    var Chip = /*#__PURE__*/React__namespace.forwardRef(function Chip(props, ref) {
      var avatarProp = props.avatar,
          classes = props.classes,
          className = props.className,
          clickableProp = props.clickable,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          ComponentProp = props.component,
          deleteIconProp = props.deleteIcon,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          iconProp = props.icon,
          label = props.label,
          onClick = props.onClick,
          onDelete = props.onDelete,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'default' : _props$variant,
          other = _objectWithoutProperties(props, ["avatar", "classes", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"]);

      var chipRef = React__namespace.useRef(null);
      var handleRef = useForkRef(chipRef, ref);

      var handleDeleteIconClick = function handleDeleteIconClick(event) {
        // Stop the event from bubbling up to the `Chip`
        event.stopPropagation();

        if (onDelete) {
          onDelete(event);
        }
      };

      var handleKeyDown = function handleKeyDown(event) {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          // will be handled in keyUp, otherwise some browsers
          // might init navigation
          event.preventDefault();
        }

        if (onKeyDown) {
          onKeyDown(event);
        }
      };

      var handleKeyUp = function handleKeyUp(event) {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === 'Escape' && chipRef.current) {
            chipRef.current.blur();
          }
        }

        if (onKeyUp) {
          onKeyUp(event);
        }
      };

      var clickable = clickableProp !== false && onClick ? true : clickableProp;
      var small = size === 'small';
      var Component = ComponentProp || (clickable ? ButtonBase$1 : 'div');
      var moreProps = Component === ButtonBase$1 ? {
        component: 'div'
      } : {};
      var deleteIcon = null;

      if (onDelete) {
        var customClasses = clsx(color !== 'default' && (variant === "default" ? classes["deleteIconColor".concat(capitalize(color))] : classes["deleteIconOutlinedColor".concat(capitalize(color))]), small && classes.deleteIconSmall);
        deleteIcon = deleteIconProp && /*#__PURE__*/React__namespace.isValidElement(deleteIconProp) ? /*#__PURE__*/React__namespace.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        }) : /*#__PURE__*/React__namespace.createElement(CancelIcon, {
          className: clsx(classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        });
      }

      var avatar = null;

      if (avatarProp && /*#__PURE__*/React__namespace.isValidElement(avatarProp)) {
        avatar = /*#__PURE__*/React__namespace.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className, small && classes.avatarSmall, color !== 'default' && classes["avatarColor".concat(capitalize(color))])
        });
      }

      var icon = null;

      if (iconProp && /*#__PURE__*/React__namespace.isValidElement(iconProp)) {
        icon = /*#__PURE__*/React__namespace.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className, small && classes.iconSmall, color !== 'default' && classes["iconColor".concat(capitalize(color))])
        });
      }

      if (process.env.NODE_ENV !== 'production') {
        if (avatar && icon) {
          console.error('Material-UI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
        }
      }

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        role: clickable || onDelete ? 'button' : undefined,
        className: clsx(classes.root, className, color !== 'default' && [classes["color".concat(capitalize(color))], clickable && classes["clickableColor".concat(capitalize(color))], onDelete && classes["deletableColor".concat(capitalize(color))]], variant !== "default" && [classes.outlined, {
          'primary': classes.outlinedPrimary,
          'secondary': classes.outlinedSecondary
        }[color]], disabled && classes.disabled, small && classes.sizeSmall, clickable && classes.clickable, onDelete && classes.deletable),
        "aria-disabled": disabled ? true : undefined,
        tabIndex: clickable || onDelete ? 0 : undefined,
        onClick: onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef
      }, moreProps, other), avatar || icon, /*#__PURE__*/React__namespace.createElement("span", {
        className: clsx(classes.label, small && classes.labelSmall)
      }, label), deleteIcon);
    });
    process.env.NODE_ENV !== "production" ? Chip.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Avatar element.
       */
      avatar: propTypes.element,

      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, the chip will appear clickable, and will raise when pressed,
       * even if the onClick prop is not defined.
       * If false, the chip will not be clickable, even if onClick prop is defined.
       * This can be used, for example,
       * along with the component prop to indicate an anchor Chip is clickable.
       */
      clickable: propTypes.bool,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: propTypes.element,

      /**
       * If `true`, the chip should be displayed in a disabled state.
       */
      disabled: propTypes.bool,

      /**
       * Icon element.
       */
      icon: propTypes.element,

      /**
       * The content of the label.
       */
      label: propTypes.node,

      /**
       * @ignore
       */
      onClick: propTypes.func,

      /**
       * Callback function fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: propTypes.func,

      /**
       * @ignore
       */
      onKeyDown: propTypes.func,

      /**
       * @ignore
       */
      onKeyUp: propTypes.func,

      /**
       * The size of the chip.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['default', 'outlined'])
    } : void 0;
    var Chip$1 = withStyles(styles$z, {
      name: 'MuiChip'
    })(Chip);

    var SIZE = 44;
    var styles$y = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-block'
        },

        /* Styles applied to the root element if `variant="static"`. */
        static: {
          transition: theme.transitions.create('transform')
        },

        /* Styles applied to the root element if `variant="indeterminate"`. */
        indeterminate: {
          animation: '$circular-rotate 1.4s linear infinite'
        },

        /* Styles applied to the root element if `variant="determinate"`. */
        determinate: {
          transition: theme.transitions.create('transform')
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the `svg` element. */
        svg: {
          display: 'block' // Keeps the progress centered

        },

        /* Styles applied to the `circle` svg path. */
        circle: {
          stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.
          // strokeLinecap: 'butt',

        },

        /* Styles applied to the `circle` svg path if `variant="static"`. */
        circleStatic: {
          transition: theme.transitions.create('stroke-dashoffset')
        },

        /* Styles applied to the `circle` svg path if `variant="indeterminate"`. */
        circleIndeterminate: {
          animation: '$circular-dash 1.4s ease-in-out infinite',
          // Some default value that looks fine waiting for the animation to kicks in.
          strokeDasharray: '80px, 200px',
          strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.

        },

        /* Styles applied to the `circle` svg path if `variant="determinate"`. */
        circleDeterminate: {
          transition: theme.transitions.create('stroke-dashoffset')
        },
        '@keyframes circular-rotate': {
          '0%': {
            // Fix IE 11 wobbly
            transformOrigin: '50% 50%'
          },
          '100%': {
            transform: 'rotate(360deg)'
          }
        },
        '@keyframes circular-dash': {
          '0%': {
            strokeDasharray: '1px, 200px',
            strokeDashoffset: '0px'
          },
          '50%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-15px'
          },
          '100%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-125px'
          }
        },

        /* Styles applied to the `circle` svg path if `disableShrink={true}`. */
        circleDisableShrink: {
          animation: 'none'
        }
      };
    };
    /**
     * ## ARIA
     *
     * If the progress bar is describing the loading progress of a particular region of a page,
     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
     * attribute to `true` on that region until it has finished loading.
     */

    var CircularProgress = /*#__PURE__*/React__namespace.forwardRef(function CircularProgress(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$disableShrink = props.disableShrink,
          disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,
          _props$size = props.size,
          size = _props$size === void 0 ? 40 : _props$size,
          style = props.style,
          _props$thickness = props.thickness,
          thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,
          _props$value = props.value,
          value = _props$value === void 0 ? 0 : _props$value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);

      var circleStyle = {};
      var rootStyle = {};
      var rootProps = {};

      if (variant === 'determinate' || variant === 'static') {
        var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps['aria-valuenow'] = Math.round(value);
        circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
        rootStyle.transform = 'rotate(-90deg)';
      }

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], {
          'determinate': classes.determinate,
          'indeterminate': classes.indeterminate,
          'static': classes.static
        }[variant]),
        style: _extends$3({
          width: size,
          height: size
        }, rootStyle, style),
        ref: ref,
        role: "progressbar"
      }, rootProps, other), /*#__PURE__*/React__namespace.createElement("svg", {
        className: classes.svg,
        viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
      }, /*#__PURE__*/React__namespace.createElement("circle", {
        className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {
          'determinate': classes.circleDeterminate,
          'indeterminate': classes.circleIndeterminate,
          'static': classes.circleStatic
        }[variant]),
        style: circleStyle,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    });
    process.env.NODE_ENV !== "production" ? CircularProgress.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['inherit', 'primary', 'secondary']),

      /**
       * If `true`, the shrink animation is disabled.
       * This only works if variant is `indeterminate`.
       */
      disableShrink: chainPropTypes(propTypes.bool, function (props) {
        if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
          return new Error('Material-UI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
        }

        return null;
      }),

      /**
       * The size of the circle.
       * If using a number, the pixel unit is assumed.
       * If using a string, you need to provide the CSS unit, e.g '3rem'.
       */
      size: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * @ignore
       */
      style: propTypes.object,

      /**
       * The thickness of the circle.
       */
      thickness: propTypes.number,

      /**
       * The value of the progress indicator for the determinate variant.
       * Value between 0 and 100.
       */
      value: propTypes.number,

      /**
       * The variant to use.
       * Use indeterminate when there is no progress value.
       */
      variant: chainPropTypes(propTypes.oneOf(['determinate', 'indeterminate', 'static']), function (props) {
        var variant = props.variant;

        if (variant === 'static') {
          throw new Error('Material-UI: `variant="static"` was deprecated. Use `variant="determinate"` instead.');
        }

        return null;
      })
    } : void 0;
    var CircularProgress$1 = withStyles(styles$y, {
      name: 'MuiCircularProgress',
      flip: false
    })(CircularProgress);

    function getContainer$1(container) {
      container = typeof container === 'function' ? container() : container; // #StrictMode ready

      return ReactDOM__namespace.findDOMNode(container);
    }

    var useEnhancedEffect$5 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    /**
     * Portals provide a first-class way to render children into a DOM node
     * that exists outside the DOM hierarchy of the parent component.
     */

    var Portal = /*#__PURE__*/React__namespace.forwardRef(function Portal(props, ref) {
      var children = props.children,
          container = props.container,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          onRendered = props.onRendered;

      var _React$useState = React__namespace.useState(null),
          mountNode = _React$useState[0],
          setMountNode = _React$useState[1];

      var handleRef = useForkRef( /*#__PURE__*/React__namespace.isValidElement(children) ? children.ref : null, ref);
      useEnhancedEffect$5(function () {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$5(function () {
        if (mountNode && !disablePortal) {
          setRef(ref, mountNode);
          return function () {
            setRef(ref, null);
          };
        }

        return undefined;
      }, [ref, mountNode, disablePortal]);
      useEnhancedEffect$5(function () {
        if (onRendered && (mountNode || disablePortal)) {
          onRendered();
        }
      }, [onRendered, mountNode, disablePortal]);

      if (disablePortal) {
        if ( /*#__PURE__*/React__namespace.isValidElement(children)) {
          return /*#__PURE__*/React__namespace.cloneElement(children, {
            ref: handleRef
          });
        }

        return children;
      }

      return mountNode ? /*#__PURE__*/ReactDOM__namespace.createPortal(children, mountNode) : mountNode;
    });
    process.env.NODE_ENV !== "production" ? Portal.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The children to render into the `container`.
       */
      children: propTypes.node,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, propTypes.instanceOf(React__namespace.Component), propTypes.func]),

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,

      /**
       * Callback fired once the children has been mounted into the `container`.
       *
       * This prop will be deprecated and removed in v5, the ref can be used instead.
       */
      onRendered: propTypes.func
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      Portal['propTypes' + ''] = exactProp(Portal.propTypes);
    }

    // A change of the browser zoom change the scrollbar size.
    // Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519
    function getScrollbarSize() {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.width = '99px';
      scrollDiv.style.height = '99px';
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarSize;
    }

    function isOverflowing(container) {
      var doc = ownerDocument(container);

      if (doc.body === container) {
        return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;
      }

      return container.scrollHeight > container.clientHeight;
    }

    function ariaHidden(node, show) {
      if (show) {
        node.setAttribute('aria-hidden', 'true');
      } else {
        node.removeAttribute('aria-hidden');
      }
    }

    function getPaddingRight(node) {
      return parseInt(window.getComputedStyle(node)['padding-right'], 10) || 0;
    }

    function ariaHiddenSiblings(container, mountNode, currentNode) {
      var nodesToExclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var show = arguments.length > 4 ? arguments[4] : undefined;
      var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
      var blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
      [].forEach.call(container.children, function (node) {
        if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
          ariaHidden(node, show);
        }
      });
    }

    function findIndexOf(containerInfo, callback) {
      var idx = -1;
      containerInfo.some(function (item, index) {
        if (callback(item)) {
          idx = index;
          return true;
        }

        return false;
      });
      return idx;
    }

    function handleContainer(containerInfo, props) {
      var restoreStyle = [];
      var restorePaddings = [];
      var container = containerInfo.container;
      var fixedNodes;

      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          // Compute the size before applying overflow hidden to avoid any scroll jumps.
          var scrollbarSize = getScrollbarSize();
          restoreStyle.push({
            value: container.style.paddingRight,
            key: 'padding-right',
            el: container
          }); // Use computed style, here to get the real padding to add our scrollbar width.

          container.style['padding-right'] = "".concat(getPaddingRight(container) + scrollbarSize, "px"); // .mui-fixed is a global helper.

          fixedNodes = ownerDocument(container).querySelectorAll('.mui-fixed');
          [].forEach.call(fixedNodes, function (node) {
            restorePaddings.push(node.style.paddingRight);
            node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
          });
        } // Improve Gatsby support
        // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


        var parent = container.parentElement;
        var scrollContainer = parent.nodeName === 'HTML' && window.getComputedStyle(parent)['overflow-y'] === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.

        restoreStyle.push({
          value: scrollContainer.style.overflow,
          key: 'overflow',
          el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
      }

      var restore = function restore() {
        if (fixedNodes) {
          [].forEach.call(fixedNodes, function (node, i) {
            if (restorePaddings[i]) {
              node.style.paddingRight = restorePaddings[i];
            } else {
              node.style.removeProperty('padding-right');
            }
          });
        }

        restoreStyle.forEach(function (_ref) {
          var value = _ref.value,
              el = _ref.el,
              key = _ref.key;

          if (value) {
            el.style.setProperty(key, value);
          } else {
            el.style.removeProperty(key);
          }
        });
      };

      return restore;
    }

    function getHiddenSiblings(container) {
      var hiddenSiblings = [];
      [].forEach.call(container.children, function (node) {
        if (node.getAttribute && node.getAttribute('aria-hidden') === 'true') {
          hiddenSiblings.push(node);
        }
      });
      return hiddenSiblings;
    }
    /**
     * @ignore - do not document.
     *
     * Proper state management for containers and the modals in those containers.
     * Simplified, but inspired by react-overlay's ModalManager class.
     * Used by the Modal to ensure proper styling of containers.
     */


    var ModalManager = /*#__PURE__*/function () {
      function ModalManager() {
        _classCallCheck(this, ModalManager);

        // this.modals[modalIndex] = modal
        this.modals = []; // this.containers[containerIndex] = {
        //   modals: [],
        //   container,
        //   restore: null,
        // }

        this.containers = [];
      }

      _createClass(ModalManager, [{
        key: "add",
        value: function add(modal, container) {
          var modalIndex = this.modals.indexOf(modal);

          if (modalIndex !== -1) {
            return modalIndex;
          }

          modalIndex = this.modals.length;
          this.modals.push(modal); // If the modal we are adding is already in the DOM.

          if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
          }

          var hiddenSiblingNodes = getHiddenSiblings(container);
          ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.container === container;
          });

          if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
          }

          this.containers.push({
            modals: [modal],
            container: container,
            restore: null,
            hiddenSiblingNodes: hiddenSiblingNodes
          });
          return modalIndex;
        }
      }, {
        key: "mount",
        value: function mount(modal, props) {
          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var containerInfo = this.containers[containerIndex];

          if (!containerInfo.restore) {
            containerInfo.restore = handleContainer(containerInfo, props);
          }
        }
      }, {
        key: "remove",
        value: function remove(modal) {
          var modalIndex = this.modals.indexOf(modal);

          if (modalIndex === -1) {
            return modalIndex;
          }

          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var containerInfo = this.containers[containerIndex];
          containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
          this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

          if (containerInfo.modals.length === 0) {
            // The modal might be closed before it had the chance to be mounted in the DOM.
            if (containerInfo.restore) {
              containerInfo.restore();
            }

            if (modal.modalRef) {
              // In case the modal wasn't in the DOM yet.
              ariaHidden(modal.modalRef, true);
            }

            ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
            this.containers.splice(containerIndex, 1);
          } else {
            // Otherwise make sure the next top modal is visible to a screen reader.
            var nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null

            if (nextTop.modalRef) {
              ariaHidden(nextTop.modalRef, false);
            }
          }

          return modalIndex;
        }
      }, {
        key: "isTopModal",
        value: function isTopModal(modal) {
          return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
        }
      }]);

      return ModalManager;
    }();

    /* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */
    /**
     * Utility component that locks focus inside the component.
     */

    function Unstable_TrapFocus(props) {
      var children = props.children,
          _props$disableAutoFoc = props.disableAutoFocus,
          disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$disableEnforce = props.disableEnforceFocus,
          disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
          _props$disableRestore = props.disableRestoreFocus,
          disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
          getDoc = props.getDoc,
          isEnabled = props.isEnabled,
          open = props.open;
      var ignoreNextEnforceFocus = React__namespace.useRef();
      var sentinelStart = React__namespace.useRef(null);
      var sentinelEnd = React__namespace.useRef(null);
      var nodeToRestore = React__namespace.useRef();
      var rootRef = React__namespace.useRef(null); // can be removed once we drop support for non ref forwarding class components

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        rootRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(children.ref, handleOwnRef);
      var prevOpenRef = React__namespace.useRef();
      React__namespace.useEffect(function () {
        prevOpenRef.current = open;
      }, [open]);

      if (!prevOpenRef.current && open && typeof window !== 'undefined') {
        // WARNING: Potentially unsafe in concurrent mode.
        // The way the read on `nodeToRestore` is setup could make this actually safe.
        // Say we render `open={false}` -> `open={true}` but never commit.
        // We have now written a state that wasn't committed. But no committed effect
        // will read this wrong value. We only read from `nodeToRestore` in effects
        // that were committed on `open={true}`
        // WARNING: Prevents the instance from being garbage collected. Should only
        // hold a weak ref.
        nodeToRestore.current = getDoc().activeElement;
      }

      React__namespace.useEffect(function () {
        if (!open) {
          return;
        }

        var doc = ownerDocument(rootRef.current); // We might render an empty child.

        if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute('tabIndex')) {
            if (process.env.NODE_ENV !== 'production') {
              console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
            }

            rootRef.current.setAttribute('tabIndex', -1);
          }

          rootRef.current.focus();
        }

        var contain = function contain() {
          var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.
          // Contain can be called between the component being unmounted and its cleanup function being run.

          if (rootElement === null) {
            return;
          }

          if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }

          if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
            rootRef.current.focus();
          }
        };

        var loopFocus = function loopFocus(event) {
          // 9 = Tab
          if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
            return;
          } // Make sure the next tab starts from the right place.


          if (doc.activeElement === rootRef.current) {
            // We need to ignore the next contain as
            // it will try to move the focus back to the rootRef element.
            ignoreNextEnforceFocus.current = true;

            if (event.shiftKey) {
              sentinelEnd.current.focus();
            } else {
              sentinelStart.current.focus();
            }
          }
        };

        doc.addEventListener('focus', contain, true);
        doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

        var interval = setInterval(function () {
          contain();
        }, 50);
        return function () {
          clearInterval(interval);
          doc.removeEventListener('focus', contain, true);
          doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()

          if (!disableRestoreFocus) {
            // In IE 11 it is possible for document.activeElement to be null resulting
            // in nodeToRestore.current being null.
            // Not all elements in IE 11 have a focus method.
            // Once IE 11 support is dropped the focus() call can be unconditional.
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              nodeToRestore.current.focus();
            }

            nodeToRestore.current = null;
          }
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", {
        tabIndex: 0,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /*#__PURE__*/React__namespace.cloneElement(children, {
        ref: handleRef
      }), /*#__PURE__*/React__namespace.createElement("div", {
        tabIndex: 0,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      }));
    }

    process.env.NODE_ENV !== "production" ? Unstable_TrapFocus.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: propTypes.node,

      /**
       * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the trap focus less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: propTypes.bool,

      /**
       * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
       *
       * Generally this should never be set to `true` as it makes the trap focus less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: propTypes.bool,

      /**
       * If `true`, the trap focus will not restore focus to previously focused element once
       * trap focus is hidden.
       */
      disableRestoreFocus: propTypes.bool,

      /**
       * Return the document to consider.
       * We use it to implement the restore focus between different browser documents.
       */
      getDoc: propTypes.func.isRequired,

      /**
       * Do we still want to enforce the focus?
       * This prop helps nesting TrapFocus elements.
       */
      isEnabled: propTypes.func.isRequired,

      /**
       * If `true`, focus will be locked.
       */
      open: propTypes.bool.isRequired
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);
    }

    var styles$x = {
      /* Styles applied to the root element. */
      root: {
        zIndex: -1,
        position: 'fixed',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        WebkitTapHighlightColor: 'transparent'
      },

      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    /**
     * @ignore - internal component.
     */

    var SimpleBackdrop = /*#__PURE__*/React__namespace.forwardRef(function SimpleBackdrop(props, ref) {
      var _props$invisible = props.invisible,
          invisible = _props$invisible === void 0 ? false : _props$invisible,
          open = props.open,
          other = _objectWithoutProperties(props, ["invisible", "open"]);

      return open ? /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        "aria-hidden": true,
        ref: ref
      }, other, {
        style: _extends$3({}, styles$x.root, invisible ? styles$x.invisible : {}, other.style)
      })) : null;
    });
    process.env.NODE_ENV !== "production" ? SimpleBackdrop.propTypes = {
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: propTypes.bool,

      /**
       * If `true`, the backdrop is open.
       */
      open: propTypes.bool.isRequired
    } : void 0;

    function getContainer(container) {
      container = typeof container === 'function' ? container() : container;
      return ReactDOM__namespace.findDOMNode(container);
    }

    function getHasTransition(props) {
      return props.children ? props.children.props.hasOwnProperty('in') : false;
    } // A modal manager used to track and manage the state of open Modals.
    // Modals don't open on the server so this won't conflict with concurrent requests.


    var defaultManager = new ModalManager();
    var styles$w = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'fixed',
          zIndex: theme.zIndex.modal,
          right: 0,
          bottom: 0,
          top: 0,
          left: 0
        },

        /* Styles applied to the root element if the `Modal` has exited. */
        hidden: {
          visibility: 'hidden'
        }
      };
    };
    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/api/dialog/)
     * - [Drawer](/api/drawer/)
     * - [Menu](/api/menu/)
     * - [Popover](/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */

    var Modal = /*#__PURE__*/React__namespace.forwardRef(function Modal(inProps, ref) {
      var theme = useTheme$1();
      var props = getThemeProps({
        name: 'MuiModal',
        props: _extends$3({}, inProps),
        theme: theme
      });

      var _props$BackdropCompon = props.BackdropComponent,
          BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop : _props$BackdropCompon,
          BackdropProps = props.BackdropProps,
          children = props.children,
          _props$closeAfterTran = props.closeAfterTransition,
          closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
          container = props.container,
          _props$disableAutoFoc = props.disableAutoFocus,
          disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$disableBackdro = props.disableBackdropClick,
          disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableEnforce = props.disableEnforceFocus,
          disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
          _props$disableEscapeK = props.disableEscapeKeyDown,
          disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          _props$disableRestore = props.disableRestoreFocus,
          disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
          _props$disableScrollL = props.disableScrollLock,
          disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
          _props$hideBackdrop = props.hideBackdrop,
          hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
          _props$keepMounted = props.keepMounted,
          keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
          _props$manager = props.manager,
          manager = _props$manager === void 0 ? defaultManager : _props$manager,
          onBackdropClick = props.onBackdropClick,
          onClose = props.onClose,
          onEscapeKeyDown = props.onEscapeKeyDown,
          onRendered = props.onRendered,
          open = props.open,
          other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);

      var _React$useState = React__namespace.useState(true),
          exited = _React$useState[0],
          setExited = _React$useState[1];

      var modal = React__namespace.useRef({});
      var mountNodeRef = React__namespace.useRef(null);
      var modalRef = React__namespace.useRef(null);
      var handleRef = useForkRef(modalRef, ref);
      var hasTransition = getHasTransition(props);

      var getDoc = function getDoc() {
        return ownerDocument(mountNodeRef.current);
      };

      var getModal = function getModal() {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };

      var handleMounted = function handleMounted() {
        manager.mount(getModal(), {
          disableScrollLock: disableScrollLock
        }); // Fix a bug on Chrome where the scroll isn't initially 0.

        modalRef.current.scrollTop = 0;
      };

      var handleOpen = useEventCallback(function () {
        var resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer); // The element was already mounted.

        if (modalRef.current) {
          handleMounted();
        }
      });
      var isTopModal = React__namespace.useCallback(function () {
        return manager.isTopModal(getModal());
      }, [manager]);
      var handlePortalRef = useEventCallback(function (node) {
        mountNodeRef.current = node;

        if (!node) {
          return;
        }

        if (onRendered) {
          onRendered();
        }

        if (open && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, true);
        }
      });
      var handleClose = React__namespace.useCallback(function () {
        manager.remove(getModal());
      }, [manager]);
      React__namespace.useEffect(function () {
        return function () {
          handleClose();
        };
      }, [handleClose]);
      React__namespace.useEffect(function () {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }

      var handleEnter = function handleEnter() {
        setExited(false);
      };

      var handleExited = function handleExited() {
        setExited(true);

        if (closeAfterTransition) {
          handleClose();
        }
      };

      var handleBackdropClick = function handleBackdropClick(event) {
        if (event.target !== event.currentTarget) {
          return;
        }

        if (onBackdropClick) {
          onBackdropClick(event);
        }

        if (!disableBackdropClick && onClose) {
          onClose(event, 'backdropClick');
        }
      };

      var handleKeyDown = function handleKeyDown(event) {
        // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviours like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) {
          return;
        }

        if (onEscapeKeyDown) {
          onEscapeKeyDown(event);
        }

        if (!disableEscapeKeyDown) {
          // Swallow the event, in case someone is listening for the escape key on the body.
          event.stopPropagation();

          if (onClose) {
            onClose(event, 'escapeKeyDown');
          }
        }
      };

      var inlineStyle = styles$w(theme || {
        zIndex: zIndex
      });
      var childProps = {};

      if (children.props.tabIndex === undefined) {
        childProps.tabIndex = children.props.tabIndex || '-1';
      } // It's a Transition like component


      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }

      return /*#__PURE__*/React__namespace.createElement(Portal, {
        ref: handlePortalRef,
        container: container,
        disablePortal: disablePortal
      }, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: handleRef,
        onKeyDown: handleKeyDown,
        role: "presentation"
      }, other, {
        style: _extends$3({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
      }), hideBackdrop ? null : /*#__PURE__*/React__namespace.createElement(BackdropComponent, _extends$3({
        open: open,
        onClick: handleBackdropClick
      }, BackdropProps)), /*#__PURE__*/React__namespace.createElement(Unstable_TrapFocus, {
        disableEnforceFocus: disableEnforceFocus,
        disableAutoFocus: disableAutoFocus,
        disableRestoreFocus: disableRestoreFocus,
        getDoc: getDoc,
        isEnabled: isTopModal,
        open: open
      }, /*#__PURE__*/React__namespace.cloneElement(children, childProps))));
    });
    process.env.NODE_ENV !== "production" ? Modal.propTypes = {
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       */
      BackdropComponent: propTypes.elementType,

      /**
       * Props applied to the [`Backdrop`](/api/backdrop/) element.
       */
      BackdropProps: propTypes.object,

      /**
       * A single child content element.
       */
      children: elementAcceptingRef.isRequired,

      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       */
      closeAfterTransition: propTypes.bool,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, propTypes.instanceOf(React__namespace.Component), propTypes.func]),

      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: propTypes.bool,

      /**
       * If `true`, clicking the backdrop will not fire `onClose`.
       */
      disableBackdropClick: propTypes.bool,

      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: propTypes.bool,

      /**
       * If `true`, hitting escape will not fire `onClose`.
       */
      disableEscapeKeyDown: propTypes.bool,

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,

      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden.
       */
      disableRestoreFocus: propTypes.bool,

      /**
       * Disable the scroll lock behavior.
       */
      disableScrollLock: propTypes.bool,

      /**
       * If `true`, the backdrop is not rendered.
       */
      hideBackdrop: propTypes.bool,

      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       */
      keepMounted: propTypes.bool,

      /**
       * @ignore
       */
      manager: propTypes.object,

      /**
       * Callback fired when the backdrop is clicked.
       */
      onBackdropClick: propTypes.func,

      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: propTypes.func,

      /**
       * Callback fired when the escape key is pressed,
       * `disableEscapeKeyDown` is false and the modal is in focus.
       */
      onEscapeKeyDown: propTypes.func,

      /**
       * Callback fired once the children has been mounted into the `container`.
       * It signals that the `open={true}` prop took effect.
       *
       * This prop will be deprecated and removed in v5, the ref can be used instead.
       */
      onRendered: propTypes.func,

      /**
       * If `true`, the modal is open.
       */
      open: propTypes.bool.isRequired
    } : void 0;

    var styles$v = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          '@media print': {
            // Use !important to override the Modal inline-style.
            position: 'absolute !important'
          }
        },

        /* Styles applied to the container element if `scroll="paper"`. */
        scrollPaper: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center'
        },

        /* Styles applied to the container element if `scroll="body"`. */
        scrollBody: {
          overflowY: 'auto',
          overflowX: 'hidden',
          textAlign: 'center',
          '&:after': {
            content: '""',
            display: 'inline-block',
            verticalAlign: 'middle',
            height: '100%',
            width: '0'
          }
        },

        /* Styles applied to the container element. */
        container: {
          height: '100%',
          '@media print': {
            height: 'auto'
          },
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0
        },

        /* Styles applied to the `Paper` component. */
        paper: {
          margin: 32,
          position: 'relative',
          overflowY: 'auto',
          // Fix IE 11 issue, to remove at some point.
          '@media print': {
            overflowY: 'visible',
            boxShadow: 'none'
          }
        },

        /* Styles applied to the `Paper` component if `scroll="paper"`. */
        paperScrollPaper: {
          display: 'flex',
          flexDirection: 'column',
          maxHeight: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `scroll="body"`. */
        paperScrollBody: {
          display: 'inline-block',
          verticalAlign: 'middle',
          textAlign: 'left' // 'initial' doesn't work on IE 11

        },

        /* Styles applied to the `Paper` component if `maxWidth=false`. */
        paperWidthFalse: {
          maxWidth: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `maxWidth="xs"`. */
        paperWidthXs: {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444),
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="sm"`. */
        paperWidthSm: {
          maxWidth: theme.breakpoints.values.sm,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="md"`. */
        paperWidthMd: {
          maxWidth: theme.breakpoints.values.md,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="lg"`. */
        paperWidthLg: {
          maxWidth: theme.breakpoints.values.lg,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="xl"`. */
        paperWidthXl: {
          maxWidth: theme.breakpoints.values.xl,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `fullWidth={true}`. */
        paperFullWidth: {
          width: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `fullScreen={true}`. */
        paperFullScreen: {
          margin: 0,
          width: '100%',
          maxWidth: '100%',
          height: '100%',
          maxHeight: 'none',
          borderRadius: 0,
          '&$paperScrollBody': {
            margin: 0,
            maxWidth: '100%'
          }
        }
      };
    };
    var defaultTransitionDuration = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * Dialogs are overlaid modal paper based components with a backdrop.
     */

    var Dialog = /*#__PURE__*/React__namespace.forwardRef(function Dialog(props, ref) {
      var BackdropProps = props.BackdropProps,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableBackdro = props.disableBackdropClick,
          disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableEscapeK = props.disableEscapeKeyDown,
          disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
          _props$fullScreen = props.fullScreen,
          fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$maxWidth = props.maxWidth,
          maxWidth = _props$maxWidth === void 0 ? 'sm' : _props$maxWidth,
          onBackdropClick = props.onBackdropClick,
          onClose = props.onClose,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onEscapeKeyDown = props.onEscapeKeyDown,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperComponent = props.PaperComponent,
          PaperComponent = _props$PaperComponent === void 0 ? Paper$1 : _props$PaperComponent,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          _props$scroll = props.scroll,
          scroll = _props$scroll === void 0 ? 'paper' : _props$scroll,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Fade : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          ariaDescribedby = props['aria-describedby'],
          ariaLabelledby = props['aria-labelledby'],
          other = _objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);

      var mouseDownTarget = React__namespace.useRef();

      var handleMouseDown = function handleMouseDown(event) {
        mouseDownTarget.current = event.target;
      };

      var handleBackdropClick = function handleBackdropClick(event) {
        // Ignore the events not coming from the "backdrop"
        // We don't want to close the dialog when clicking the dialog content.
        if (event.target !== event.currentTarget) {
          return;
        } // Make sure the event starts and ends on the same DOM element.


        if (event.target !== mouseDownTarget.current) {
          return;
        }

        mouseDownTarget.current = null;

        if (onBackdropClick) {
          onBackdropClick(event);
        }

        if (!disableBackdropClick && onClose) {
          onClose(event, 'backdropClick');
        }
      };

      return /*#__PURE__*/React__namespace.createElement(Modal, _extends$3({
        className: clsx(classes.root, className),
        BackdropComponent: Backdrop$1,
        BackdropProps: _extends$3({
          transitionDuration: transitionDuration
        }, BackdropProps),
        closeAfterTransition: true,
        disableBackdropClick: disableBackdropClick,
        disableEscapeKeyDown: disableEscapeKeyDown,
        onEscapeKeyDown: onEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: open,
        timeout: transitionDuration,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited,
        role: "none presentation"
      }, TransitionProps), /*#__PURE__*/React__namespace.createElement("div", {
        className: clsx(classes.container, classes["scroll".concat(capitalize(scroll))]),
        onMouseUp: handleBackdropClick,
        onMouseDown: handleMouseDown
      }, /*#__PURE__*/React__namespace.createElement(PaperComponent, _extends$3({
        elevation: 24,
        role: "dialog",
        "aria-describedby": ariaDescribedby,
        "aria-labelledby": ariaLabelledby
      }, PaperProps, {
        className: clsx(classes.paper, classes["paperScroll".concat(capitalize(scroll))], classes["paperWidth".concat(capitalize(String(maxWidth)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
      }), children))));
    });
    process.env.NODE_ENV !== "production" ? Dialog.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The id(s) of the element(s) that describe the dialog.
       */
      'aria-describedby': propTypes.string,

      /**
       * The id(s) of the element(s) that label the dialog.
       */
      'aria-labelledby': propTypes.string,

      /**
       * @ignore
       */
      BackdropProps: propTypes.object,

      /**
       * Dialog children, usually the included sub-components.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, clicking the backdrop will not fire the `onClose` callback.
       */
      disableBackdropClick: propTypes.bool,

      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       */
      disableEscapeKeyDown: propTypes.bool,

      /**
       * If `true`, the dialog will be full-screen
       */
      fullScreen: propTypes.bool,

      /**
       * If `true`, the dialog stretches to `maxWidth`.
       *
       * Notice that the dialog width grow is limited by the default margin.
       */
      fullWidth: propTypes.bool,

      /**
       * Determine the max-width of the dialog.
       * The dialog width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       */
      maxWidth: propTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false]),

      /**
       * Callback fired when the backdrop is clicked.
       */
      onBackdropClick: propTypes.func,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: propTypes.func,

      /**
       * Callback fired before the dialog enters.
       */
      onEnter: propTypes.func,

      /**
       * Callback fired when the dialog has entered.
       */
      onEntered: propTypes.func,

      /**
       * Callback fired when the dialog is entering.
       */
      onEntering: propTypes.func,

      /**
       * Callback fired when the escape key is pressed,
       * `disableKeyboard` is false and the modal is in focus.
       */
      onEscapeKeyDown: propTypes.func,

      /**
       * Callback fired before the dialog exits.
       */
      onExit: propTypes.func,

      /**
       * Callback fired when the dialog has exited.
       */
      onExited: propTypes.func,

      /**
       * Callback fired when the dialog is exiting.
       */
      onExiting: propTypes.func,

      /**
       * If `true`, the Dialog is open.
       */
      open: propTypes.bool.isRequired,

      /**
       * The component used to render the body of the dialog.
       */
      PaperComponent: propTypes.elementType,

      /**
       * Props applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: propTypes.object,

      /**
       * Determine the container for scrolling the dialog.
       */
      scroll: propTypes.oneOf(['body', 'paper']),

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: propTypes.elementType,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: propTypes.object
    } : void 0;
    var Dialog$1 = withStyles(styles$v, {
      name: 'MuiDialog'
    })(Dialog);

    var styles$u = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end',
        flex: '0 0 auto'
      },

      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > :not(:first-child)': {
          marginLeft: 8
        }
      }
    };
    var DialogActions = /*#__PURE__*/React__namespace.forwardRef(function DialogActions(props, ref) {
      var _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: clsx(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? DialogActions.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: propTypes.bool
    } : void 0;
    var DialogActions$1 = withStyles(styles$u, {
      name: 'MuiDialogActions'
    })(DialogActions);

    var styles$t = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: '1 1 auto',
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          overflowY: 'auto',
          padding: '8px 24px',
          '&:first-child': {
            // dialog without title
            paddingTop: 20
          }
        },

        /* Styles applied to the root element if `dividers={true}`. */
        dividers: {
          padding: '16px 24px',
          borderTop: "1px solid ".concat(theme.palette.divider),
          borderBottom: "1px solid ".concat(theme.palette.divider)
        }
      };
    };
    var DialogContent = /*#__PURE__*/React__namespace.forwardRef(function DialogContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$dividers = props.dividers,
          dividers = _props$dividers === void 0 ? false : _props$dividers,
          other = _objectWithoutProperties(props, ["classes", "className", "dividers"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: clsx(classes.root, className, dividers && classes.dividers),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? DialogContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * Display the top and bottom dividers.
       */
      dividers: propTypes.bool
    } : void 0;
    var DialogContent$1 = withStyles(styles$t, {
      name: 'MuiDialogContent'
    })(DialogContent);

    function formControlState(_ref) {
      var props = _ref.props,
          states = _ref.states,
          muiFormControl = _ref.muiFormControl;
      return states.reduce(function (acc, state) {
        acc[state] = props[state];

        if (muiFormControl) {
          if (typeof props[state] === 'undefined') {
            acc[state] = muiFormControl[state];
          }
        }

        return acc;
      }, {});
    }

    function getStyleValue(computedStyle, property) {
      return parseInt(computedStyle[property], 10) || 0;
    }

    var useEnhancedEffect$4 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var styles$s = {
      /* Styles applied to the shadow textarea element. */
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
      }
    };
    var TextareaAutosize = /*#__PURE__*/React__namespace.forwardRef(function TextareaAutosize(props, ref) {
      var onChange = props.onChange,
          rows = props.rows,
          rowsMax = props.rowsMax,
          _props$rowsMin = props.rowsMin,
          rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin,
          style = props.style,
          value = props.value,
          other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "style", "value"]);

      var rowsMin = rows || rowsMinProp;

      var _React$useRef = React__namespace.useRef(value != null),
          isControlled = _React$useRef.current;

      var inputRef = React__namespace.useRef(null);
      var handleRef = useForkRef(ref, inputRef);
      var shadowRef = React__namespace.useRef(null);
      var renders = React__namespace.useRef(0);

      var _React$useState = React__namespace.useState({}),
          state = _React$useState[0],
          setState = _React$useState[1];

      var syncHeight = React__namespace.useCallback(function () {
        var input = inputRef.current;
        var computedStyle = window.getComputedStyle(input);
        var inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';

        if (inputShallow.value.slice(-1) === '\n') {
          // Certain fonts which overflow the line height will cause the textarea
          // to report a different scrollHeight depending on whether the last line
          // is empty. Make it non-empty to avoid this issue.
          inputShallow.value += ' ';
        }

        var boxSizing = computedStyle['box-sizing'];
        var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

        var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row

        inputShallow.value = 'x';
        var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content

        var outerHeight = innerHeight;

        if (rowsMin) {
          outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);
        }

        if (rowsMax) {
          outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);
        }

        outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

        var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        var overflow = Math.abs(outerHeight - innerHeight) <= 1;
        setState(function (prevState) {
          // Need a large enough difference to update the height.
          // This prevents infinite rendering loop.
          if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
            renders.current += 1;
            return {
              overflow: overflow,
              outerHeightStyle: outerHeightStyle
            };
          }

          if (process.env.NODE_ENV !== 'production') {
            if (renders.current === 20) {
              console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
            }
          }

          return prevState;
        });
      }, [rowsMax, rowsMin, props.placeholder]);
      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          renders.current = 0;
          syncHeight();
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [syncHeight]);
      useEnhancedEffect$4(function () {
        syncHeight();
      });
      React__namespace.useEffect(function () {
        renders.current = 0;
      }, [value]);

      var handleChange = function handleChange(event) {
        renders.current = 0;

        if (!isControlled) {
          syncHeight();
        }

        if (onChange) {
          onChange(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("textarea", _extends$3({
        value: value,
        onChange: handleChange,
        ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
        ,
        rows: rowsMin,
        style: _extends$3({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? 'hidden' : null
        }, style)
      }, other)), /*#__PURE__*/React__namespace.createElement("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends$3({}, styles$s.shadow, style)
      }));
    });
    process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * @ignore
       */
      onChange: propTypes.func,

      /**
       * @ignore
       */
      placeholder: propTypes.string,

      /**
       * Use `rowsMin` instead. The prop will be removed in v5.
       *
       * @deprecated
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Minimum number of rows to display.
       */
      rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * @ignore
       */
      style: propTypes.object,

      /**
       * @ignore
       */
      value: propTypes.oneOfType([propTypes.arrayOf(propTypes.string), propTypes.number, propTypes.string])
    } : void 0;

    // Supports determination of isControlled().
    // Controlled input accepts its current value as a prop.
    //
    // @see https://facebook.github.io/react/docs/forms.html#controlled-components
    // @param value
    // @returns {boolean} true if string (including '') or number (including zero)
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    } // Determine if field is empty or filled.
    // Response determines if label is presented above field or as placeholder.
    //
    // @param obj
    // @param SSR
    // @returns {boolean} False when not present or empty string.
    //                    True when any number or string with length.

    function isFilled(obj) {
      var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
    } // Determine if an Input is adorned on start.
    // It's corresponding to the left with LTR.
    //
    // @param obj
    // @returns {boolean} False when no adornments.
    //                    True when adorned at the start.

    function isAdornedStart(obj) {
      return obj.startAdornment;
    }

    var styles$r = function styles(theme) {
      var light = theme.palette.type === 'light';
      var placeholder = {
        color: 'currentColor',
        opacity: light ? 0.42 : 0.5,
        transition: theme.transitions.create('opacity', {
          duration: theme.transitions.duration.shorter
        })
      };
      var placeholderHidden = {
        opacity: '0 !important'
      };
      var placeholderVisible = {
        opacity: light ? 0.42 : 0.5
      };
      return {
        '@global': {
          '@keyframes mui-auto-fill': {},
          '@keyframes mui-auto-fill-cancel': {}
        },

        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body1, {
          color: theme.palette.text.primary,
          lineHeight: '1.1876em',
          // Reset (19px), match the native input line-height
          boxSizing: 'border-box',
          // Prevent padding issue with fullWidth.
          position: 'relative',
          cursor: 'text',
          display: 'inline-flex',
          alignItems: 'center',
          '&$disabled': {
            color: theme.palette.text.disabled,
            cursor: 'default'
          }
        }),

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {},

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {},

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          '&$marginDense': {
            paddingTop: 4 - 1
          }
        },

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Styles applied to the `input` element. */
        input: {
          font: 'inherit',
          letterSpacing: 'inherit',
          color: 'currentColor',
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          border: 0,
          boxSizing: 'content-box',
          background: 'none',
          height: '1.1876em',
          // Reset (19px), match the native input line-height
          margin: 0,
          // Reset for Safari
          WebkitTapHighlightColor: 'transparent',
          display: 'block',
          // Make the flex item shrink with Firefox
          minWidth: 0,
          width: '100%',
          // Fix IE 11 width issue
          animationName: 'mui-auto-fill-cancel',
          animationDuration: '10ms',
          '&::-webkit-input-placeholder': placeholder,
          '&::-moz-placeholder': placeholder,
          // Firefox 19+
          '&:-ms-input-placeholder': placeholder,
          // IE 11
          '&::-ms-input-placeholder': placeholder,
          // Edge
          '&:focus': {
            outline: 0
          },
          // Reset Firefox invalid required input style
          '&:invalid': {
            boxShadow: 'none'
          },
          '&::-webkit-search-decoration': {
            // Remove the padding when type=search.
            '-webkit-appearance': 'none'
          },
          // Show and hide the placeholder logic
          'label[data-shrink=false] + $formControl &': {
            '&::-webkit-input-placeholder': placeholderHidden,
            '&::-moz-placeholder': placeholderHidden,
            // Firefox 19+
            '&:-ms-input-placeholder': placeholderHidden,
            // IE 11
            '&::-ms-input-placeholder': placeholderHidden,
            // Edge
            '&:focus::-webkit-input-placeholder': placeholderVisible,
            '&:focus::-moz-placeholder': placeholderVisible,
            // Firefox 19+
            '&:focus:-ms-input-placeholder': placeholderVisible,
            // IE 11
            '&:focus::-ms-input-placeholder': placeholderVisible // Edge

          },
          '&$disabled': {
            opacity: 1 // Reset iOS opacity

          },
          '&:-webkit-autofill': {
            animationDuration: '5000s',
            animationName: 'mui-auto-fill'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 4 - 1
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          height: 'auto',
          resize: 'none',
          padding: 0
        },

        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {
          // Improve type search style.
          '-moz-appearance': 'textfield',
          '-webkit-appearance': 'textfield'
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {},

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {},

        /* Styles applied to the `input` element if `hiddenLabel={true}`. */
        inputHiddenLabel: {}
      };
    };
    var useEnhancedEffect$3 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * `InputBase` contains as few styles as possible.
     * It aims to be a simple building block for creating an input.
     * It contains a load of style reset and some state logic.
     */

    var InputBase = /*#__PURE__*/React__namespace.forwardRef(function InputBase(props, ref) {
      var ariaDescribedby = props['aria-describedby'],
          autoComplete = props.autoComplete,
          autoFocus = props.autoFocus,
          classes = props.classes,
          className = props.className;
          props.color;
          var defaultValue = props.defaultValue,
          disabled = props.disabled,
          endAdornment = props.endAdornment;
          props.error;
          var _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          id = props.id,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$inputProps = props.inputProps,
          inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
          inputRefProp = props.inputRef;
          props.margin;
          var _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClick = props.onClick,
          onFocus = props.onFocus,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          placeholder = props.placeholder,
          readOnly = props.readOnly,
          renderSuffix = props.renderSuffix,
          rows = props.rows,
          rowsMax = props.rowsMax,
          rowsMin = props.rowsMin,
          startAdornment = props.startAdornment,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          valueProp = props.value,
          other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "startAdornment", "type", "value"]);

      var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;

      var _React$useRef = React__namespace.useRef(value != null),
          isControlled = _React$useRef.current;

      var inputRef = React__namespace.useRef();
      var handleInputRefWarning = React__namespace.useCallback(function (instance) {
        if (process.env.NODE_ENV !== 'production') {
          if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
            console.error(['Material-UI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\n'));
          }
        }
      }, []);
      var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
      var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
      var handleInputRef = useForkRef(inputRef, handleInputRefProp);

      var _React$useState = React__namespace.useState(false),
          focused = _React$useState[0],
          setFocused = _React$useState[1];

      var muiFormControl = useFormControl$1();

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }

          return undefined;
        }, [muiFormControl]);
      }

      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.

      React__namespace.useEffect(function () {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);

          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      var onFilled = muiFormControl && muiFormControl.onFilled;
      var onEmpty = muiFormControl && muiFormControl.onEmpty;
      var checkDirty = React__namespace.useCallback(function (obj) {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$3(function () {
        if (isControlled) {
          checkDirty({
            value: value
          });
        }
      }, [value, checkDirty, isControlled]);

      var handleFocus = function handleFocus(event) {
        // Fix a bug with IE 11 where the focus/blur events are triggered
        // while the input is disabled.
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }

        if (onFocus) {
          onFocus(event);
        }

        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }

        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }

        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }

        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };

      var handleChange = function handleChange(event) {
        if (!isControlled) {
          var element = event.target || inputRef.current;

          if (element == null) {
            throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(1));
          }

          checkDirty({
            value: element.value
          });
        }

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (inputPropsProp.onChange) {
          inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
        } // Perform in the willUpdate


        if (onChange) {
          onChange.apply(void 0, [event].concat(args));
        }
      }; // Check the input state on mount, in case it was filled by the user
      // or auto filled by the browser before the hydration (for SSR).


      React__namespace.useEffect(function () {
        checkDirty(inputRef.current);
      }, []); // eslint-disable-line react-hooks/exhaustive-deps

      var handleClick = function handleClick(event) {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }

        if (onClick) {
          onClick(event);
        }
      };

      var InputComponent = inputComponent;

      var inputProps = _extends$3({}, inputPropsProp, {
        ref: handleInputRef
      });

      if (typeof InputComponent !== 'string') {
        inputProps = _extends$3({
          // Rename ref to inputRef as we don't know the
          // provided `inputComponent` structure.
          inputRef: handleInputRef,
          type: type
        }, inputProps, {
          ref: null
        });
      } else if (multiline) {
        if (rows && !rowsMax && !rowsMin) {
          InputComponent = 'textarea';
        } else {
          inputProps = _extends$3({
            rows: rows,
            rowsMax: rowsMax
          }, inputProps);
          InputComponent = TextareaAutosize;
        }
      } else {
        inputProps = _extends$3({
          type: type
        }, inputProps);
      }

      var handleAutoFill = function handleAutoFill(event) {
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
          value: 'x'
        });
      };

      React__namespace.useEffect(function () {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: clsx(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
        onClick: handleClick,
        ref: ref
      }, other), startAdornment, /*#__PURE__*/React__namespace.createElement(FormControlContext.Provider, {
        value: null
      }, /*#__PURE__*/React__namespace.createElement(InputComponent, _extends$3({
        "aria-invalid": fcs.error,
        "aria-describedby": ariaDescribedby,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: fcs.disabled,
        id: id,
        onAnimationStart: handleAutoFill,
        name: name,
        placeholder: placeholder,
        readOnly: readOnly,
        required: fcs.required,
        rows: rows,
        value: value,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp
      }, inputProps, {
        className: clsx(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: handleFocus
      }))), endAdornment, renderSuffix ? renderSuffix(_extends$3({}, fcs, {
        startAdornment: startAdornment
      })) : null);
    });
    process.env.NODE_ENV !== "production" ? InputBase.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      'aria-describedby': propTypes.string,

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: propTypes.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,

      /**
       * Callback fired when the input is blurred.
       *
       * Notice that the first argument (event) might be undefined.
       */
      onBlur: propTypes.func,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * @ignore
       */
      onClick: propTypes.func,

      /**
       * @ignore
       */
      onFocus: propTypes.func,

      /**
       * @ignore
       */
      onKeyDown: propTypes.func,

      /**
       * @ignore
       */
      onKeyUp: propTypes.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,

      /**
       * @ignore
       */
      renderSuffix: propTypes.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    } : void 0;
    var InputBase$1 = withStyles(styles$r, {
      name: 'MuiInputBase'
    })(InputBase);

    var styles$q = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          backgroundColor: backgroundColor,
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          '&:hover': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: backgroundColor
            }
          },
          '&$focused': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'
          },
          '&$disabled': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
          }
        },

        /* Styles applied to the root element if color secondary. */
        colorSecondary: {
          '&$underline:after': {
            borderBottomColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary.main),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red

          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&:hover:before': {
            borderBottom: "1px solid ".concat(theme.palette.text.primary)
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },

        /* Pseudo-class applied to the root element if the component is focused. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 12
        },

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 12
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '27px 12px 10px',
          '&$marginDense': {
            paddingTop: 23,
            paddingBottom: 6
          }
        },

        /* Styles applied to the `input` element. */
        input: {
          padding: '27px 12px 10px',
          '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
            caretColor: theme.palette.type === 'light' ? null : '#fff',
            borderTopLeftRadius: 'inherit',
            borderTopRightRadius: 'inherit'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 23,
          paddingBottom: 6
        },

        /* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */
        inputHiddenLabel: {
          paddingTop: 18,
          paddingBottom: 19,
          '&$inputMarginDense': {
            paddingTop: 10,
            paddingBottom: 11
          }
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var FilledInput = /*#__PURE__*/React__namespace.forwardRef(function FilledInput(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

      return /*#__PURE__*/React__namespace.createElement(InputBase$1, _extends$3({
        classes: _extends$3({}, classes, {
          root: clsx(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? FilledInput.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: propTypes.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: propTypes.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    } : void 0;
    FilledInput.muiName = 'Input';
    var FilledInput$1 = withStyles(styles$q, {
      name: 'MuiFilledInput'
    })(FilledInput);

    var styles$p = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        flexDirection: 'column',
        position: 'relative',
        // Reset fieldset default style.
        minWidth: 0,
        padding: 0,
        margin: 0,
        border: 0,
        verticalAlign: 'top' // Fix alignment issue on Safari.

      },

      /* Styles applied to the root element if `margin="normal"`. */
      marginNormal: {
        marginTop: 16,
        marginBottom: 8
      },

      /* Styles applied to the root element if `margin="dense"`. */
      marginDense: {
        marginTop: 8,
        marginBottom: 4
      },

      /* Styles applied to the root element if `fullWidth={true}`. */
      fullWidth: {
        width: '100%'
      }
    };
    /**
     * Provides context such as filled/focused/error/required for form inputs.
     * Relying on the context provides high flexibility and ensures that the state always stays
     * consistent across the children of the `FormControl`.
     * This context is used by the following components:
     *
     *  - FormLabel
     *  - FormHelperText
     *  - Input
     *  - InputLabel
     *
     * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
     *
     * ```jsx
     * <FormControl>
     *   <InputLabel htmlFor="my-input">Email address</InputLabel>
     *   <Input id="my-input" aria-describedby="my-helper-text" />
     *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
     * </FormControl>
     * ```
     *
     * ⚠️Only one input can be used within a FormControl.
     */

    var FormControl = /*#__PURE__*/React__namespace.forwardRef(function FormControl(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          visuallyFocused = props.focused,
          _props$hiddenLabel = props.hiddenLabel,
          hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,
          _props$margin = props.margin,
          margin = _props$margin === void 0 ? 'none' : _props$margin,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          size = props.size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);

      var _React$useState = React__namespace.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialAdornedStart = false;

        if (children) {
          React__namespace.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }

            var input = isMuiElement(child, ['Select']) ? child.props.input : child;

            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }

        return initialAdornedStart;
      }),
          adornedStart = _React$useState[0],
          setAdornedStart = _React$useState[1];

      var _React$useState2 = React__namespace.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialFilled = false;

        if (children) {
          React__namespace.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }

            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }

        return initialFilled;
      }),
          filled = _React$useState2[0],
          setFilled = _React$useState2[1];

      var _React$useState3 = React__namespace.useState(false),
          _focused = _React$useState3[0],
          setFocused = _React$useState3[1];

      var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;

      if (disabled && focused) {
        setFocused(false);
      }

      var registerEffect;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var registeredInput = React__namespace.useRef(false);

        registerEffect = function registerEffect() {
          if (registeredInput.current) {
            console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\n'));
          }

          registeredInput.current = true;
          return function () {
            registeredInput.current = false;
          };
        };
      }

      var onFilled = React__namespace.useCallback(function () {
        setFilled(true);
      }, []);
      var onEmpty = React__namespace.useCallback(function () {
        setFilled(false);
      }, []);
      var childContext = {
        adornedStart: adornedStart,
        setAdornedStart: setAdornedStart,
        color: color,
        disabled: disabled,
        error: error,
        filled: filled,
        focused: focused,
        fullWidth: fullWidth,
        hiddenLabel: hiddenLabel,
        margin: (size === 'small' ? 'dense' : undefined) || margin,
        onBlur: function onBlur() {
          setFocused(false);
        },
        onEmpty: onEmpty,
        onFilled: onFilled,
        onFocus: function onFocus() {
          setFocused(true);
        },
        registerEffect: registerEffect,
        required: required,
        variant: variant
      };
      return /*#__PURE__*/React__namespace.createElement(FormControlContext.Provider, {
        value: childContext
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, margin !== 'none' && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
        ref: ref
      }, other), children));
    });
    process.env.NODE_ENV !== "production" ? FormControl.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The contents of the form control.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: propTypes.bool,

      /**
       * If `true`, the component will be displayed in focused state.
       */
      focused: propTypes.bool,

      /**
       * If `true`, the component will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * If `true`, the label will be hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       */
      hiddenLabel: propTypes.bool,

      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: propTypes.oneOf(['dense', 'none', 'normal']),

      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool,

      /**
       * The size of the text field.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var FormControl$1 = withStyles(styles$p, {
      name: 'MuiFormControl'
    })(FormControl);

    var styles$o = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          alignItems: 'center',
          cursor: 'pointer',
          // For correct alignment with the text.
          verticalAlign: 'middle',
          WebkitTapHighlightColor: 'transparent',
          marginLeft: -11,
          marginRight: 16,
          // used for row presentation of radio/checkbox
          '&$disabled': {
            cursor: 'default'
          }
        },

        /* Styles applied to the root element if `labelPlacement="start"`. */
        labelPlacementStart: {
          flexDirection: 'row-reverse',
          marginLeft: 16,
          // used for row presentation of radio/checkbox
          marginRight: -11
        },

        /* Styles applied to the root element if `labelPlacement="top"`. */
        labelPlacementTop: {
          flexDirection: 'column-reverse',
          marginLeft: 16
        },

        /* Styles applied to the root element if `labelPlacement="bottom"`. */
        labelPlacementBottom: {
          flexDirection: 'column',
          marginLeft: 16
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the label's Typography component. */
        label: {
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        }
      };
    };
    /**
     * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
     * Use this component if you want to display an extra label.
     */

    var FormControlLabel = /*#__PURE__*/React__namespace.forwardRef(function FormControlLabel(props, ref) {
      props.checked;
          var classes = props.classes,
          className = props.className,
          control = props.control,
          disabledProp = props.disabled;
          props.inputRef;
          var label = props.label,
          _props$labelPlacement = props.labelPlacement,
          labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement;
          props.name;
          props.onChange;
          props.value;
          var other = _objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "name", "onChange", "value"]);

      var muiFormControl = useFormControl();
      var disabled = disabledProp;

      if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
        disabled = control.props.disabled;
      }

      if (typeof disabled === 'undefined' && muiFormControl) {
        disabled = muiFormControl.disabled;
      }

      var controlProps = {
        disabled: disabled
      };
      ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
        if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
          controlProps[key] = props[key];
        }
      });
      return /*#__PURE__*/React__namespace.createElement("label", _extends$3({
        className: clsx(classes.root, className, labelPlacement !== 'end' && classes["labelPlacement".concat(capitalize(labelPlacement))], disabled && classes.disabled),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.cloneElement(control, controlProps), /*#__PURE__*/React__namespace.createElement(Typography$1, {
        component: "span",
        className: clsx(classes.label, disabled && classes.disabled)
      }, label));
    });
    process.env.NODE_ENV !== "production" ? FormControlLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component appears selected.
       */
      checked: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
       */
      control: propTypes.element.isRequired,

      /**
       * If `true`, the control will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * The text to be used in an enclosing label element.
       */
      label: propTypes.node,

      /**
       * The position of the label.
       */
      labelPlacement: propTypes.oneOf(['bottom', 'end', 'start', 'top']),

      /**
       * @ignore
       */
      name: propTypes.string,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: propTypes.func,

      /**
       * The value of the component.
       */
      value: propTypes.any
    } : void 0;
    var FormControlLabel$1 = withStyles(styles$o, {
      name: 'MuiFormControlLabel'
    })(FormControlLabel);

    var styles$n = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({
          color: theme.palette.text.secondary
        }, theme.typography.caption, {
          textAlign: 'left',
          marginTop: 3,
          margin: 0,
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          marginTop: 4
        },

        /* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */
        contained: {
          marginLeft: 14,
          marginRight: 14
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {}
      };
    };
    var FormHelperText = /*#__PURE__*/React__namespace.forwardRef(function FormHelperText(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'p' : _props$component;
          props.disabled;
          props.error;
          props.filled;
          props.focused;
          props.margin;
          props.required;
          props.variant;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']
      });
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),
        ref: ref
      }, other), children === ' ' ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      }) : children);
    });
    process.env.NODE_ENV !== "production" ? FormHelperText.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       *
       * If `' '` is provided, the component reserves one line height for displaying a future message.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the helper text should be displayed in a disabled state.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, helper text should be displayed in an error state.
       */
      error: propTypes.bool,

      /**
       * If `true`, the helper text should use filled classes key.
       */
      filled: propTypes.bool,

      /**
       * If `true`, the helper text should use focused classes key.
       */
      focused: propTypes.bool,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense']),

      /**
       * If `true`, the helper text should use required classes key.
       */
      required: propTypes.bool,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var FormHelperText$1 = withStyles(styles$n, {
      name: 'MuiFormHelperText'
    })(FormHelperText);

    var styles$m = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({
          color: theme.palette.text.secondary
        }, theme.typography.body1, {
          lineHeight: 1,
          padding: 0,
          '&$focused': {
            color: theme.palette.primary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {
          '&$focused': {
            color: theme.palette.secondary.main
          }
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},

        /* Styles applied to the asterisk element. */
        asterisk: {
          '&$error': {
            color: theme.palette.error.main
          }
        }
      };
    };
    var FormLabel = /*#__PURE__*/React__namespace.forwardRef(function FormLabel(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className;
          props.color;
          var _props$component = props.component,
          Component = _props$component === void 0 ? 'label' : _props$component;
          props.disabled;
          props.error;
          props.filled;
          props.focused;
          props.required;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
      });
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
        ref: ref
      }, other), children, fcs.required && /*#__PURE__*/React__namespace.createElement("span", {
        "aria-hidden": true,
        className: clsx(classes.asterisk, fcs.error && classes.error)
      }, "\u2009", '*'));
    });
    process.env.NODE_ENV !== "production" ? FormLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the label should be displayed in a disabled state.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: propTypes.bool,

      /**
       * If `true`, the label should use filled classes key.
       */
      filled: propTypes.bool,

      /**
       * If `true`, the input of this label is focused (used by `FormGroup` components).
       */
      focused: propTypes.bool,

      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool
    } : void 0;
    var FormLabel$1 = withStyles(styles$m, {
      name: 'MuiFormLabel'
    })(FormLabel);

    function getScale(value) {
      return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
    }

    var styles$l = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: 'none'
      }
    };
    /**
     * The Grow transition is used by the [Tooltip](/components/tooltips/) and
     * [Popover](/components/popover/) components.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Grow = /*#__PURE__*/React__namespace.forwardRef(function Grow(props, ref) {
      var children = props.children,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

      var timer = React__namespace.useRef();
      var autoTimeout = React__namespace.useRef();
      var theme = useTheme();
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var foreignRef = useForkRef(children.ref, ref);
      var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray$1(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEntering = normalizedTransitionCallback(onEntering);
      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        reflow(node); // So the animation always start from the start.

        var _getTransitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        }),
            transitionDuration = _getTransitionProps.duration,
            delay = _getTransitionProps.delay;

        var duration;

        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }

        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay
        })].join(',');

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var _getTransitionProps2 = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        }),
            transitionDuration = _getTransitionProps2.duration,
            delay = _getTransitionProps2.delay;

        var duration;

        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }

        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay || duration * 0.333
        })].join(',');
        node.style.opacity = '0';
        node.style.transform = getScale(0.75);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);

      var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
        var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
      };

      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(timer.current);
        };
      }, []);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: addEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          style: _extends$3({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$l[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Grow.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: propTypes.element,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the child component.
       */
      disableStrictModeCompat: propTypes.bool,

      /**
       * If `true`, show the component; triggers the enter or exit animation.
       */
      in: propTypes.bool,

      /**
       * @ignore
       */
      onEnter: propTypes.func,

      /**
       * @ignore
       */
      onEntered: propTypes.func,

      /**
       * @ignore
       */
      onEntering: propTypes.func,

      /**
       * @ignore
       */
      onExit: propTypes.func,

      /**
       * @ignore
       */
      onExited: propTypes.func,

      /**
       * @ignore
       */
      onExiting: propTypes.func,

      /**
       * @ignore
       */
      style: propTypes.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })])
    } : void 0;
    Grow.muiSupportAuto = true;

    var styles$k = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative'
        },

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          'label + &': {
            marginTop: 16
          }
        },

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if color secondary. */
        colorSecondary: {
          '&$underline:after': {
            borderBottomColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary.main),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red

          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&:hover:not($disabled):before': {
            borderBottom: "2px solid ".concat(theme.palette.text.primary),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              borderBottom: "1px solid ".concat(bottomLineColor)
            }
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {},

        /* Styles applied to the `input` element. */
        input: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {},

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {},

        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {}
      };
    };
    var Input = /*#__PURE__*/React__namespace.forwardRef(function Input(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

      return /*#__PURE__*/React__namespace.createElement(InputBase$1, _extends$3({
        classes: _extends$3({}, classes, {
          root: clsx(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Input.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: propTypes.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: propTypes.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    } : void 0;
    Input.muiName = 'Input';
    var Input$1 = withStyles(styles$k, {
      name: 'MuiInput'
    })(Input);

    var styles$j = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        height: '0.01em',
        // Fix IE 11 flexbox alignment. To remove at some point.
        maxHeight: '2em',
        alignItems: 'center',
        whiteSpace: 'nowrap'
      },

      /* Styles applied to the root element if `variant="filled"`. */
      filled: {
        '&$positionStart:not($hiddenLabel)': {
          marginTop: 16
        }
      },

      /* Styles applied to the root element if `position="start"`. */
      positionStart: {
        marginRight: 8
      },

      /* Styles applied to the root element if `position="end"`. */
      positionEnd: {
        marginLeft: 8
      },

      /* Styles applied to the root element if `disablePointerEvents=true`. */
      disablePointerEvents: {
        pointerEvents: 'none'
      },

      /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */
      hiddenLabel: {},

      /* Styles applied if the adornment is used inside <FormControl margin="dense" />. */
      marginDense: {}
    };
    var InputAdornment = /*#__PURE__*/React__namespace.forwardRef(function InputAdornment(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disablePointer = props.disablePointerEvents,
          disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          position = props.position,
          variantProp = props.variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);

      var muiFormControl = useFormControl$1() || {};
      var variant = variantProp;

      if (variantProp && muiFormControl.variant) {
        if (process.env.NODE_ENV !== 'production') {
          if (variantProp === muiFormControl.variant) {
            console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
          }
        }
      }

      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }

      return /*#__PURE__*/React__namespace.createElement(FormControlContext.Provider, {
        value: null
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {
          'start': classes.positionStart,
          'end': classes.positionEnd
        }[position], muiFormControl.margin === 'dense' && classes.marginDense),
        ref: ref
      }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React__namespace.createElement(Typography$1, {
        color: "textSecondary"
      }, children) : children));
    });
    process.env.NODE_ENV !== "production" ? InputAdornment.propTypes = {
      /**
       * The content of the component, normally an `IconButton` or string.
       */
      children: propTypes.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Disable pointer events on the root.
       * This allows for the content of the adornment to focus the input on click.
       */
      disablePointerEvents: propTypes.bool,

      /**
       * If children is a string then disable wrapping in a Typography component.
       */
      disableTypography: propTypes.bool,

      /**
       * @ignore
       */
      muiFormControl: propTypes.object,

      /**
       * The position this adornment should appear relative to the `Input`.
       */
      position: propTypes.oneOf(['start', 'end']),

      /**
       * The variant to use.
       * Note: If you are using the `TextField` component or the `FormControl` component
       * you do not have to set this manually.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;
    var InputAdornment$1 = withStyles(styles$j, {
      name: 'MuiInputAdornment'
    })(InputAdornment);

    var styles$i = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          transformOrigin: 'top left'
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},

        /* Pseudo-class applied to the asterisk element. */
        asterisk: {},

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          position: 'absolute',
          left: 0,
          top: 0,
          // slight alteration to spec spacing to match visual spec result
          transform: 'translate(0, 24px) scale(1)'
        },

        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          // Compensation for the `Input.inputDense` style.
          transform: 'translate(0, 21px) scale(1)'
        },

        /* Styles applied to the `input` element if `shrink={true}`. */
        shrink: {
          transform: 'translate(0, 1.5px) scale(0.75)',
          transformOrigin: 'top left'
        },

        /* Styles applied to the `input` element if `disableAnimation={false}`. */
        animated: {
          transition: theme.transitions.create(['color', 'transform'], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        },

        /* Styles applied to the root element if `variant="filled"`. */
        filled: {
          // Chrome's autofill feature gives the input field a yellow background.
          // Since the input field is behind the label in the HTML tree,
          // the input field is drawn last and hides the label with an opaque background color.
          // zIndex: 1 will raise the label above opaque background-colors of input.
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(12px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(12px, 17px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(12px, 10px) scale(0.75)',
            '&$marginDense': {
              transform: 'translate(12px, 7px) scale(0.75)'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          // see comment above on filled.zIndex
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(14px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(14px, 12px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(14px, -6px) scale(0.75)'
          }
        }
      };
    };
    var InputLabel = /*#__PURE__*/React__namespace.forwardRef(function InputLabel(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disableAnimati = props.disableAnimation,
          disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati;
          props.margin;
          var shrinkProp = props.shrink;
          props.variant;
          var other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);

      var muiFormControl = useFormControl();
      var shrink = shrinkProp;

      if (typeof shrink === 'undefined' && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }

      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['margin', 'variant']
      });
      return /*#__PURE__*/React__namespace.createElement(FormLabel$1, _extends$3({
        "data-shrink": shrink,
        className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {
          'filled': classes.filled,
          'outlined': classes.outlined
        }[fcs.variant]),
        classes: {
          focused: classes.focused,
          disabled: classes.disabled,
          error: classes.error,
          required: classes.required,
          asterisk: classes.asterisk
        },
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? InputLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The contents of the `InputLabel`.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * If `true`, the transition animation is disabled.
       */
      disableAnimation: propTypes.bool,

      /**
       * If `true`, apply disabled class.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: propTypes.bool,

      /**
       * If `true`, the input of this label is focused.
       */
      focused: propTypes.bool,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense']),

      /**
       * if `true`, the label will indicate that the input is required.
       */
      required: propTypes.bool,

      /**
       * If `true`, the label is shrunk.
       */
      shrink: propTypes.bool,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var InputLabel$1 = withStyles(styles$i, {
      name: 'MuiInputLabel'
    })(InputLabel);

    /**
     * @ignore - internal component.
     */

    var ListContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      ListContext.displayName = 'ListContext';
    }

    var styles$h = {
      /* Styles applied to the root element. */
      root: {
        listStyle: 'none',
        margin: 0,
        padding: 0,
        position: 'relative'
      },

      /* Styles applied to the root element if `disablePadding={false}`. */
      padding: {
        paddingTop: 8,
        paddingBottom: 8
      },

      /* Styles applied to the root element if dense. */
      dense: {},

      /* Styles applied to the root element if a `subheader` is provided. */
      subheader: {
        paddingTop: 0
      }
    };
    var List = /*#__PURE__*/React__namespace.forwardRef(function List(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$dense = props.dense,
          dense = _props$dense === void 0 ? false : _props$dense,
          _props$disablePadding = props.disablePadding,
          disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
          subheader = props.subheader,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);

      var context = React__namespace.useMemo(function () {
        return {
          dense: dense
        };
      }, [dense]);
      return /*#__PURE__*/React__namespace.createElement(ListContext.Provider, {
        value: context
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
        ref: ref
      }, other), subheader, children));
    });
    process.env.NODE_ENV !== "production" ? List.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
       * the list and list items.
       * The prop is available to descendant components as the `dense` context.
       */
      dense: propTypes.bool,

      /**
       * If `true`, vertical padding will be removed from the list.
       */
      disablePadding: propTypes.bool,

      /**
       * The content of the subheader, normally `ListSubheader`.
       */
      subheader: propTypes.node
    } : void 0;
    var List$1 = withStyles(styles$h, {
      name: 'MuiList'
    })(List);

    var styles$g = function styles(theme) {
      return {
        /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */
        root: {
          display: 'flex',
          justifyContent: 'flex-start',
          alignItems: 'center',
          position: 'relative',
          textDecoration: 'none',
          width: '100%',
          boxSizing: 'border-box',
          textAlign: 'left',
          paddingTop: 8,
          paddingBottom: 8,
          '&$focusVisible': {
            backgroundColor: theme.palette.action.selected
          },
          '&$selected, &$selected:hover': {
            backgroundColor: theme.palette.action.selected
          },
          '&$disabled': {
            opacity: 0.5
          }
        },

        /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */
        container: {
          position: 'relative'
        },

        /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */
        focusVisible: {},

        /* Styles applied to the `component` element if dense. */
        dense: {
          paddingTop: 4,
          paddingBottom: 4
        },

        /* Styles applied to the `component` element if `alignItems="flex-start"`. */
        alignItemsFlexStart: {
          alignItems: 'flex-start'
        },

        /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the inner `component` element if `divider={true}`. */
        divider: {
          borderBottom: "1px solid ".concat(theme.palette.divider),
          backgroundClip: 'padding-box'
        },

        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },

        /* Styles applied to the inner `component` element if `button={true}`. */
        button: {
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */
        secondaryAction: {
          // Add some space to avoid collision as `ListItemSecondaryAction`
          // is absolutely positioned.
          paddingRight: 48
        },

        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {}
      };
    };
    var useEnhancedEffect$2 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * Uses an additional container component if `ListItemSecondaryAction` is the last child.
     */

    var ListItem = /*#__PURE__*/React__namespace.forwardRef(function ListItem(props, ref) {
      var _props$alignItems = props.alignItems,
          alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          _props$button = props.button,
          button = _props$button === void 0 ? false : _props$button,
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          componentProp = props.component,
          _props$ContainerCompo = props.ContainerComponent,
          ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,
          _props$ContainerProps = props.ContainerProps;
      _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;

      var ContainerClassName = _props$ContainerProps.className,
          ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]),
          _props$dense = props.dense,
          dense = _props$dense === void 0 ? false : _props$dense,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$divider = props.divider,
          divider = _props$divider === void 0 ? false : _props$divider,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);

      var context = React__namespace.useContext(ListContext);
      var childContext = {
        dense: dense || context.dense || false,
        alignItems: alignItems
      };
      var listItemRef = React__namespace.useRef(null);
      useEnhancedEffect$2(function () {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          } else if (process.env.NODE_ENV !== 'production') {
            console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');
          }
        }
      }, [autoFocus]);
      var children = React__namespace.Children.toArray(childrenProp);
      var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        listItemRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);

      var componentProps = _extends$3({
        className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
        disabled: disabled
      }, other);

      var Component = componentProp || 'li';

      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }

      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }

        return /*#__PURE__*/React__namespace.createElement(ListContext.Provider, {
          value: childContext
        }, /*#__PURE__*/React__namespace.createElement(ContainerComponent, _extends$3({
          className: clsx(classes.container, ContainerClassName),
          ref: handleRef
        }, ContainerProps), /*#__PURE__*/React__namespace.createElement(Component, componentProps, children), children.pop()));
      }

      return /*#__PURE__*/React__namespace.createElement(ListContext.Provider, {
        value: childContext
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: handleRef
      }, componentProps), children));
    });
    process.env.NODE_ENV !== "production" ? ListItem.propTypes = {
      /**
       * Defines the `align-items` style property.
       */
      alignItems: propTypes.oneOf(['flex-start', 'center']),

      /**
       * If `true`, the list item will be focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       */
      autoFocus: propTypes.bool,

      /**
       * If `true`, the list item will be a button (using `ButtonBase`). Props intended
       * for `ButtonBase` can then be applied to `ListItem`.
       */
      button: propTypes.bool,

      /**
       * The content of the component. If a `ListItemSecondaryAction` is used it must
       * be the last child.
       */
      children: chainPropTypes(propTypes.node, function (props) {
        var children = React__namespace.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

        var secondaryActionIndex = -1;

        for (var i = children.length - 1; i >= 0; i -= 1) {
          var child = children[i];

          if (isMuiElement(child, ['ListItemSecondaryAction'])) {
            secondaryActionIndex = i;
            break;
          }
        } //  is ListItemSecondaryAction the last child of ListItem


        if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
          return new Error('Material-UI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The container component used when a `ListItemSecondaryAction` is the last child.
       */
      ContainerComponent: propTypes.elementType,

      /**
       * Props applied to the container component if used.
       */
      ContainerProps: propTypes.object,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
       */
      dense: propTypes.bool,

      /**
       * If `true`, the list item will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: propTypes.bool,

      /**
       * If `true`, a 1px light border is added to the bottom of the list item.
       */
      divider: propTypes.bool,

      /**
       * @ignore
       */
      focusVisibleClassName: propTypes.string,

      /**
       * Use to apply selected styling.
       */
      selected: propTypes.bool
    } : void 0;
    var ListItem$1 = withStyles(styles$g, {
      name: 'MuiListItem'
    })(ListItem);

    var styles$f = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          boxSizing: 'border-box',
          lineHeight: '48px',
          listStyle: 'none',
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily,
          fontWeight: theme.typography.fontWeightMedium,
          fontSize: theme.typography.pxToRem(14)
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },

        /* Styles applied to the root element if `inset={true}`. */
        inset: {
          paddingLeft: 72
        },

        /* Styles applied to the root element if `disableSticky={false}`. */
        sticky: {
          position: 'sticky',
          top: 0,
          zIndex: 1,
          backgroundColor: 'inherit'
        }
      };
    };
    var ListSubheader = /*#__PURE__*/React__namespace.forwardRef(function ListSubheader(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$disableSticky = props.disableSticky,
          disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,
          _props$inset = props.inset,
          inset = _props$inset === void 0 ? false : _props$inset,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ListSubheader.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'inherit']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the List Subheader will not have gutters.
       */
      disableGutters: propTypes.bool,

      /**
       * If `true`, the List Subheader will not stick to the top during scroll.
       */
      disableSticky: propTypes.bool,

      /**
       * If `true`, the List Subheader will be indented.
       */
      inset: propTypes.bool
    } : void 0;
    var ListSubheader$1 = withStyles(styles$f, {
      name: 'MuiListSubheader'
    })(ListSubheader);

    function getOffsetTop(rect, vertical) {
      var offset = 0;

      if (typeof vertical === 'number') {
        offset = vertical;
      } else if (vertical === 'center') {
        offset = rect.height / 2;
      } else if (vertical === 'bottom') {
        offset = rect.height;
      }

      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      var offset = 0;

      if (typeof horizontal === 'number') {
        offset = horizontal;
      } else if (horizontal === 'center') {
        offset = rect.width / 2;
      } else if (horizontal === 'right') {
        offset = rect.width;
      }

      return offset;
    }

    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
        return typeof n === 'number' ? "".concat(n, "px") : n;
      }).join(' ');
    } // Sum the scrollTop between two elements.


    function getScrollParent$1(parent, child) {
      var element = child;
      var scrollTop = 0;

      while (element && element !== parent) {
        element = element.parentElement;
        scrollTop += element.scrollTop;
      }

      return scrollTop;
    }

    function getAnchorEl$1(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }

    var styles$e = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the `Paper` component. */
      paper: {
        position: 'absolute',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        // It's most likely on issue on userland.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
      }
    };
    var Popover = /*#__PURE__*/React__namespace.forwardRef(function Popover(props, ref) {
      var action = props.action,
          anchorEl = props.anchorEl,
          _props$anchorOrigin = props.anchorOrigin,
          anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
      } : _props$anchorOrigin,
          anchorPosition = props.anchorPosition,
          _props$anchorReferenc = props.anchorReference,
          anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc,
          children = props.children,
          classes = props.classes,
          className = props.className,
          containerProp = props.container,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 8 : _props$elevation,
          getContentAnchorEl = props.getContentAnchorEl,
          _props$marginThreshol = props.marginThreshold,
          marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          _props$transformOrigi = props.transformOrigin,
          transformOrigin = _props$transformOrigi === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
      } : _props$transformOrigi,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Grow : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          _props$TransitionProp = props.TransitionProps,
          TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,
          other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      var paperRef = React__namespace.useRef(); // Returns the top/left offset of the position
      // to attach to on the anchor element (or body if none is provided)

      var getAnchorOffset = React__namespace.useCallback(function (contentAnchorOffset) {
        if (anchorReference === 'anchorPosition') {
          if (process.env.NODE_ENV !== 'production') {
            if (!anchorPosition) {
              console.error('Material-UI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
            }
          }

          return anchorPosition;
        }

        var resolvedAnchorEl = getAnchorEl$1(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

        var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        var anchorRect = anchorElement.getBoundingClientRect();

        if (process.env.NODE_ENV !== 'production') {
          var box = anchorElement.getBoundingClientRect();

          if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        }

        var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the vertical offset of inner content to anchor the transform on if provided

      var getContentAnchorOffset = React__namespace.useCallback(function (element) {
        var contentAnchorOffset = 0;

        if (getContentAnchorEl && anchorReference === 'anchorEl') {
          var contentAnchorEl = getContentAnchorEl(element);

          if (contentAnchorEl && element.contains(contentAnchorEl)) {
            var scrollTop = getScrollParent$1(element, contentAnchorEl);
            contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
          } // != the default value


          if (process.env.NODE_ENV !== 'production') {
            if (anchorOrigin.vertical !== 'top') {
              console.error(['Material-UI: You can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` prop to the popover component.', 'Only use one of the two props.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\n'));
            }
          }
        }

        return contentAnchorOffset;
      }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]); // Return the base transform origin using the element
      // and taking the content anchor offset into account if in use

      var getTransformOrigin = React__namespace.useCallback(function (elemRect) {
        var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      var getPositioningStyle = React__namespace.useCallback(function (element) {
        // Check if the parent has requested anchoring on an inner content node
        var contentAnchorOffset = getContentAnchorOffset(element);
        var elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        }; // Get the transform origin point on the element itself

        var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);

        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        } // Get the offset of of the anchoring element


        var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning

        var top = anchorOffset.top - elemTransformOrigin.vertical;
        var left = anchorOffset.left - elemTransformOrigin.horizontal;
        var bottom = top + elemRect.height;
        var right = left + elemRect.width; // Use the parent window of the anchorEl if provided

        var containerWindow = ownerWindow(getAnchorEl$1(anchorEl)); // Window thresholds taking required margin into account

        var heightThreshold = containerWindow.innerHeight - marginThreshold;
        var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

        if (top < marginThreshold) {
          var diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
          var _diff = bottom - heightThreshold;

          top -= _diff;
          elemTransformOrigin.vertical += _diff;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
            console.error(['Material-UI: The popover component is too tall.', "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
          }
        } // Check if the horizontal axis needs shifting


        if (left < marginThreshold) {
          var _diff2 = left - marginThreshold;

          left -= _diff2;
          elemTransformOrigin.horizontal += _diff2;
        } else if (right > widthThreshold) {
          var _diff3 = right - widthThreshold;

          left -= _diff3;
          elemTransformOrigin.horizontal += _diff3;
        }

        return {
          top: "".concat(Math.round(top), "px"),
          left: "".concat(Math.round(left), "px"),
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
      var setPositioningStyles = React__namespace.useCallback(function () {
        var element = paperRef.current;

        if (!element) {
          return;
        }

        var positioning = getPositioningStyle(element);

        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }

        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }

        element.style.transformOrigin = positioning.transformOrigin;
      }, [getPositioningStyle]);

      var handleEntering = function handleEntering(element, isAppearing) {
        if (onEntering) {
          onEntering(element, isAppearing);
        }

        setPositioningStyles();
      };

      var handlePaperRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        paperRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      React__namespace.useEffect(function () {
        if (open) {
          setPositioningStyles();
        }
      });
      React__namespace.useImperativeHandle(action, function () {
        return open ? {
          updatePosition: function updatePosition() {
            setPositioningStyles();
          }
        } : null;
      }, [open, setPositioningStyles]);
      React__namespace.useEffect(function () {
        if (!open) {
          return undefined;
        }

        var handleResize = debounce$1(function () {
          setPositioningStyles();
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [open, setPositioningStyles]);
      var transitionDuration = transitionDurationProp;

      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      } // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container


      var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl$1(anchorEl)).body : undefined);
      return /*#__PURE__*/React__namespace.createElement(Modal, _extends$3({
        container: container,
        open: open,
        ref: ref,
        BackdropProps: {
          invisible: true
        },
        className: clsx(classes.root, className)
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: open,
        onEnter: onEnter,
        onEntered: onEntered,
        onExit: onExit,
        onExited: onExited,
        onExiting: onExiting,
        timeout: transitionDuration
      }, TransitionProps, {
        onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
      }), /*#__PURE__*/React__namespace.createElement(Paper$1, _extends$3({
        elevation: elevation,
        ref: handlePaperRef
      }, PaperProps, {
        className: clsx(classes.paper, PaperProps.className)
      }), children)));
    });
    process.env.NODE_ENV !== "production" ? Popover.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A ref for imperative actions.
       * It currently only supports updatePosition() action.
       */
      action: refType,

      /**
       * A HTML element, or a function that returns it.
       * It's used to set the position of the popover.
       */
      anchorEl: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.func]), function (props) {
        if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
          var resolvedAnchorEl = getAnchorEl$1(props.anchorEl);

          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else {
            return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join('\n'));
          }
        }

        return null;
      }),

      /**
       * This is the point on the anchor where the popover's
       * `anchorEl` will attach to. This is not used when the
       * anchorReference is 'anchorPosition'.
       *
       * Options:
       * vertical: [top, center, bottom];
       * horizontal: [left, center, right].
       */
      anchorOrigin: propTypes.shape({
        horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
        vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
      }),

      /**
       * This is the position that may be used
       * to set the position of the popover.
       * The coordinates are relative to
       * the application's client area.
       */
      anchorPosition: propTypes.shape({
        left: propTypes.number.isRequired,
        top: propTypes.number.isRequired
      }),

      /**
       * This determines which anchor prop to refer to to set
       * the position of the popover.
       */
      anchorReference: propTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),

      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       *
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, propTypes.instanceOf(React__namespace.Component), propTypes.func]),

      /**
       * The elevation of the popover.
       */
      elevation: propTypes.number,

      /**
       * This function is called in order to retrieve the content anchor element.
       * It's the opposite of the `anchorEl` prop.
       * The content anchor element should be an element inside the popover.
       * It's used to correctly scroll and set the position of the popover.
       * The positioning strategy tries to make the content anchor element just above the
       * anchor element.
       */
      getContentAnchorEl: propTypes.func,

      /**
       * Specifies how close to the edge of the window the popover can appear.
       */
      marginThreshold: propTypes.number,

      /**
       * Callback fired when the component requests to be closed.
       */
      onClose: propTypes.func,

      /**
       * Callback fired before the component is entering.
       */
      onEnter: propTypes.func,

      /**
       * Callback fired when the component has entered.
       */
      onEntered: propTypes.func,

      /**
       * Callback fired when the component is entering.
       */
      onEntering: propTypes.func,

      /**
       * Callback fired before the component is exiting.
       */
      onExit: propTypes.func,

      /**
       * Callback fired when the component has exited.
       */
      onExited: propTypes.func,

      /**
       * Callback fired when the component is exiting.
       */
      onExiting: propTypes.func,

      /**
       * If `true`, the popover is visible.
       */
      open: propTypes.bool.isRequired,

      /**
       * Props applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: propTypes
      /* @typescript-to-proptypes-ignore */
      .shape({
        component: elementTypeAcceptingRef$1
      }),

      /**
       * This is the point on the popover which
       * will attach to the anchor's origin.
       *
       * Options:
       * vertical: [top, center, bottom, x(px)];
       * horizontal: [left, center, right, x(px)].
       */
      transformOrigin: propTypes.shape({
        horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
        vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
      }),

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: propTypes.elementType,

      /**
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: propTypes.object
    } : void 0;
    var Popover$1 = withStyles(styles$e, {
      name: 'MuiPopover'
    })(Popover);

    function nextItem(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }

      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }

      return disableListWrap ? null : list.firstChild;
    }

    function previousItem(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }

      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }

      return disableListWrap ? null : list.lastChild;
    }

    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === undefined) {
        return true;
      }

      var text = nextFocus.innerText;

      if (text === undefined) {
        // jsdom doesn't support innerText
        text = nextFocus.textContent;
      }

      text = text.trim().toLowerCase();

      if (text.length === 0) {
        return false;
      }

      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }

      return text.indexOf(textCriteria.keys.join('')) === 0;
    }

    function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      var wrappedOnce = false;
      var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return;
          }

          wrappedOnce = true;
        } // Same logic as useAutocomplete.js


        var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

        if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          // Move to the next element.
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return;
        }
      }
    }

    var useEnhancedEffect$1 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
     * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you
     * use it separately you need to move focus into the component manually. Once
     * the focus is placed inside the component it is fully keyboard accessible.
     */

    var MenuList = /*#__PURE__*/React__namespace.forwardRef(function MenuList(props, ref) {
      var actions = props.actions,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          _props$autoFocusItem = props.autoFocusItem,
          autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,
          children = props.children,
          className = props.className,
          _props$disabledItemsF = props.disabledItemsFocusable,
          disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
          _props$disableListWra = props.disableListWrap,
          disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
          onKeyDown = props.onKeyDown,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
          other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);

      var listRef = React__namespace.useRef(null);
      var textCriteriaRef = React__namespace.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$1(function () {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useImperativeHandle(actions, function () {
        return {
          adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
            // Let's ignore that piece of logic if users are already overriding the width
            // of the menu.
            var noExplicitWidth = !listRef.current.style.width;

            if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
              var scrollbarSize = "".concat(getScrollbarSize(), "px");
              listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
              listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
            }

            return listRef.current;
          }
        };
      }, []);

      var handleKeyDown = function handleKeyDown(event) {
        var list = listRef.current;
        var key = event.key;
        /**
         * @type {Element} - will always be defined since we are in a keydown handler
         * attached to an element. A keydown event is either dispatched to the activeElement
         * or document.body or document.documentElement. Only the first case will
         * trigger this specific handler.
         */

        var currentFocus = ownerDocument(list).activeElement;

        if (key === 'ArrowDown') {
          // Prevent scroll of the page
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key === 'Home') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'End') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key.length === 1) {
          var criteria = textCriteriaRef.current;
          var lowerKey = key.toLowerCase();
          var currTime = performance.now();

          if (criteria.keys.length > 0) {
            // Reset
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }

          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }

        if (onKeyDown) {
          onKeyDown(event);
        }
      };

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        listRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);
      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */

      var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback

      React__namespace.Children.forEach(children, function (child, index) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs.isFragment(child)) {
            console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      var items = React__namespace.Children.map(children, function (child, index) {
        if (index === activeItemIndex) {
          var newChildProps = {};

          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }

          if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
            newChildProps.tabIndex = 0;
          }

          return /*#__PURE__*/React__namespace.cloneElement(child, newChildProps);
        }

        return child;
      });
      return /*#__PURE__*/React__namespace.createElement(List$1, _extends$3({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
      }, other), items);
    });
    process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, will focus the `[role="menu"]` container and move into tab order.
       */
      autoFocus: propTypes.bool,

      /**
       * If `true`, will focus the first menuitem if `variant="menu"` or selected item
       * if `variant="selectedMenu"`.
       */
      autoFocusItem: propTypes.bool,

      /**
       * MenuList contents, normally `MenuItem`s.
       */
      children: propTypes.node,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, will allow focus on disabled items.
       */
      disabledItemsFocusable: propTypes.bool,

      /**
       * If `true`, the menu items will not wrap focus.
       */
      disableListWrap: propTypes.bool,

      /**
       * @ignore
       */
      onKeyDown: propTypes.func,

      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       */
      variant: propTypes.oneOf(['menu', 'selectedMenu'])
    } : void 0;

    var RTL_ORIGIN = {
      vertical: 'top',
      horizontal: 'right'
    };
    var LTR_ORIGIN = {
      vertical: 'top',
      horizontal: 'left'
    };
    var styles$d = {
      /* Styles applied to the `Paper` component. */
      paper: {
        // specZ: The maximum height of a simple menu should be one or more rows less than the view
        // height. This ensures a tapable area outside of the simple menu with which to dismiss
        // the menu.
        maxHeight: 'calc(100% - 96px)',
        // Add iOS momentum scrolling.
        WebkitOverflowScrolling: 'touch'
      },

      /* Styles applied to the `List` component via `MenuList`. */
      list: {
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
      }
    };
    var Menu = /*#__PURE__*/React__namespace.forwardRef(function Menu(props, ref) {
      var _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
          children = props.children,
          classes = props.classes,
          _props$disableAutoFoc = props.disableAutoFocusItem,
          disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$MenuListProps = props.MenuListProps,
          MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
          onClose = props.onClose,
          onEntering = props.onEntering,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          PopoverClasses = props.PopoverClasses,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
          other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "variant"]);

      var theme = useTheme();
      var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      var menuListActionsRef = React__namespace.useRef(null);
      var contentAnchorRef = React__namespace.useRef(null);

      var getContentAnchorEl = function getContentAnchorEl() {
        return contentAnchorRef.current;
      };

      var handleEntering = function handleEntering(element, isAppearing) {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }

        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };

      var handleListKeyDown = function handleListKeyDown(event) {
        if (event.key === 'Tab') {
          event.preventDefault();

          if (onClose) {
            onClose(event, 'tabKeyDown');
          }
        }
      };
      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */


      var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback

      React__namespace.Children.map(children, function (child, index) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs.isFragment(child)) {
            console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        if (!child.props.disabled) {
          if (variant !== "menu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      var items = React__namespace.Children.map(children, function (child, index) {
        if (index === activeItemIndex) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            ref: function ref(instance) {
              // #StrictMode ready
              contentAnchorRef.current = ReactDOM__namespace.findDOMNode(instance);
              setRef(child.ref, instance);
            }
          });
        }

        return child;
      });
      return /*#__PURE__*/React__namespace.createElement(Popover$1, _extends$3({
        getContentAnchorEl: getContentAnchorEl,
        classes: PopoverClasses,
        onClose: onClose,
        onEntering: handleEntering,
        anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends$3({}, PaperProps, {
          classes: _extends$3({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        open: open,
        ref: ref,
        transitionDuration: transitionDuration
      }, other), /*#__PURE__*/React__namespace.createElement(MenuList, _extends$3({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem: autoFocusItem,
        variant: variant
      }, MenuListProps, {
        className: clsx(classes.list, MenuListProps.className)
      }), items));
    });
    process.env.NODE_ENV !== "production" ? Menu.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A HTML element, or a function that returns it.
       * It's used to set the position of the menu.
       */
      anchorEl: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, propTypes.func]),

      /**
       * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
       * children are not focusable. If you set this prop to `false` focus will be placed
       * on the parent modal container. This has severe accessibility implications
       * and should only be considered if you manage focus otherwise.
       */
      autoFocus: propTypes.bool,

      /**
       * Menu contents, normally `MenuItem`s.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * When opening the menu will not focus the active item but the `[role="menu"]`
       * unless `autoFocus` is also set to `false`. Not using the default means not
       * following WAI-ARIA authoring practices. Please be considerate about possible
       * accessibility implications.
       */
      disableAutoFocusItem: propTypes.bool,

      /**
       * Props applied to the [`MenuList`](/api/menu-list/) element.
       */
      MenuListProps: propTypes.object,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
       */
      onClose: propTypes.func,

      /**
       * Callback fired before the Menu enters.
       */
      onEnter: propTypes.func,

      /**
       * Callback fired when the Menu has entered.
       */
      onEntered: propTypes.func,

      /**
       * Callback fired when the Menu is entering.
       */
      onEntering: propTypes.func,

      /**
       * Callback fired before the Menu exits.
       */
      onExit: propTypes.func,

      /**
       * Callback fired when the Menu has exited.
       */
      onExited: propTypes.func,

      /**
       * Callback fired when the Menu is exiting.
       */
      onExiting: propTypes.func,

      /**
       * If `true`, the menu is visible.
       */
      open: propTypes.bool.isRequired,

      /**
       * @ignore
       */
      PaperProps: propTypes.object,

      /**
       * `classes` prop applied to the [`Popover`](/api/popover/) element.
       */
      PopoverClasses: propTypes.object,

      /**
       * The length of the transition in `ms`, or 'auto'
       */
      transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
        appear: propTypes.number,
        enter: propTypes.number,
        exit: propTypes.number
      })]),

      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       */
      variant: propTypes.oneOf(['menu', 'selectedMenu'])
    } : void 0;
    var Menu$1 = withStyles(styles$d, {
      name: 'MuiMenu'
    })(Menu);

    var styles$c = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body1, _defineProperty({
          minHeight: 48,
          paddingTop: 6,
          paddingBottom: 6,
          boxSizing: 'border-box',
          width: 'auto',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        }, theme.breakpoints.up('sm'), {
          minHeight: 'auto'
        })),
        // TODO v5: remove

        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: {},

        /* Styles applied to the root element if `selected={true}`. */
        selected: {},

        /* Styles applied to the root element if dense. */
        dense: _extends$3({}, theme.typography.body2, {
          minHeight: 'auto'
        })
      };
    };
    var MenuItem = /*#__PURE__*/React__namespace.forwardRef(function MenuItem(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          ListItemClasses = props.ListItemClasses,
          _props$role = props.role,
          role = _props$role === void 0 ? 'menuitem' : _props$role,
          selected = props.selected,
          tabIndexProp = props.tabIndex,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);

      var tabIndex;

      if (!props.disabled) {
        tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
      }

      return /*#__PURE__*/React__namespace.createElement(ListItem$1, _extends$3({
        button: true,
        role: role,
        tabIndex: tabIndex,
        component: component,
        selected: selected,
        disableGutters: disableGutters,
        classes: _extends$3({
          dense: classes.dense
        }, ListItemClasses),
        className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
      /**
       * Menu item contents.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
       */
      dense: propTypes.bool,

      /**
       * @ignore
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: propTypes.bool,

      /**
       * `classes` prop applied to the [`ListItem`](/api/list-item/) element.
       */
      ListItemClasses: propTypes.object,

      /**
       * @ignore
       */
      role: propTypes.string,

      /**
       * @ignore
       */
      selected: propTypes.bool,

      /**
       * @ignore
       */
      tabIndex: propTypes.number
    } : void 0;
    var MenuItem$1 = withStyles(styles$c, {
      name: 'MuiMenuItem'
    })(MenuItem);

    /**
     * @ignore - internal component.
     */

    var NativeSelectInput = /*#__PURE__*/React__namespace.forwardRef(function NativeSelectInput(props, ref) {
      var classes = props.classes,
          className = props.className,
          disabled = props.disabled,
          IconComponent = props.IconComponent,
          inputRef = props.inputRef,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("select", _extends$3({
        className: clsx(classes.root, // TODO v5: merge root and select
        classes.select, classes[variant], className, disabled && classes.disabled),
        disabled: disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /*#__PURE__*/React__namespace.createElement(IconComponent, {
        className: clsx(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
      }));
    });
    process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * The CSS class name of the select element.
       */
      className: propTypes.string,

      /**
       * If `true`, the select will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType.isRequired,

      /**
       * Use that prop to pass a ref to the native select element.
       * @deprecated
       */
      inputRef: refType,

      /**
       * @ignore
       */
      multiple: propTypes.bool,

      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: propTypes.string,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * The input value.
       */
      value: propTypes.any,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;

    /**
     * @ignore - internal component.
     */

    var ArrowDropDownIcon$1 = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    var styles$b = function styles(theme) {
      return {
        /* Styles applied to the select component `root` class. */
        root: {},

        /* Styles applied to the select component `select` class. */
        select: {
          '-moz-appearance': 'none',
          // Reset
          '-webkit-appearance': 'none',
          // Reset
          // When interacting quickly, the text can end up selected.
          // Native select can't be selected either.
          userSelect: 'none',
          borderRadius: 0,
          // Reset
          minWidth: 16,
          // So it doesn't collapse.
          cursor: 'pointer',
          '&:focus': {
            // Show that it's not an text input
            backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
            borderRadius: 0 // Reset Chrome style

          },
          // Remove IE 11 arrow
          '&::-ms-expand': {
            display: 'none'
          },
          '&$disabled': {
            cursor: 'default'
          },
          '&[multiple]': {
            height: 'auto'
          },
          '&:not([multiple]) option, &:not([multiple]) optgroup': {
            backgroundColor: theme.palette.background.paper
          },
          '&&': {
            paddingRight: 24
          }
        },

        /* Styles applied to the select component if `variant="filled"`. */
        filled: {
          '&&': {
            paddingRight: 32
          }
        },

        /* Styles applied to the select component if `variant="outlined"`. */
        outlined: {
          borderRadius: theme.shape.borderRadius,
          '&&': {
            paddingRight: 32
          }
        },

        /* Styles applied to the select component `selectMenu` class. */
        selectMenu: {
          height: 'auto',
          // Resets for multpile select with chips
          minHeight: '1.1876em',
          // Required for select\text-field height consistency
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap',
          overflow: 'hidden'
        },

        /* Pseudo-class applied to the select component `disabled` class. */
        disabled: {},

        /* Styles applied to the icon component. */
        icon: {
          // We use a position absolute over a flexbox in order to forward the pointer events
          // to the input and to support wrapping tags..
          position: 'absolute',
          right: 0,
          top: 'calc(50% - 12px)',
          // Center vertically
          pointerEvents: 'none',
          // Don't block pointer events on the select under the icon.
          color: theme.palette.action.active,
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the icon component if the popup is open. */
        iconOpen: {
          transform: 'rotate(180deg)'
        },

        /* Styles applied to the icon component if `variant="filled"`. */
        iconFilled: {
          right: 7
        },

        /* Styles applied to the icon component if `variant="outlined"`. */
        iconOutlined: {
          right: 7
        },

        /* Styles applied to the underlying native input component. */
        nativeInput: {
          bottom: 0,
          left: 0,
          position: 'absolute',
          opacity: 0,
          pointerEvents: 'none',
          width: '100%'
        }
      };
    };
    var defaultInput = /*#__PURE__*/React__namespace.createElement(Input$1, null);
    /**
     * An alternative to `<Select native />` with a much smaller bundle size footprint.
     */

    var NativeSelect = /*#__PURE__*/React__namespace.forwardRef(function NativeSelect(props, ref) {
      var children = props.children,
          classes = props.classes,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon$1 : _props$IconComponent,
          _props$input = props.input,
          input = _props$input === void 0 ? defaultInput : _props$input,
          inputProps = props.inputProps;
          props.variant;
          var other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      return /*#__PURE__*/React__namespace.cloneElement(input, _extends$3({
        // Most of the logic is implemented in `NativeSelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: NativeSelectInput,
        inputProps: _extends$3({
          children: children,
          classes: classes,
          IconComponent: IconComponent,
          variant: fcs.variant,
          type: undefined
        }, inputProps, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? NativeSelect.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,

      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: propTypes.element,

      /**
       * Attributes applied to the `select` element.
       */
      inputProps: propTypes.object,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * The input value. The DOM API casts this to a string.
       */
      value: propTypes.any,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    NativeSelect.muiName = 'Select';
    withStyles(styles$b, {
      name: 'MuiNativeSelect'
    })(NativeSelect);

    var styles$a = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          bottom: 0,
          right: 0,
          top: -5,
          left: 0,
          margin: 0,
          padding: '0 8px',
          pointerEvents: 'none',
          borderRadius: 'inherit',
          borderStyle: 'solid',
          borderWidth: 1,
          overflow: 'hidden'
        },

        /* Styles applied to the legend element when `labelWidth` is provided. */
        legend: {
          textAlign: 'left',
          padding: 0,
          lineHeight: '11px',
          // sync with `height` in `legend` styles
          transition: theme.transitions.create('width', {
            duration: 150,
            easing: theme.transitions.easing.easeOut
          })
        },

        /* Styles applied to the legend element. */
        legendLabelled: {
          display: 'block',
          width: 'auto',
          textAlign: 'left',
          padding: 0,
          height: 11,
          // sync with `lineHeight` in `legend` styles
          fontSize: '0.75em',
          visibility: 'hidden',
          maxWidth: 0.01,
          transition: theme.transitions.create('max-width', {
            duration: 50,
            easing: theme.transitions.easing.easeOut
          }),
          '& > span': {
            paddingLeft: 5,
            paddingRight: 5,
            display: 'inline-block'
          }
        },

        /* Styles applied to the legend element is notched. */
        legendNotched: {
          maxWidth: 1000,
          transition: theme.transitions.create('max-width', {
            duration: 100,
            easing: theme.transitions.easing.easeOut,
            delay: 50
          })
        }
      };
    };
    /**
     * @ignore - internal component.
     */

    var NotchedOutline = /*#__PURE__*/React__namespace.forwardRef(function NotchedOutline(props, ref) {
      props.children;
          var classes = props.classes,
          className = props.className,
          label = props.label,
          labelWidthProp = props.labelWidth,
          notched = props.notched,
          style = props.style,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);

      var theme = useTheme();
      var align = theme.direction === 'rtl' ? 'right' : 'left';

      if (label !== undefined) {
        return /*#__PURE__*/React__namespace.createElement("fieldset", _extends$3({
          "aria-hidden": true,
          className: clsx(classes.root, className),
          ref: ref,
          style: style
        }, other), /*#__PURE__*/React__namespace.createElement("legend", {
          className: clsx(classes.legendLabelled, notched && classes.legendNotched)
        }, label ? /*#__PURE__*/React__namespace.createElement("span", null, label) : /*#__PURE__*/React__namespace.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: '&#8203;'
          }
        })));
      }

      var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
      return /*#__PURE__*/React__namespace.createElement("fieldset", _extends$3({
        "aria-hidden": true,
        style: _extends$3(_defineProperty({}, "padding".concat(capitalize(align)), 8), style),
        className: clsx(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("legend", {
        className: classes.legend,
        style: {
          // IE 11: fieldset with legend does not render
          // a border radius. This maintains consistency
          // by always having a legend rendered
          width: notched ? labelWidth : 0.01
        }
      }, /*#__PURE__*/React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      })));
    });
    process.env.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
      /**
       * The content of the component.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The label.
       */
      label: propTypes.node,

      /**
       * The width of the label.
       */
      labelWidth: propTypes.number.isRequired,

      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: propTypes.bool.isRequired,

      /**
       * @ignore
       */
      style: propTypes.object
    } : void 0;
    var NotchedOutline$1 = withStyles(styles$a, {
      name: 'PrivateNotchedOutline'
    })(NotchedOutline);

    var styles$9 = function styles(theme) {
      var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          borderRadius: theme.shape.borderRadius,
          '&:hover $notchedOutline': {
            borderColor: theme.palette.text.primary
          },
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            '&:hover $notchedOutline': {
              borderColor: borderColor
            }
          },
          '&$focused $notchedOutline': {
            borderColor: theme.palette.primary.main,
            borderWidth: 2
          },
          '&$error $notchedOutline': {
            borderColor: theme.palette.error.main
          },
          '&$disabled $notchedOutline': {
            borderColor: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {
          '&$focused $notchedOutline': {
            borderColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 14
        },

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 14
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '18.5px 14px',
          '&$marginDense': {
            paddingTop: 10.5,
            paddingBottom: 10.5
          }
        },

        /* Styles applied to the `NotchedOutline` element. */
        notchedOutline: {
          borderColor: borderColor
        },

        /* Styles applied to the `input` element. */
        input: {
          padding: '18.5px 14px',
          '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
            caretColor: theme.palette.type === 'light' ? null : '#fff',
            borderRadius: 'inherit'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 10.5,
          paddingBottom: 10.5
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var OutlinedInput = /*#__PURE__*/React__namespace.forwardRef(function OutlinedInput(props, ref) {
      var classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          label = props.label,
          _props$labelWidth = props.labelWidth,
          labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          notched = props.notched,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);

      return /*#__PURE__*/React__namespace.createElement(InputBase$1, _extends$3({
        renderSuffix: function renderSuffix(state) {
          return /*#__PURE__*/React__namespace.createElement(NotchedOutline$1, {
            className: classes.notchedOutline,
            label: label,
            labelWidth: labelWidth,
            notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
          });
        },
        classes: _extends$3({}, classes, {
          root: clsx(classes.root, classes.underline),
          notchedOutline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: propTypes.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: propTypes.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: propTypes.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * The label of the input. It is only used for layout. The actual labelling
       * is handled by `InputLabel`. If specified `labelWidth` is ignored.
       */
      label: propTypes.node,

      /**
       * The width of the label. Is ignored if `label` is provided. Prefer `label`
       * if the input label appears with a strike through.
       */
      labelWidth: propTypes.number,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: propTypes.oneOf(['dense', 'none']),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: propTypes.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,

      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: propTypes.bool,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: propTypes.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: propTypes.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any
    } : void 0;
    OutlinedInput.muiName = 'Input';
    var OutlinedInput$1 = withStyles(styles$9, {
      name: 'MuiOutlinedInput'
    })(OutlinedInput);

    /**!
     * @fileOverview Kickass library to create and place poppers near their reference elements.
     * @version 1.16.1-lts
     * @license
     * Copyright (c) 2016 Federico Zivolo and contributors
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

    var timeoutDuration = function () {
      var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
      for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
          return 1;
        }
      }
      return 0;
    }();

    function microtaskDebounce(fn) {
      var called = false;
      return function () {
        if (called) {
          return;
        }
        called = true;
        window.Promise.resolve().then(function () {
          called = false;
          fn();
        });
      };
    }

    function taskDebounce(fn) {
      var scheduled = false;
      return function () {
        if (!scheduled) {
          scheduled = true;
          setTimeout(function () {
            scheduled = false;
            fn();
          }, timeoutDuration);
        }
      };
    }

    var supportsMicroTasks = isBrowser && window.Promise;

    /**
    * Create a debounced version of a method, that's asynchronously deferred
    * but called in the minimum time possible.
    *
    * @method
    * @memberof Popper.Utils
    * @argument {Function} fn
    * @returns {Function}
    */
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction(functionToCheck) {
      var getType = {};
      return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }

    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
      if (element.nodeType !== 1) {
        return [];
      }
      // NOTE: 1 DOM access here
      var window = element.ownerDocument.defaultView;
      var css = window.getComputedStyle(element, null);
      return property ? css[property] : css;
    }

    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
      if (element.nodeName === 'HTML') {
        return element;
      }
      return element.parentNode || element.host;
    }

    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent(element) {
      // Return body, `getScroll` will take care to get the correct `scrollTop` from it
      if (!element) {
        return document.body;
      }

      switch (element.nodeName) {
        case 'HTML':
        case 'BODY':
          return element.ownerDocument.body;
        case '#document':
          return element.body;
      }

      // Firefox want us to check `-x` and `-y` variations as well

      var _getStyleComputedProp = getStyleComputedProperty(element),
          overflow = _getStyleComputedProp.overflow,
          overflowX = _getStyleComputedProp.overflowX,
          overflowY = _getStyleComputedProp.overflowY;

      if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
        return element;
      }

      return getScrollParent(getParentNode(element));
    }

    /**
     * Returns the reference node of the reference object, or the reference object itself.
     * @method
     * @memberof Popper.Utils
     * @param {Element|Object} reference - the reference element (the popper will be relative to this)
     * @returns {Element} parent
     */
    function getReferenceNode(reference) {
      return reference && reference.referenceNode ? reference.referenceNode : reference;
    }

    var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

    /**
     * Determines if the browser is Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @param {Number} version to check
     * @returns {Boolean} isIE
     */
    function isIE(version) {
      if (version === 11) {
        return isIE11;
      }
      if (version === 10) {
        return isIE10;
      }
      return isIE11 || isIE10;
    }

    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
      if (!element) {
        return document.documentElement;
      }

      var noOffsetParent = isIE(10) ? document.body : null;

      // NOTE: 1 DOM access here
      var offsetParent = element.offsetParent || null;
      // Skip hidden elements which don't have an offsetParent
      while (offsetParent === noOffsetParent && element.nextElementSibling) {
        offsetParent = (element = element.nextElementSibling).offsetParent;
      }

      var nodeName = offsetParent && offsetParent.nodeName;

      if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
        return element ? element.ownerDocument.documentElement : document.documentElement;
      }

      // .offsetParent will return the closest TH, TD or TABLE in case
      // no offsetParent is present, I hate this job...
      if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
        return getOffsetParent(offsetParent);
      }

      return offsetParent;
    }

    function isOffsetContainer(element) {
      var nodeName = element.nodeName;

      if (nodeName === 'BODY') {
        return false;
      }
      return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }

    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot(node) {
      if (node.parentNode !== null) {
        return getRoot(node.parentNode);
      }

      return node;
    }

    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
        return document.documentElement;
      }

      // Here we make sure to give as "start" the element that comes first in the DOM
      var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
      var start = order ? element1 : element2;
      var end = order ? element2 : element1;

      // Get common ancestor container
      var range = document.createRange();
      range.setStart(start, 0);
      range.setEnd(end, 0);
      var commonAncestorContainer = range.commonAncestorContainer;

      // Both nodes are inside #document

      if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
        if (isOffsetContainer(commonAncestorContainer)) {
          return commonAncestorContainer;
        }

        return getOffsetParent(commonAncestorContainer);
      }

      // one of the nodes is inside shadowDOM, find which one
      var element1root = getRoot(element1);
      if (element1root.host) {
        return findCommonOffsetParent(element1root.host, element2);
      } else {
        return findCommonOffsetParent(element1, getRoot(element2).host);
      }
    }

    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

      var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
      var nodeName = element.nodeName;

      if (nodeName === 'BODY' || nodeName === 'HTML') {
        var html = element.ownerDocument.documentElement;
        var scrollingElement = element.ownerDocument.scrollingElement || html;
        return scrollingElement[upperSide];
      }

      return element[upperSide];
    }

    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
      var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      var modifier = subtract ? -1 : 1;
      rect.top += scrollTop * modifier;
      rect.bottom += scrollTop * modifier;
      rect.left += scrollLeft * modifier;
      rect.right += scrollLeft * modifier;
      return rect;
    }

    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */

    function getBordersSize(styles, axis) {
      var sideA = axis === 'x' ? 'Left' : 'Top';
      var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

      return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
    }

    function getSize(axis, body, html, computedStyle) {
      return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
    }

    function getWindowSizes(document) {
      var body = document.body;
      var html = document.documentElement;
      var computedStyle = isIE(10) && getComputedStyle(html);

      return {
        height: getSize('Height', body, html, computedStyle),
        width: getSize('Width', body, html, computedStyle)
      };
    }

    var classCallCheck$1 = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();





    var defineProperty = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    };

    var _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
      return _extends$2({}, offsets, {
        right: offsets.left + offsets.width,
        bottom: offsets.top + offsets.height
      });
    }

    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
      var rect = {};

      // IE10 10 FIX: Please, don't ask, the element isn't
      // considered in DOM in some circumstances...
      // This isn't reproducible in IE10 compatibility mode of IE11
      try {
        if (isIE(10)) {
          rect = element.getBoundingClientRect();
          var scrollTop = getScroll(element, 'top');
          var scrollLeft = getScroll(element, 'left');
          rect.top += scrollTop;
          rect.left += scrollLeft;
          rect.bottom += scrollTop;
          rect.right += scrollLeft;
        } else {
          rect = element.getBoundingClientRect();
        }
      } catch (e) {}

      var result = {
        left: rect.left,
        top: rect.top,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };

      // subtract scrollbar size from sizes
      var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
      var width = sizes.width || element.clientWidth || result.width;
      var height = sizes.height || element.clientHeight || result.height;

      var horizScrollbar = element.offsetWidth - width;
      var vertScrollbar = element.offsetHeight - height;

      // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
      // we make this check conditional for performance reasons
      if (horizScrollbar || vertScrollbar) {
        var styles = getStyleComputedProperty(element);
        horizScrollbar -= getBordersSize(styles, 'x');
        vertScrollbar -= getBordersSize(styles, 'y');

        result.width -= horizScrollbar;
        result.height -= vertScrollbar;
      }

      return getClientRect(result);
    }

    function getOffsetRectRelativeToArbitraryNode(children, parent) {
      var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var isIE10 = isIE(10);
      var isHTML = parent.nodeName === 'HTML';
      var childrenRect = getBoundingClientRect(children);
      var parentRect = getBoundingClientRect(parent);
      var scrollParent = getScrollParent(children);

      var styles = getStyleComputedProperty(parent);
      var borderTopWidth = parseFloat(styles.borderTopWidth);
      var borderLeftWidth = parseFloat(styles.borderLeftWidth);

      // In cases where the parent is fixed, we must ignore negative scroll in offset calc
      if (fixedPosition && isHTML) {
        parentRect.top = Math.max(parentRect.top, 0);
        parentRect.left = Math.max(parentRect.left, 0);
      }
      var offsets = getClientRect({
        top: childrenRect.top - parentRect.top - borderTopWidth,
        left: childrenRect.left - parentRect.left - borderLeftWidth,
        width: childrenRect.width,
        height: childrenRect.height
      });
      offsets.marginTop = 0;
      offsets.marginLeft = 0;

      // Subtract margins of documentElement in case it's being used as parent
      // we do this only on HTML because it's the only element that behaves
      // differently when margins are applied to it. The margins are included in
      // the box of the documentElement, in the other cases not.
      if (!isIE10 && isHTML) {
        var marginTop = parseFloat(styles.marginTop);
        var marginLeft = parseFloat(styles.marginLeft);

        offsets.top -= borderTopWidth - marginTop;
        offsets.bottom -= borderTopWidth - marginTop;
        offsets.left -= borderLeftWidth - marginLeft;
        offsets.right -= borderLeftWidth - marginLeft;

        // Attach marginTop and marginLeft because in some circumstances we may need them
        offsets.marginTop = marginTop;
        offsets.marginLeft = marginLeft;
      }

      if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
        offsets = includeScroll(offsets, parent);
      }

      return offsets;
    }

    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
      var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var html = element.ownerDocument.documentElement;
      var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
      var width = Math.max(html.clientWidth, window.innerWidth || 0);
      var height = Math.max(html.clientHeight, window.innerHeight || 0);

      var scrollTop = !excludeScroll ? getScroll(html) : 0;
      var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

      var offset = {
        top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
        left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
        width: width,
        height: height
      };

      return getClientRect(offset);
    }

    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
      var nodeName = element.nodeName;
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        return false;
      }
      if (getStyleComputedProperty(element, 'position') === 'fixed') {
        return true;
      }
      var parentNode = getParentNode(element);
      if (!parentNode) {
        return false;
      }
      return isFixed(parentNode);
    }

    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */

    function getFixedPositionOffsetParent(element) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element || !element.parentElement || isIE()) {
        return document.documentElement;
      }
      var el = element.parentElement;
      while (el && getStyleComputedProperty(el, 'transform') === 'none') {
        el = el.parentElement;
      }
      return el || document.documentElement;
    }

    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @param {Boolean} fixedPosition - Is in fixed position mode
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement) {
      var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      // NOTE: 1 DOM access here

      var boundaries = { top: 0, left: 0 };
      var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

      // Handle viewport case
      if (boundariesElement === 'viewport') {
        boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
      } else {
        // Handle other cases based on DOM element used as boundaries
        var boundariesNode = void 0;
        if (boundariesElement === 'scrollParent') {
          boundariesNode = getScrollParent(getParentNode(reference));
          if (boundariesNode.nodeName === 'BODY') {
            boundariesNode = popper.ownerDocument.documentElement;
          }
        } else if (boundariesElement === 'window') {
          boundariesNode = popper.ownerDocument.documentElement;
        } else {
          boundariesNode = boundariesElement;
        }

        var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

        // In case of HTML, we need a different computation
        if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
          var _getWindowSizes = getWindowSizes(popper.ownerDocument),
              height = _getWindowSizes.height,
              width = _getWindowSizes.width;

          boundaries.top += offsets.top - offsets.marginTop;
          boundaries.bottom = height + offsets.top;
          boundaries.left += offsets.left - offsets.marginLeft;
          boundaries.right = width + offsets.left;
        } else {
          // for all the other DOM elements, this one is good
          boundaries = offsets;
        }
      }

      // Add paddings
      padding = padding || 0;
      var isPaddingNumber = typeof padding === 'number';
      boundaries.left += isPaddingNumber ? padding : padding.left || 0;
      boundaries.top += isPaddingNumber ? padding : padding.top || 0;
      boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
      boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

      return boundaries;
    }

    function getArea(_ref) {
      var width = _ref.width,
          height = _ref.height;

      return width * height;
    }

    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
      var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

      if (placement.indexOf('auto') === -1) {
        return placement;
      }

      var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

      var rects = {
        top: {
          width: boundaries.width,
          height: refRect.top - boundaries.top
        },
        right: {
          width: boundaries.right - refRect.right,
          height: boundaries.height
        },
        bottom: {
          width: boundaries.width,
          height: boundaries.bottom - refRect.bottom
        },
        left: {
          width: refRect.left - boundaries.left,
          height: boundaries.height
        }
      };

      var sortedAreas = Object.keys(rects).map(function (key) {
        return _extends$2({
          key: key
        }, rects[key], {
          area: getArea(rects[key])
        });
      }).sort(function (a, b) {
        return b.area - a.area;
      });

      var filteredAreas = sortedAreas.filter(function (_ref2) {
        var width = _ref2.width,
            height = _ref2.height;
        return width >= popper.clientWidth && height >= popper.clientHeight;
      });

      var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

      var variation = placement.split('-')[1];

      return computedPlacement + (variation ? '-' + variation : '');
    }

    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference) {
      var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
      return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }

    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
      var window = element.ownerDocument.defaultView;
      var styles = window.getComputedStyle(element);
      var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
      var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
      var result = {
        width: element.offsetWidth + y,
        height: element.offsetHeight + x
      };
      return result;
    }

    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
      var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash[matched];
      });
    }

    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
      placement = placement.split('-')[0];

      // Get popper node sizes
      var popperRect = getOuterSizes(popper);

      // Add position, width and height to our offsets object
      var popperOffsets = {
        width: popperRect.width,
        height: popperRect.height
      };

      // depending by the popper placement we have to compute its offsets slightly differently
      var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
      var mainSide = isHoriz ? 'top' : 'left';
      var secondarySide = isHoriz ? 'left' : 'top';
      var measurement = isHoriz ? 'height' : 'width';
      var secondaryMeasurement = !isHoriz ? 'height' : 'width';

      popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
      if (placement === secondarySide) {
        popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
      } else {
        popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
      }

      return popperOffsets;
    }

    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
      // use native find if supported
      if (Array.prototype.find) {
        return arr.find(check);
      }

      // use `filter` to obtain the same behavior of `find`
      return arr.filter(check)[0];
    }

    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex$1(arr, prop, value) {
      // use native findIndex if supported
      if (Array.prototype.findIndex) {
        return arr.findIndex(function (cur) {
          return cur[prop] === value;
        });
      }

      // use `find` + `indexOf` if `findIndex` isn't supported
      var match = find(arr, function (obj) {
        return obj[prop] === value;
      });
      return arr.indexOf(match);
    }

    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
      var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex$1(modifiers, 'name', ends));

      modifiersToRun.forEach(function (modifier) {
        if (modifier['function']) {
          // eslint-disable-line dot-notation
          console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
        }
        var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
        if (modifier.enabled && isFunction(fn)) {
          // Add properties to offsets to make them a complete clientRect object
          // we do this before each modifier to make sure the previous one doesn't
          // mess with these values
          data.offsets.popper = getClientRect(data.offsets.popper);
          data.offsets.reference = getClientRect(data.offsets.reference);

          data = fn(data, modifier);
        }
      });

      return data;
    }

    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update() {
      // if popper is destroyed, don't perform any further update
      if (this.state.isDestroyed) {
        return;
      }

      var data = {
        instance: this,
        styles: {},
        arrowStyles: {},
        attributes: {},
        flipped: false,
        offsets: {}
      };

      // compute reference element offsets
      data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

      // store the computed placement inside `originalPlacement`
      data.originalPlacement = data.placement;

      data.positionFixed = this.options.positionFixed;

      // compute the popper offsets
      data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

      data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

      // run the modifiers
      data = runModifiers(this.modifiers, data);

      // the first `update` will call `onCreate` callback
      // the other ones will call `onUpdate` callback
      if (!this.state.isCreated) {
        this.state.isCreated = true;
        this.options.onCreate(data);
      } else {
        this.options.onUpdate(data);
      }
    }

    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
      return modifiers.some(function (_ref) {
        var name = _ref.name,
            enabled = _ref.enabled;
        return enabled && name === modifierName;
      });
    }

    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
      var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
      var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

      for (var i = 0; i < prefixes.length; i++) {
        var prefix = prefixes[i];
        var toCheck = prefix ? '' + prefix + upperProp : property;
        if (typeof document.body.style[toCheck] !== 'undefined') {
          return toCheck;
        }
      }
      return null;
    }

    /**
     * Destroys the popper.
     * @method
     * @memberof Popper
     */
    function destroy() {
      this.state.isDestroyed = true;

      // touch DOM only if `applyStyle` modifier is enabled
      if (isModifierEnabled(this.modifiers, 'applyStyle')) {
        this.popper.removeAttribute('x-placement');
        this.popper.style.position = '';
        this.popper.style.top = '';
        this.popper.style.left = '';
        this.popper.style.right = '';
        this.popper.style.bottom = '';
        this.popper.style.willChange = '';
        this.popper.style[getSupportedPropertyName('transform')] = '';
      }

      this.disableEventListeners();

      // remove the popper if user explicitly asked for the deletion on destroy
      // do not use `remove` because IE11 doesn't support it
      if (this.options.removeOnDestroy) {
        this.popper.parentNode.removeChild(this.popper);
      }
      return this;
    }

    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
      var ownerDocument = element.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }

    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
      var isBody = scrollParent.nodeName === 'BODY';
      var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
      target.addEventListener(event, callback, { passive: true });

      if (!isBody) {
        attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
      }
      scrollParents.push(target);
    }

    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
      // Resize event listener on window
      state.updateBound = updateBound;
      getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

      // Scroll event listener on scroll parents
      var scrollElement = getScrollParent(reference);
      attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
      state.scrollElement = scrollElement;
      state.eventsEnabled = true;

      return state;
    }

    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
      if (!this.state.eventsEnabled) {
        this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
      }
    }

    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
      // Remove resize event listener on window
      getWindow(reference).removeEventListener('resize', state.updateBound);

      // Remove scroll event listener on scroll parents
      state.scrollParents.forEach(function (target) {
        target.removeEventListener('scroll', state.updateBound);
      });

      // Reset state
      state.updateBound = null;
      state.scrollParents = [];
      state.scrollElement = null;
      state.eventsEnabled = false;
      return state;
    }

    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger `onUpdate` callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
      if (this.state.eventsEnabled) {
        cancelAnimationFrame(this.scheduleUpdate);
        this.state = removeEventListeners(this.reference, this.state);
      }
    }

    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric(n) {
      return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }

    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
      Object.keys(styles).forEach(function (prop) {
        var unit = '';
        // add unit if the value is numeric and is one of the following
        if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
          unit = 'px';
        }
        element.style[prop] = styles[prop] + unit;
      });
    }

    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
      Object.keys(attributes).forEach(function (prop) {
        var value = attributes[prop];
        if (value !== false) {
          element.setAttribute(prop, attributes[prop]);
        } else {
          element.removeAttribute(prop);
        }
      });
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
      // any property present in `data.styles` will be applied to the popper,
      // in this way we can make the 3rd party modifiers add custom styles to it
      // Be aware, modifiers could override the properties defined in the previous
      // lines of this modifier!
      setStyles(data.instance.popper, data.styles);

      // any property present in `data.attributes` will be applied to the popper,
      // they will be set as HTML attributes of the element
      setAttributes(data.instance.popper, data.attributes);

      // if arrowElement is defined and arrowStyles has some properties
      if (data.arrowElement && Object.keys(data.arrowStyles).length) {
        setStyles(data.arrowElement, data.arrowStyles);
      }

      return data;
    }

    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
      // compute reference element offsets
      var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

      popper.setAttribute('x-placement', placement);

      // Apply `position` to popper before anything else because
      // without the position applied we can't guarantee correct computations
      setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

      return options;
    }

    /**
     * @function
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Boolean} shouldRound - If the offsets should be rounded at all
     * @returns {Object} The popper's position offsets rounded
     *
     * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
     * good as it can be within reason.
     * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
     *
     * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
     * as well on High DPI screens).
     *
     * Firefox prefers no rounding for positioning and does not have blurriness on
     * high DPI screens.
     *
     * Only horizontal placement and left/right values need to be considered.
     */
    function getRoundedOffsets(data, shouldRound) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
      var round = Math.round,
          floor = Math.floor;

      var noRound = function noRound(v) {
        return v;
      };

      var referenceWidth = round(reference.width);
      var popperWidth = round(popper.width);

      var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
      var isVariation = data.placement.indexOf('-') !== -1;
      var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
      var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

      var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
      var verticalToInteger = !shouldRound ? noRound : round;

      return {
        left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
        top: verticalToInteger(popper.top),
        bottom: verticalToInteger(popper.bottom),
        right: horizontalToInteger(popper.right)
      };
    }

    var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
      var x = options.x,
          y = options.y;
      var popper = data.offsets.popper;

      // Remove this legacy support in Popper.js v2

      var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'applyStyle';
      }).gpuAcceleration;
      if (legacyGpuAccelerationOption !== undefined) {
        console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
      }
      var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

      var offsetParent = getOffsetParent(data.instance.popper);
      var offsetParentRect = getBoundingClientRect(offsetParent);

      // Styles
      var styles = {
        position: popper.position
      };

      var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

      var sideA = x === 'bottom' ? 'top' : 'bottom';
      var sideB = y === 'right' ? 'left' : 'right';

      // if gpuAcceleration is set to `true` and transform is supported,
      //  we use `translate3d` to apply the position to the popper we
      // automatically use the supported prefixed version if needed
      var prefixedProperty = getSupportedPropertyName('transform');

      // now, let's make a step back and look at this code closely (wtf?)
      // If the content of the popper grows once it's been positioned, it
      // may happen that the popper gets misplaced because of the new content
      // overflowing its reference element
      // To avoid this problem, we provide two options (x and y), which allow
      // the consumer to define the offset origin.
      // If we position a popper on top of a reference element, we can set
      // `x` to `top` to make the popper grow towards its top instead of
      // its bottom.
      var left = void 0,
          top = void 0;
      if (sideA === 'bottom') {
        // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
        // and not the bottom of the html element
        if (offsetParent.nodeName === 'HTML') {
          top = -offsetParent.clientHeight + offsets.bottom;
        } else {
          top = -offsetParentRect.height + offsets.bottom;
        }
      } else {
        top = offsets.top;
      }
      if (sideB === 'right') {
        if (offsetParent.nodeName === 'HTML') {
          left = -offsetParent.clientWidth + offsets.right;
        } else {
          left = -offsetParentRect.width + offsets.right;
        }
      } else {
        left = offsets.left;
      }
      if (gpuAcceleration && prefixedProperty) {
        styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        styles[sideA] = 0;
        styles[sideB] = 0;
        styles.willChange = 'transform';
      } else {
        // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
        var invertTop = sideA === 'bottom' ? -1 : 1;
        var invertLeft = sideB === 'right' ? -1 : 1;
        styles[sideA] = top * invertTop;
        styles[sideB] = left * invertLeft;
        styles.willChange = sideA + ', ' + sideB;
      }

      // Attributes
      var attributes = {
        'x-placement': data.placement
      };

      // Update `data` attributes, styles and arrowStyles
      data.attributes = _extends$2({}, attributes, data.attributes);
      data.styles = _extends$2({}, styles, data.styles);
      data.arrowStyles = _extends$2({}, data.offsets.arrow, data.arrowStyles);

      return data;
    }

    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
      var requesting = find(modifiers, function (_ref) {
        var name = _ref.name;
        return name === requestingName;
      });

      var isRequired = !!requesting && modifiers.some(function (modifier) {
        return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
      });

      if (!isRequired) {
        var _requesting = '`' + requestingName + '`';
        var requested = '`' + requestedName + '`';
        console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
      }
      return isRequired;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
      var _data$offsets$arrow;

      // arrow depends on keepTogether in order to work
      if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
        return data;
      }

      var arrowElement = options.element;

      // if arrowElement is a string, suppose it's a CSS selector
      if (typeof arrowElement === 'string') {
        arrowElement = data.instance.popper.querySelector(arrowElement);

        // if arrowElement is not found, don't run the modifier
        if (!arrowElement) {
          return data;
        }
      } else {
        // if the arrowElement isn't a query selector we must check that the
        // provided DOM node is child of its popper node
        if (!data.instance.popper.contains(arrowElement)) {
          console.warn('WARNING: `arrow.element` must be child of its popper element!');
          return data;
        }
      }

      var placement = data.placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var isVertical = ['left', 'right'].indexOf(placement) !== -1;

      var len = isVertical ? 'height' : 'width';
      var sideCapitalized = isVertical ? 'Top' : 'Left';
      var side = sideCapitalized.toLowerCase();
      var altSide = isVertical ? 'left' : 'top';
      var opSide = isVertical ? 'bottom' : 'right';
      var arrowElementSize = getOuterSizes(arrowElement)[len];

      //
      // extends keepTogether behavior making sure the popper and its
      // reference have enough pixels in conjunction
      //

      // top/left side
      if (reference[opSide] - arrowElementSize < popper[side]) {
        data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
      }
      // bottom/right side
      if (reference[side] + arrowElementSize > popper[opSide]) {
        data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
      }
      data.offsets.popper = getClientRect(data.offsets.popper);

      // compute center of the popper
      var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

      // Compute the sideValue using the updated popper offsets
      // take popper margin in account because we don't have this info available
      var css = getStyleComputedProperty(data.instance.popper);
      var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
      var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
      var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

      // prevent arrowElement from being placed not contiguously to its popper
      sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

      data.arrowElement = arrowElement;
      data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

      return data;
    }

    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
      if (variation === 'end') {
        return 'start';
      } else if (variation === 'start') {
        return 'end';
      }
      return variation;
    }

    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-end` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);

    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement) {
      var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var index = validPlacements.indexOf(placement);
      var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
      return counter ? arr.reverse() : arr;
    }

    var BEHAVIORS = {
      FLIP: 'flip',
      CLOCKWISE: 'clockwise',
      COUNTERCLOCKWISE: 'counterclockwise'
    };

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
      // if `inner` modifier is enabled, we can't use the `flip` modifier
      if (isModifierEnabled(data.instance.modifiers, 'inner')) {
        return data;
      }

      if (data.flipped && data.placement === data.originalPlacement) {
        // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
        return data;
      }

      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

      var placement = data.placement.split('-')[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data.placement.split('-')[1] || '';

      var flipOrder = [];

      switch (options.behavior) {
        case BEHAVIORS.FLIP:
          flipOrder = [placement, placementOpposite];
          break;
        case BEHAVIORS.CLOCKWISE:
          flipOrder = clockwise(placement);
          break;
        case BEHAVIORS.COUNTERCLOCKWISE:
          flipOrder = clockwise(placement, true);
          break;
        default:
          flipOrder = options.behavior;
      }

      flipOrder.forEach(function (step, index) {
        if (placement !== step || flipOrder.length === index + 1) {
          return data;
        }

        placement = data.placement.split('-')[0];
        placementOpposite = getOppositePlacement(placement);

        var popperOffsets = data.offsets.popper;
        var refOffsets = data.offsets.reference;

        // using floor because the reference offsets may contain decimals we are not going to consider here
        var floor = Math.floor;
        var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

        var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
        var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
        var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
        var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

        var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

        // flip the variation if required
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

        // flips variation if reference element overflows boundaries
        var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

        // flips variation if popper content overflows boundaries
        var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

        var flippedVariation = flippedVariationByRef || flippedVariationByContent;

        if (overlapsRef || overflowsBoundaries || flippedVariation) {
          // this boolean to detect any flip loop
          data.flipped = true;

          if (overlapsRef || overflowsBoundaries) {
            placement = flipOrder[index + 1];
          }

          if (flippedVariation) {
            variation = getOppositeVariation(variation);
          }

          data.placement = placement + (variation ? '-' + variation : '');

          // this object contains `position`, we want to preserve it along with
          // any additional property we may add in the future
          data.offsets.popper = _extends$2({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

          data = runModifiers(data.instance.modifiers, data, 'flip');
        }
      });
      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var placement = data.placement.split('-')[0];
      var floor = Math.floor;
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
      var side = isVertical ? 'right' : 'bottom';
      var opSide = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';

      if (popper[side] < floor(reference[opSide])) {
        data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
      }
      if (popper[opSide] > floor(reference[side])) {
        data.offsets.popper[opSide] = floor(reference[side]);
      }

      return data;
    }

    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
      // separate value from unit
      var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
      var value = +split[1];
      var unit = split[2];

      // If it's not a number it's an operator, I guess
      if (!value) {
        return str;
      }

      if (unit.indexOf('%') === 0) {
        var element = void 0;
        switch (unit) {
          case '%p':
            element = popperOffsets;
            break;
          case '%':
          case '%r':
          default:
            element = referenceOffsets;
        }

        var rect = getClientRect(element);
        return rect[measurement] / 100 * value;
      } else if (unit === 'vh' || unit === 'vw') {
        // if is a vh or vw, we calculate the size based on the viewport
        var size = void 0;
        if (unit === 'vh') {
          size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        } else {
          size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        }
        return size / 100 * value;
      } else {
        // if is an explicit pixel unit, we get rid of the unit and keep the value
        // if is an implicit unit, it's px, and we return just the value
        return value;
      }
    }

    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
      var offsets = [0, 0];

      // Use height if placement is left or right and index is 0 otherwise use width
      // in this way the first offset will use an axis and the second one
      // will use the other one
      var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

      // Split the offset string to obtain a list of values and operands
      // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
      var fragments = offset.split(/(\+|\-)/).map(function (frag) {
        return frag.trim();
      });

      // Detect if the offset string contains a pair of values or a single one
      // they could be separated by comma or space
      var divider = fragments.indexOf(find(fragments, function (frag) {
        return frag.search(/,|\s/) !== -1;
      }));

      if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
        console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
      }

      // If divider is found, we divide the list of values and operands to divide
      // them by ofset X and Y.
      var splitRegex = /\s*,\s*|\s+/;
      var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

      // Convert the values with units to absolute pixels to allow our computations
      ops = ops.map(function (op, index) {
        // Most of the units rely on the orientation of the popper
        var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
        var mergeWithPrevious = false;
        return op
        // This aggregates any `+` or `-` sign that aren't considered operators
        // e.g.: 10 + +5 => [10, +, +5]
        .reduce(function (a, b) {
          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
            a[a.length - 1] = b;
            mergeWithPrevious = true;
            return a;
          } else if (mergeWithPrevious) {
            a[a.length - 1] += b;
            mergeWithPrevious = false;
            return a;
          } else {
            return a.concat(b);
          }
        }, [])
        // Here we convert the string values into number values (in px)
        .map(function (str) {
          return toValue(str, measurement, popperOffsets, referenceOffsets);
        });
      });

      // Loop trough the offsets arrays and execute the operations
      ops.forEach(function (op, index) {
        op.forEach(function (frag, index2) {
          if (isNumeric(frag)) {
            offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
          }
        });
      });
      return offsets;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
      var offset = _ref.offset;
      var placement = data.placement,
          _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var basePlacement = placement.split('-')[0];

      var offsets = void 0;
      if (isNumeric(+offset)) {
        offsets = [+offset, 0];
      } else {
        offsets = parseOffset(offset, popper, reference, basePlacement);
      }

      if (basePlacement === 'left') {
        popper.top += offsets[0];
        popper.left -= offsets[1];
      } else if (basePlacement === 'right') {
        popper.top += offsets[0];
        popper.left += offsets[1];
      } else if (basePlacement === 'top') {
        popper.left += offsets[0];
        popper.top -= offsets[1];
      } else if (basePlacement === 'bottom') {
        popper.left += offsets[0];
        popper.top += offsets[1];
      }

      data.popper = popper;
      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
      var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

      // If offsetParent is the reference element, we really want to
      // go one step up and use the next offsetParent as reference to
      // avoid to make this modifier completely useless and look like broken
      if (data.instance.reference === boundariesElement) {
        boundariesElement = getOffsetParent(boundariesElement);
      }

      // NOTE: DOM access here
      // resets the popper's position so that the document size can be calculated excluding
      // the size of the popper element itself
      var transformProp = getSupportedPropertyName('transform');
      var popperStyles = data.instance.popper.style; // assignment to help minification
      var top = popperStyles.top,
          left = popperStyles.left,
          transform = popperStyles[transformProp];

      popperStyles.top = '';
      popperStyles.left = '';
      popperStyles[transformProp] = '';

      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

      // NOTE: DOM access here
      // restores the original style properties after the offsets have been computed
      popperStyles.top = top;
      popperStyles.left = left;
      popperStyles[transformProp] = transform;

      options.boundaries = boundaries;

      var order = options.priority;
      var popper = data.offsets.popper;

      var check = {
        primary: function primary(placement) {
          var value = popper[placement];
          if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
            value = Math.max(popper[placement], boundaries[placement]);
          }
          return defineProperty({}, placement, value);
        },
        secondary: function secondary(placement) {
          var mainSide = placement === 'right' ? 'left' : 'top';
          var value = popper[mainSide];
          if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
            value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
          }
          return defineProperty({}, mainSide, value);
        }
      };

      order.forEach(function (placement) {
        var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
        popper = _extends$2({}, popper, check[side](placement));
      });

      data.offsets.popper = popper;

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var shiftvariation = placement.split('-')[1];

      // if shift shiftvariation is specified, run the modifier
      if (shiftvariation) {
        var _data$offsets = data.offsets,
            reference = _data$offsets.reference,
            popper = _data$offsets.popper;

        var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
        var side = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';

        var shiftOffsets = {
          start: defineProperty({}, side, reference[side]),
          end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
        };

        data.offsets.popper = _extends$2({}, popper, shiftOffsets[shiftvariation]);
      }

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
      if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
        return data;
      }

      var refRect = data.offsets.reference;
      var bound = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'preventOverflow';
      }).boundaries;

      if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === true) {
          return data;
        }

        data.hide = true;
        data.attributes['x-out-of-boundaries'] = '';
      } else {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === false) {
          return data;
        }

        data.hide = false;
        data.attributes['x-out-of-boundaries'] = false;
      }

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

      var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

      popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

      data.placement = getOppositePlacement(placement);
      data.offsets.popper = getClientRect(popper);

      return data;
    }

    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */

    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
      /**
       * Modifier used to shift the popper on the start or end of its reference
       * element.<br />
       * It will read the variation of the `placement` property.<br />
       * It can be one either `-end` or `-start`.
       * @memberof modifiers
       * @inner
       */
      shift: {
        /** @prop {number} order=100 - Index used to define the order of execution */
        order: 100,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: shift
      },

      /**
       * The `offset` modifier can shift your popper on both its axis.
       *
       * It accepts the following units:
       * - `px` or unit-less, interpreted as pixels
       * - `%` or `%r`, percentage relative to the length of the reference element
       * - `%p`, percentage relative to the length of the popper element
       * - `vw`, CSS viewport width unit
       * - `vh`, CSS viewport height unit
       *
       * For length is intended the main axis relative to the placement of the popper.<br />
       * This means that if the placement is `top` or `bottom`, the length will be the
       * `width`. In case of `left` or `right`, it will be the `height`.
       *
       * You can provide a single value (as `Number` or `String`), or a pair of values
       * as `String` divided by a comma or one (or more) white spaces.<br />
       * The latter is a deprecated method because it leads to confusion and will be
       * removed in v2.<br />
       * Additionally, it accepts additions and subtractions between different units.
       * Note that multiplications and divisions aren't supported.
       *
       * Valid examples are:
       * ```
       * 10
       * '10%'
       * '10, 10'
       * '10%, 10'
       * '10 + 10%'
       * '10 - 5vh + 3%'
       * '-10px + 5vh, 5px - 6%'
       * ```
       * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
       * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
       * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
       *
       * @memberof modifiers
       * @inner
       */
      offset: {
        /** @prop {number} order=200 - Index used to define the order of execution */
        order: 200,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: offset,
        /** @prop {Number|String} offset=0
         * The offset value as described in the modifier description
         */
        offset: 0
      },

      /**
       * Modifier used to prevent the popper from being positioned outside the boundary.
       *
       * A scenario exists where the reference itself is not within the boundaries.<br />
       * We can say it has "escaped the boundaries" — or just "escaped".<br />
       * In this case we need to decide whether the popper should either:
       *
       * - detach from the reference and remain "trapped" in the boundaries, or
       * - if it should ignore the boundary and "escape with its reference"
       *
       * When `escapeWithReference` is set to`true` and reference is completely
       * outside its boundaries, the popper will overflow (or completely leave)
       * the boundaries in order to remain attached to the edge of the reference.
       *
       * @memberof modifiers
       * @inner
       */
      preventOverflow: {
        /** @prop {number} order=300 - Index used to define the order of execution */
        order: 300,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: preventOverflow,
        /**
         * @prop {Array} [priority=['left','right','top','bottom']]
         * Popper will try to prevent overflow following these priorities by default,
         * then, it could overflow on the left and on top of the `boundariesElement`
         */
        priority: ['left', 'right', 'top', 'bottom'],
        /**
         * @prop {number} padding=5
         * Amount of pixel used to define a minimum distance between the boundaries
         * and the popper. This makes sure the popper always has a little padding
         * between the edges of its container
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='scrollParent'
         * Boundaries used by the modifier. Can be `scrollParent`, `window`,
         * `viewport` or any DOM element.
         */
        boundariesElement: 'scrollParent'
      },

      /**
       * Modifier used to make sure the reference and its popper stay near each other
       * without leaving any gap between the two. Especially useful when the arrow is
       * enabled and you want to ensure that it points to its reference element.
       * It cares only about the first axis. You can still have poppers with margin
       * between the popper and its reference element.
       * @memberof modifiers
       * @inner
       */
      keepTogether: {
        /** @prop {number} order=400 - Index used to define the order of execution */
        order: 400,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: keepTogether
      },

      /**
       * This modifier is used to move the `arrowElement` of the popper to make
       * sure it is positioned between the reference element and its popper element.
       * It will read the outer size of the `arrowElement` node to detect how many
       * pixels of conjunction are needed.
       *
       * It has no effect if no `arrowElement` is provided.
       * @memberof modifiers
       * @inner
       */
      arrow: {
        /** @prop {number} order=500 - Index used to define the order of execution */
        order: 500,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: arrow,
        /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
        element: '[x-arrow]'
      },

      /**
       * Modifier used to flip the popper's placement when it starts to overlap its
       * reference element.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       *
       * **NOTE:** this modifier will interrupt the current update cycle and will
       * restart it if it detects the need to flip the placement.
       * @memberof modifiers
       * @inner
       */
      flip: {
        /** @prop {number} order=600 - Index used to define the order of execution */
        order: 600,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: flip,
        /**
         * @prop {String|Array} behavior='flip'
         * The behavior used to change the popper's placement. It can be one of
         * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
         * placements (with optional variations)
         */
        behavior: 'flip',
        /**
         * @prop {number} padding=5
         * The popper will flip if it hits the edges of the `boundariesElement`
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='viewport'
         * The element which will define the boundaries of the popper position.
         * The popper will never be placed outside of the defined boundaries
         * (except if `keepTogether` is enabled)
         */
        boundariesElement: 'viewport',
        /**
         * @prop {Boolean} flipVariations=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the reference element overlaps its boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariations: false,
        /**
         * @prop {Boolean} flipVariationsByContent=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the popper element overlaps its reference boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariationsByContent: false
      },

      /**
       * Modifier used to make the popper flow toward the inner of the reference element.
       * By default, when this modifier is disabled, the popper will be placed outside
       * the reference element.
       * @memberof modifiers
       * @inner
       */
      inner: {
        /** @prop {number} order=700 - Index used to define the order of execution */
        order: 700,
        /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
        enabled: false,
        /** @prop {ModifierFn} */
        fn: inner
      },

      /**
       * Modifier used to hide the popper when its reference element is outside of the
       * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
       * be used to hide with a CSS selector the popper when its reference is
       * out of boundaries.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       * @memberof modifiers
       * @inner
       */
      hide: {
        /** @prop {number} order=800 - Index used to define the order of execution */
        order: 800,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: hide
      },

      /**
       * Computes the style that will be applied to the popper element to gets
       * properly positioned.
       *
       * Note that this modifier will not touch the DOM, it just prepares the styles
       * so that `applyStyle` modifier can apply it. This separation is useful
       * in case you need to replace `applyStyle` with a custom implementation.
       *
       * This modifier has `850` as `order` value to maintain backward compatibility
       * with previous versions of Popper.js. Expect the modifiers ordering method
       * to change in future major versions of the library.
       *
       * @memberof modifiers
       * @inner
       */
      computeStyle: {
        /** @prop {number} order=850 - Index used to define the order of execution */
        order: 850,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: computeStyle,
        /**
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: true,
        /**
         * @prop {string} [x='bottom']
         * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
         * Change this if your popper should grow in a direction different from `bottom`
         */
        x: 'bottom',
        /**
         * @prop {string} [x='left']
         * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
         * Change this if your popper should grow in a direction different from `right`
         */
        y: 'right'
      },

      /**
       * Applies the computed styles to the popper element.
       *
       * All the DOM manipulations are limited to this modifier. This is useful in case
       * you want to integrate Popper.js inside a framework or view library and you
       * want to delegate all the DOM manipulations to it.
       *
       * Note that if you disable this modifier, you must make sure the popper element
       * has its position set to `absolute` before Popper.js can do its work!
       *
       * Just disable this modifier and define your own to achieve the desired effect.
       *
       * @memberof modifiers
       * @inner
       */
      applyStyle: {
        /** @prop {number} order=900 - Index used to define the order of execution */
        order: 900,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: applyStyle,
        /** @prop {Function} */
        onLoad: applyStyleOnLoad,
        /**
         * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: undefined
      }
    };

    /**
     * The `dataObject` is an object containing all the information used by Popper.js.
     * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */

    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overridden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass an object with the same
     * structure of the `options` object, as the 3rd argument. For example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
      /**
       * Popper's placement.
       * @prop {Popper.placements} placement='bottom'
       */
      placement: 'bottom',

      /**
       * Set this to true if you want popper to position it self in 'fixed' mode
       * @prop {Boolean} positionFixed=false
       */
      positionFixed: false,

      /**
       * Whether events (resize, scroll) are initially enabled.
       * @prop {Boolean} eventsEnabled=true
       */
      eventsEnabled: true,

      /**
       * Set to true if you want to automatically remove the popper when
       * you call the `destroy` method.
       * @prop {Boolean} removeOnDestroy=false
       */
      removeOnDestroy: false,

      /**
       * Callback called when the popper is created.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onCreate}
       */
      onCreate: function onCreate() {},

      /**
       * Callback called when the popper is updated. This callback is not called
       * on the initialization/creation of the popper, but only on subsequent
       * updates.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onUpdate}
       */
      onUpdate: function onUpdate() {},

      /**
       * List of modifiers used to modify the offsets before they are applied to the popper.
       * They provide most of the functionalities of Popper.js.
       * @prop {modifiers}
       */
      modifiers: modifiers
    };

    /**
     * @callback onCreate
     * @param {dataObject} data
     */

    /**
     * @callback onUpdate
     * @param {dataObject} data
     */

    // Utils
    // Methods
    var Popper$1 = function () {
      /**
       * Creates a new Popper.js instance.
       * @class Popper
       * @param {Element|referenceObject} reference - The reference element used to position the popper
       * @param {Element} popper - The HTML / XML element used as the popper
       * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
       * @return {Object} instance - The generated Popper.js instance
       */
      function Popper(reference, popper) {
        var _this = this;

        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck$1(this, Popper);

        this.scheduleUpdate = function () {
          return requestAnimationFrame(_this.update);
        };

        // make update() debounced, so that it only runs at most once-per-tick
        this.update = debounce(this.update.bind(this));

        // with {} we create a new object with the options inside it
        this.options = _extends$2({}, Popper.Defaults, options);

        // init state
        this.state = {
          isDestroyed: false,
          isCreated: false,
          scrollParents: []
        };

        // get reference and popper elements (allow jQuery wrappers)
        this.reference = reference && reference.jquery ? reference[0] : reference;
        this.popper = popper && popper.jquery ? popper[0] : popper;

        // Deep merge modifiers options
        this.options.modifiers = {};
        Object.keys(_extends$2({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
          _this.options.modifiers[name] = _extends$2({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
        });

        // Refactoring modifiers' list (Object => Array)
        this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
          return _extends$2({
            name: name
          }, _this.options.modifiers[name]);
        })
        // sort the modifiers by order
        .sort(function (a, b) {
          return a.order - b.order;
        });

        // modifiers have the ability to execute arbitrary code when Popper.js get inited
        // such code is executed in the same order of its modifier
        // they could add new properties to their options configuration
        // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
        this.modifiers.forEach(function (modifierOptions) {
          if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
            modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
          }
        });

        // fire the first update to position the popper in the right place
        this.update();

        var eventsEnabled = this.options.eventsEnabled;
        if (eventsEnabled) {
          // setup event listeners, they will take care of update the position in specific situations
          this.enableEventListeners();
        }

        this.state.eventsEnabled = eventsEnabled;
      }

      // We can't use class properties because they don't get listed in the
      // class prototype and break stuff like Sinon stubs


      createClass$1(Popper, [{
        key: 'update',
        value: function update$$1() {
          return update.call(this);
        }
      }, {
        key: 'destroy',
        value: function destroy$$1() {
          return destroy.call(this);
        }
      }, {
        key: 'enableEventListeners',
        value: function enableEventListeners$$1() {
          return enableEventListeners.call(this);
        }
      }, {
        key: 'disableEventListeners',
        value: function disableEventListeners$$1() {
          return disableEventListeners.call(this);
        }

        /**
         * Schedules an update. It will run on the next UI update available.
         * @method scheduleUpdate
         * @memberof Popper
         */


        /**
         * Collection of utilities useful when writing custom modifiers.
         * Starting from version 1.7, this method is available only if you
         * include `popper-utils.js` before `popper.js`.
         *
         * **DEPRECATION**: This way to access PopperUtils is deprecated
         * and will be removed in v2! Use the PopperUtils module directly instead.
         * Due to the high instability of the methods contained in Utils, we can't
         * guarantee them to follow semver. Use them at your own risk!
         * @static
         * @private
         * @type {Object}
         * @deprecated since version 1.8
         * @member Utils
         * @memberof Popper
         */

      }]);
      return Popper;
    }();

    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10.
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */


    Popper$1.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
    Popper$1.placements = placements;
    Popper$1.Defaults = Defaults;

    function flipPlacement(placement, theme) {
      var direction = theme && theme.direction || 'ltr';

      if (direction === 'ltr') {
        return placement;
      }

      switch (placement) {
        case 'bottom-end':
          return 'bottom-start';

        case 'bottom-start':
          return 'bottom-end';

        case 'top-end':
          return 'top-start';

        case 'top-start':
          return 'top-end';

        default:
          return placement;
      }
    }

    function getAnchorEl(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }

    var useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var defaultPopperOptions = {};
    /**
     * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v1/) for positioning.
     */

    var Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(props, ref) {
      var anchorEl = props.anchorEl,
          children = props.children,
          container = props.container,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          _props$keepMounted = props.keepMounted,
          keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
          modifiers = props.modifiers,
          open = props.open,
          _props$placement = props.placement,
          initialPlacement = _props$placement === void 0 ? 'bottom' : _props$placement,
          _props$popperOptions = props.popperOptions,
          popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions,
          popperRefProp = props.popperRef,
          style = props.style,
          _props$transition = props.transition,
          transition = _props$transition === void 0 ? false : _props$transition,
          other = _objectWithoutProperties(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]);

      var tooltipRef = React__namespace.useRef(null);
      var ownRef = useForkRef(tooltipRef, ref);
      var popperRef = React__namespace.useRef(null);
      var handlePopperRef = useForkRef(popperRef, popperRefProp);
      var handlePopperRefRef = React__namespace.useRef(handlePopperRef);
      useEnhancedEffect(function () {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React__namespace.useImperativeHandle(popperRefProp, function () {
        return popperRef.current;
      }, []);

      var _React$useState = React__namespace.useState(true),
          exited = _React$useState[0],
          setExited = _React$useState[1];

      var theme = useTheme$1();
      var rtlPlacement = flipPlacement(initialPlacement, theme);
      /**
       * placement initialized from prop but can change during lifetime if modifiers.flip.
       * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
       */

      var _React$useState2 = React__namespace.useState(rtlPlacement),
          placement = _React$useState2[0],
          setPlacement = _React$useState2[1];

      React__namespace.useEffect(function () {
        if (popperRef.current) {
          popperRef.current.update();
        }
      });
      var handleOpen = React__namespace.useCallback(function () {
        if (!tooltipRef.current || !anchorEl || !open) {
          return;
        }

        if (popperRef.current) {
          popperRef.current.destroy();
          handlePopperRefRef.current(null);
        }

        var handlePopperUpdate = function handlePopperUpdate(data) {
          setPlacement(data.placement);
        };

        var resolvedAnchorEl = getAnchorEl(anchorEl);

        if (process.env.NODE_ENV !== 'production') {
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          }
        }

        var popper = new Popper$1(getAnchorEl(anchorEl), tooltipRef.current, _extends$3({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: _extends$3({}, disablePortal ? {} : {
            // It's using scrollParent by default, we can use the viewport when using a portal.
            preventOverflow: {
              boundariesElement: 'window'
            }
          }, modifiers, popperOptions.modifiers),
          // We could have been using a custom modifier like react-popper is doing.
          // But it seems this is the best public API for this use case.
          onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),
          onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)
        }));
        handlePopperRefRef.current(popper);
      }, [anchorEl, disablePortal, modifiers, open, rtlPlacement, popperOptions]);
      var handleRef = React__namespace.useCallback(function (node) {
        setRef(ownRef, node);
        handleOpen();
      }, [ownRef, handleOpen]);

      var handleEnter = function handleEnter() {
        setExited(false);
      };

      var handleClose = function handleClose() {
        if (!popperRef.current) {
          return;
        }

        popperRef.current.destroy();
        handlePopperRefRef.current(null);
      };

      var handleExited = function handleExited() {
        setExited(true);
        handleClose();
      };

      React__namespace.useEffect(function () {
        return function () {
          handleClose();
        };
      }, []);
      React__namespace.useEffect(function () {
        if (!open && !transition) {
          // Otherwise handleExited will call this.
          handleClose();
        }
      }, [open, transition]);

      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }

      var childProps = {
        placement: placement
      };

      if (transition) {
        childProps.TransitionProps = {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        };
      }

      return /*#__PURE__*/React__namespace.createElement(Portal, {
        disablePortal: disablePortal,
        container: container
      }, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: handleRef,
        role: "tooltip"
      }, other, {
        style: _extends$3({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: 'fixed',
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: !open && keepMounted && !transition ? 'none' : null
        }, style)
      }), typeof children === 'function' ? children(childProps) : children));
    });
    process.env.NODE_ENV !== "production" ? Popper.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A HTML element, [referenceObject](https://popper.js.org/docs/v1/#referenceObject),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.object, propTypes.func]), function (props) {
        if (props.open) {
          var resolvedAnchorEl = getAnchorEl(props.anchorEl);

          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== 'number' || typeof resolvedAnchorEl.clientHeight !== 'number' || typeof resolvedAnchorEl.getBoundingClientRect !== 'function') {
            return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a referenceObject ', '(https://popper.js.org/docs/v1/#referenceObject).'].join('\n'));
          }
        }

        return null;
      }),

      /**
       * Popper render function or node.
       */
      children: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([propTypes.node, propTypes.func]).isRequired,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: propTypes
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, propTypes.instanceOf(React__namespace.Component), propTypes.func]),

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,

      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       */
      keepMounted: propTypes.bool,

      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v1/#modifiers).
       */
      modifiers: propTypes.object,

      /**
       * If `true`, the popper is visible.
       */
      open: propTypes.bool.isRequired,

      /**
       * Popper placement.
       */
      placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

      /**
       * Options provided to the [`popper.js`](https://popper.js.org/docs/v1/) instance.
       */
      popperOptions: propTypes.object,

      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType,

      /**
       * @ignore
       */
      style: propTypes.object,

      /**
       * Help supporting a react-transition-group/Transition component.
       */
      transition: propTypes.bool
    } : void 0;

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf$1(subClass, superClass);
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized$1(self);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function areEqualValues(a, b) {
      if (_typeof$1(b) === 'object' && b !== null) {
        return a === b;
      }

      return String(a) === String(b);
    }

    function isEmpty(display) {
      return display == null || typeof display === 'string' && !display.trim();
    }
    /**
     * @ignore - internal component.
     */


    var SelectInput = /*#__PURE__*/React__namespace.forwardRef(function SelectInput(props, ref) {
      var ariaLabel = props['aria-label'],
          autoFocus = props.autoFocus,
          autoWidth = props.autoWidth,
          children = props.children,
          classes = props.classes,
          className = props.className,
          defaultValue = props.defaultValue,
          disabled = props.disabled,
          displayEmpty = props.displayEmpty,
          IconComponent = props.IconComponent,
          inputRefProp = props.inputRef,
          labelId = props.labelId,
          _props$MenuProps = props.MenuProps,
          MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
          multiple = props.multiple,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClose = props.onClose,
          onFocus = props.onFocus,
          onOpen = props.onOpen,
          openProp = props.open,
          readOnly = props.readOnly,
          renderValue = props.renderValue,
          _props$SelectDisplayP = props.SelectDisplayProps,
          SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,
          tabIndexProp = props.tabIndex;
          props.type;
          var valueProp = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Select'
      }),
          _useControlled2 = _slicedToArray$1(_useControlled, 2),
          value = _useControlled2[0],
          setValue = _useControlled2[1];

      var inputRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(null),
          displayNode = _React$useState[0],
          setDisplayNode = _React$useState[1];

      var _React$useRef = React__namespace.useRef(openProp != null),
          isOpenControlled = _React$useRef.current;

      var _React$useState2 = React__namespace.useState(),
          menuMinWidthState = _React$useState2[0],
          setMenuMinWidthState = _React$useState2[1];

      var _React$useState3 = React__namespace.useState(false),
          openState = _React$useState3[0],
          setOpenState = _React$useState3[1];

      var handleRef = useForkRef(ref, inputRefProp);
      React__namespace.useImperativeHandle(handleRef, function () {
        return {
          focus: function focus() {
            displayNode.focus();
          },
          node: inputRef.current,
          value: value
        };
      }, [displayNode, value]);
      React__namespace.useEffect(function () {
        if (autoFocus && displayNode) {
          displayNode.focus();
        }
      }, [autoFocus, displayNode]);
      React__namespace.useEffect(function () {
        if (displayNode) {
          var label = ownerDocument(displayNode).getElementById(labelId);

          if (label) {
            var handler = function handler() {
              if (getSelection().isCollapsed) {
                displayNode.focus();
              }
            };

            label.addEventListener('click', handler);
            return function () {
              label.removeEventListener('click', handler);
            };
          }
        }

        return undefined;
      }, [labelId, displayNode]);

      var update = function update(open, event) {
        if (open) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }

        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
          setOpenState(open);
        }
      };

      var handleMouseDown = function handleMouseDown(event) {
        // Ignore everything but left-click
        if (event.button !== 0) {
          return;
        } // Hijack the default focus behavior.


        event.preventDefault();
        displayNode.focus();
        update(true, event);
      };

      var handleClose = function handleClose(event) {
        update(false, event);
      };

      var childrenArray = React__namespace.Children.toArray(children); // Support autofill.

      var handleChange = function handleChange(event) {
        var index = childrenArray.map(function (child) {
          return child.props.value;
        }).indexOf(event.target.value);

        if (index === -1) {
          return;
        }

        var child = childrenArray[index];
        setValue(child.props.value);

        if (onChange) {
          onChange(event, child);
        }
      };

      var handleItemClick = function handleItemClick(child) {
        return function (event) {
          if (!multiple) {
            update(false, event);
          }

          var newValue;

          if (multiple) {
            newValue = Array.isArray(value) ? value.slice() : [];
            var itemIndex = value.indexOf(child.props.value);

            if (itemIndex === -1) {
              newValue.push(child.props.value);
            } else {
              newValue.splice(itemIndex, 1);
            }
          } else {
            newValue = child.props.value;
          }

          if (child.props.onClick) {
            child.props.onClick(event);
          }

          if (value === newValue) {
            return;
          }

          setValue(newValue);

          if (onChange) {
            event.persist(); // Preact support, target is read only property on a native event.

            Object.defineProperty(event, 'target', {
              writable: true,
              value: {
                value: newValue,
                name: name
              }
            });
            onChange(event, child);
          }
        };
      };

      var handleKeyDown = function handleKeyDown(event) {
        if (!readOnly) {
          var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
          // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
          'Enter'];

          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };

      var open = displayNode !== null && (isOpenControlled ? openProp : openState);

      var handleBlur = function handleBlur(event) {
        // if open event.stopImmediatePropagation
        if (!open && onBlur) {
          event.persist(); // Preact support, target is read only property on a native event.

          Object.defineProperty(event, 'target', {
            writable: true,
            value: {
              value: value,
              name: name
            }
          });
          onBlur(event);
        }
      };

      delete other['aria-invalid'];
      var display;
      var displaySingle;
      var displayMultiple = [];
      var computeDisplay = false;
      var foundMatch = false; // No need to display any value if the field is empty.

      if (isFilled({
        value: value
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }

      var items = childrenArray.map(function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs.isFragment(child)) {
            console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var selected;

        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : formatMuiErrorMessage(2));
          }

          selected = value.some(function (v) {
            return areEqualValues(v, child.props.value);
          });

          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);

          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }

        if (selected) {
          foundMatch = true;
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          'aria-selected': selected ? 'true' : undefined,
          onClick: handleItemClick(child),
          onKeyUp: function onKeyUp(event) {
            if (event.key === ' ') {
              // otherwise our MenuItems dispatches a click event
              // it's not behavior of the native <option> and causes
              // the select to close immediately since we open on space keydown
              event.preventDefault();
            }

            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: 'option',
          selected: selected,
          value: undefined,
          // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.

        });
      });

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (!foundMatch && !multiple && value !== '') {
            var values = childrenArray.map(function (child) {
              return child.props.value;
            });
            console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? "(name=\"".concat(name, "\") ") : '', "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values.filter(function (x) {
              return x != null;
            }).map(function (x) {
              return "`".concat(x, "`");
            }).join(', ') || '""', ".")].join('\n'));
          }
        }, [foundMatch, childrenArray, multiple, name, value]);
      }

      if (computeDisplay) {
        display = multiple ? displayMultiple.join(', ') : displaySingle;
      } // Avoid performing a layout computation in the render method.


      var menuMinWidth = menuMinWidthState;

      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = displayNode.clientWidth;
      }

      var tabIndex;

      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }

      var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : undefined);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: clsx(classes.root, // TODO v5: merge root and select
        classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
        ref: setDisplayNode,
        tabIndex: tabIndex,
        role: "button",
        "aria-disabled": disabled ? 'true' : undefined,
        "aria-expanded": open ? 'true' : undefined,
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus: onFocus
      }, SelectDisplayProps, {
        // The id is required for proper a11y
        id: buttonId
      }), isEmpty(display) ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      }) : display), /*#__PURE__*/React__namespace.createElement("input", _extends$3({
        value: Array.isArray(value) ? value.join(',') : value,
        name: name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        className: classes.nativeInput,
        autoFocus: autoFocus
      }, other)), /*#__PURE__*/React__namespace.createElement(IconComponent, {
        className: clsx(classes.icon, classes["icon".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)
      }), /*#__PURE__*/React__namespace.createElement(Menu$1, _extends$3({
        id: "menu-".concat(name || ''),
        anchorEl: displayNode,
        open: open,
        onClose: handleClose
      }, MenuProps, {
        MenuListProps: _extends$3({
          'aria-labelledby': labelId,
          role: 'listbox',
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends$3({}, MenuProps.PaperProps, {
          style: _extends$3({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        })
      }), items));
    });
    process.env.NODE_ENV !== "production" ? SelectInput.propTypes = {
      /**
       * @ignore
       */
      'aria-label': propTypes.string,

      /**
       * @ignore
       */
      autoFocus: propTypes.bool,

      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: propTypes.bool,

      /**
       * The option elements to populate the select with.
       * Can be some `<MenuItem>` elements.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * The CSS class name of the select element.
       */
      className: propTypes.string,

      /**
       * The default element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the select will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the selected item is displayed even if its value is empty.
       */
      displayEmpty: propTypes.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType.isRequired,

      /**
       * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
       * Equivalent to `ref`
       */
      inputRef: refType,

      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: propTypes.string,

      /**
       * Props applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: propTypes.object,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: propTypes.bool,

      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: propTypes.string,

      /**
       * @ignore
       */
      onBlur: propTypes.func,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected.
       */
      onChange: propTypes.func,

      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: propTypes.func,

      /**
       * @ignore
       */
      onFocus: propTypes.func,

      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: propTypes.func,

      /**
       * Control `select` open state.
       */
      open: propTypes.bool,

      /**
       * @ignore
       */
      readOnly: propTypes.bool,

      /**
       * Render the selected value.
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: propTypes.func,

      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: propTypes.object,

      /**
       * @ignore
       */
      tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * @ignore
       */
      type: propTypes.any,

      /**
       * The input value.
       */
      value: propTypes.any,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;

    var styles$8 = styles$b;

    var _ref$1 = /*#__PURE__*/React__namespace.createElement(Input$1, null);

    var _ref2$1 = /*#__PURE__*/React__namespace.createElement(FilledInput$1, null);

    var Select = /*#__PURE__*/React__namespace.forwardRef(function Select(props, ref) {
      var _props$autoWidth = props.autoWidth,
          autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
          children = props.children,
          classes = props.classes,
          _props$displayEmpty = props.displayEmpty,
          displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon$1 : _props$IconComponent,
          id = props.id,
          input = props.input,
          inputProps = props.inputProps,
          label = props.label,
          labelId = props.labelId,
          _props$labelWidth = props.labelWidth,
          labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
          MenuProps = props.MenuProps,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$native = props.native,
          native = _props$native === void 0 ? false : _props$native,
          onClose = props.onClose,
          onOpen = props.onOpen,
          open = props.open,
          renderValue = props.renderValue,
          SelectDisplayProps = props.SelectDisplayProps,
          _props$variant = props.variant,
          variantProps = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);

      var inputComponent = native ? NativeSelectInput : SelectInput;
      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      var variant = fcs.variant || variantProps;
      var InputComponent = input || {
        standard: _ref$1,
        outlined: /*#__PURE__*/React__namespace.createElement(OutlinedInput$1, {
          label: label,
          labelWidth: labelWidth
        }),
        filled: _ref2$1
      }[variant];
      return /*#__PURE__*/React__namespace.cloneElement(InputComponent, _extends$3({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: inputComponent,
        inputProps: _extends$3({
          children: children,
          IconComponent: IconComponent,
          variant: variant,
          type: undefined,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple: multiple
        }, native ? {
          id: id
        } : {
          autoWidth: autoWidth,
          displayEmpty: displayEmpty,
          labelId: labelId,
          MenuProps: MenuProps,
          onClose: onClose,
          onOpen: onOpen,
          open: open,
          renderValue: renderValue,
          SelectDisplayProps: _extends$3({
            id: id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? mergeClasses({
            baseClasses: classes,
            newClasses: inputProps.classes,
            Component: Select
          }) : classes
        }, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Select.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: propTypes.bool,

      /**
       * The option elements to populate the select with.
       * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
       *
       * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * The default element value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, a value is displayed even if no items are selected.
       *
       * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.
       * You can only use it when the `native` prop is `false` (default).
       */
      displayEmpty: propTypes.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: propTypes.elementType,

      /**
       * The `id` of the wrapper element or the `select` element when `native`.
       */
      id: propTypes.string,

      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: propTypes.element,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * When `native` is `true`, the attributes are applied on the `select` element.
       */
      inputProps: propTypes.object,

      /**
       * See [OutlinedInput#label](/api/outlined-input/#props)
       */
      label: propTypes.node,

      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: propTypes.string,

      /**
       * See [OutlinedInput#label](/api/outlined-input/#props)
       */
      labelWidth: propTypes.number,

      /**
       * Props applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: propTypes.object,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: propTypes.bool,

      /**
       * If `true`, the component will be using a native `select` element.
       */
      native: propTypes.bool,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected when `native` is `false` (default).
       */
      onChange: propTypes.func,

      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: propTypes.func,

      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: propTypes.func,

      /**
       * Control `select` open state.
       * You can only use it when the `native` prop is `false` (default).
       */
      open: propTypes.bool,

      /**
       * Render the selected value.
       * You can only use it when the `native` prop is `false` (default).
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: propTypes.func,

      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: propTypes.object,

      /**
       * The input value. Providing an empty string will select no options.
       * This prop is required when the `native` prop is `false` (default).
       * Set to an empty string `''` if you don't want any of the available options to be selected.
       *
       * If the value is an object it must have reference equality with the option in order to be selected.
       * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
       */
      value: propTypes.any,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    Select.muiName = 'Select';
    var Select$1 = withStyles(styles$8, {
      name: 'MuiSelect'
    })(Select);

    var styles$7 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          width: 34 + 12 * 2,
          height: 14 + 12 * 2,
          overflow: 'hidden',
          padding: 12,
          boxSizing: 'border-box',
          position: 'relative',
          flexShrink: 0,
          zIndex: 0,
          // Reset the stacking context.
          verticalAlign: 'middle',
          // For correct alignment with the text.
          '@media print': {
            colorAdjust: 'exact'
          }
        },

        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -8
        },

        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -8
        },

        /* Styles applied to the internal `SwitchBase` component's `root` class. */
        switchBase: {
          position: 'absolute',
          top: 0,
          left: 0,
          zIndex: 1,
          // Render above the focus ripple.
          color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],
          transition: theme.transitions.create(['left', 'transform'], {
            duration: theme.transitions.duration.shortest
          }),
          '&$checked': {
            transform: 'translateX(20px)'
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            opacity: 0.5
          },
          '&$disabled + $track': {
            opacity: theme.palette.type === 'light' ? 0.12 : 0.1
          }
        },

        /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.primary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },

        /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.secondary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          width: 40,
          height: 24,
          padding: 7,
          '& $thumb': {
            width: 16,
            height: 16
          },
          '& $switchBase': {
            padding: 4,
            '&$checked': {
              transform: 'translateX(16px)'
            }
          }
        },

        /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */
        checked: {},

        /* Pseudo-class applied to the internal SwitchBase component's disabled class. */
        disabled: {},

        /* Styles applied to the internal SwitchBase component's input element. */
        input: {
          left: '-100%',
          width: '300%'
        },

        /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */
        thumb: {
          boxShadow: theme.shadows[1],
          backgroundColor: 'currentColor',
          width: 20,
          height: 20,
          borderRadius: '50%'
        },

        /* Styles applied to the track element. */
        track: {
          height: '100%',
          width: '100%',
          borderRadius: 14 / 2,
          zIndex: -1,
          transition: theme.transitions.create(['opacity', 'background-color'], {
            duration: theme.transitions.duration.shortest
          }),
          backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,
          opacity: theme.palette.type === 'light' ? 0.38 : 0.3
        }
      };
    };
    var Switch = /*#__PURE__*/React__namespace.forwardRef(function Switch(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);

      var icon = /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.thumb
      });
      return /*#__PURE__*/React__namespace.createElement("span", {
        className: clsx(classes.root, className, {
          'start': classes.edgeStart,
          'end': classes.edgeEnd
        }[edge], size === "small" && classes["size".concat(capitalize(size))])
      }, /*#__PURE__*/React__namespace.createElement(SwitchBase$1, _extends$3({
        type: "checkbox",
        icon: icon,
        checkedIcon: icon,
        classes: {
          root: clsx(classes.switchBase, classes["color".concat(capitalize(color))]),
          input: classes.input,
          checked: classes.checked,
          disabled: classes.disabled
        },
        ref: ref
      }, other)), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.track
      }));
    });
    process.env.NODE_ENV !== "production" ? Switch.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component is checked.
       */
      checked: propTypes.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['default', 'primary', 'secondary']),

      /**
       * @ignore
       */
      defaultChecked: propTypes.bool,

      /**
       * If `true`, the switch will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: propTypes.bool,

      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: propTypes.oneOf(['end', 'start', false]),

      /**
       * The icon to display when the component is unchecked.
       */
      icon: propTypes.node,

      /**
       * The id of the `input` element.
       */
      id: propTypes.string,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: propTypes.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: propTypes.bool,

      /**
       * The size of the switch.
       * `small` is equivalent to the dense switch styling.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: propTypes.any
    } : void 0;
    var Switch$1 = withStyles(styles$7, {
      name: 'MuiSwitch'
    })(Switch);

    var styles$6 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'flex',
          alignItems: 'center'
        },

        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: _defineProperty({
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2)
        }, theme.breakpoints.up('sm'), {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }),

        /* Styles applied to the root element if `variant="regular"`. */
        regular: theme.mixins.toolbar,

        /* Styles applied to the root element if `variant="dense"`. */
        dense: {
          minHeight: 48
        }
      };
    };
    var Toolbar = /*#__PURE__*/React__namespace.forwardRef(function Toolbar(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'regular' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: clsx(classes.root, classes[variant], className, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Toolbar.propTypes = {
      /**
       * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object.isRequired,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, disables gutter padding.
       */
      disableGutters: propTypes.bool,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['regular', 'dense'])
    } : void 0;
    var Toolbar$1 = withStyles(styles$6, {
      name: 'MuiToolbar'
    })(Toolbar);

    var variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    var styles$5 = {
      /* Styles applied to the root element. */
      root: {}
    };
    /**
     * The `TextField` is a convenience wrapper for the most common cases (80%).
     * It cannot be all things to all people, otherwise the API would grow out of control.
     *
     * ## Advanced Configuration
     *
     * It's important to understand that the text field is a simple abstraction
     * on top of the following components:
     *
     * - [FormControl](/api/form-control/)
     * - [InputLabel](/api/input-label/)
     * - [FilledInput](/api/filled-input/)
     * - [OutlinedInput](/api/outlined-input/)
     * - [Input](/api/input/)
     * - [FormHelperText](/api/form-helper-text/)
     *
     * If you wish to alter the props applied to the `input` element, you can do so as follows:
     *
     * ```jsx
     * const inputProps = {
     *   step: 300,
     * };
     *
     * return <TextField id="time" type="time" inputProps={inputProps} />;
     * ```
     *
     * For advanced cases, please look at the source of TextField by clicking on the
     * "Edit this page" button above. Consider either:
     *
     * - using the upper case props for passing values directly to the components
     * - using the underlying components directly as shown in the demos
     */

    var TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(props, ref) {
      var autoComplete = props.autoComplete,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          defaultValue = props.defaultValue,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          FormHelperTextProps = props.FormHelperTextProps,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          helperText = props.helperText,
          hiddenLabel = props.hiddenLabel,
          id = props.id,
          InputLabelProps = props.InputLabelProps,
          inputProps = props.inputProps,
          InputProps = props.InputProps,
          inputRef = props.inputRef,
          label = props.label,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          placeholder = props.placeholder,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          rows = props.rows,
          rowsMax = props.rowsMax,
          _props$select = props.select,
          select = _props$select === void 0 ? false : _props$select,
          SelectProps = props.SelectProps,
          type = props.type,
          value = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);

      if (process.env.NODE_ENV !== 'production') {
        if (select && !children) {
          console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');
        }
      }

      var InputMore = {};

      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }

        if (label) {
          var _InputLabelProps$requ;

          var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
          InputMore.label = /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, label, displayRequired && "\xA0*");
        }
      }

      if (select) {
        // unset defaults from textbox inputs
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = undefined;
        }

        InputMore['aria-describedby'] = undefined;
      }

      var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
      var inputLabelId = label && id ? "".concat(id, "-label") : undefined;
      var InputComponent = variantComponent[variant];
      var InputElement = /*#__PURE__*/React__namespace.createElement(InputComponent, _extends$3({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        rowsMax: rowsMax,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
      }, InputMore, InputProps));
      return /*#__PURE__*/React__namespace.createElement(FormControl$1, _extends$3({
        className: clsx(classes.root, className),
        disabled: disabled,
        error: error,
        fullWidth: fullWidth,
        hiddenLabel: hiddenLabel,
        ref: ref,
        required: required,
        color: color,
        variant: variant
      }, other), label && /*#__PURE__*/React__namespace.createElement(InputLabel$1, _extends$3({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps), label), select ? /*#__PURE__*/React__namespace.createElement(Select$1, _extends$3({
        "aria-describedby": helperTextId,
        id: id,
        labelId: inputLabelId,
        value: value,
        input: InputElement
      }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React__namespace.createElement(FormHelperText$1, _extends$3({
        id: helperTextId
      }, FormHelperTextProps), helperText));
    });
    process.env.NODE_ENV !== "production" ? TextField.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: propTypes.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: propTypes.bool,

      /**
       * @ignore
       */
      children: propTypes.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: propTypes.oneOf(['primary', 'secondary']),

      /**
       * The default value of the `input` element.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: propTypes.bool,

      /**
       * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
       */
      FormHelperTextProps: propTypes.object,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The helper text content.
       */
      helperText: propTypes.node,

      /**
       * @ignore
       */
      hiddenLabel: propTypes.bool,

      /**
       * The id of the `input` element.
       * Use this prop to make `label` and `helperText` accessible for screen readers.
       */
      id: propTypes.string,

      /**
       * Props applied to the [`InputLabel`](/api/input-label/) element.
       */
      InputLabelProps: propTypes.object,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: propTypes.object,

      /**
       * Props applied to the Input element.
       * It will be a [`FilledInput`](/api/filled-input/),
       * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
       * component depending on the `variant` prop value.
       */
      InputProps: propTypes.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType,

      /**
       * The label content.
       */
      label: propTypes.node,

      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: propTypes.oneOf(['dense', 'none', 'normal']),

      /**
       * If `true`, a textarea element will be rendered instead of an input.
       */
      multiline: propTypes.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: propTypes.string,

      /**
       * @ignore
       */
      onBlur: propTypes.func,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: propTypes.func,

      /**
       * @ignore
       */
      onFocus: propTypes.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: propTypes.string,

      /**
       * If `true`, the label is displayed as required and the `input` element` will be required.
       */
      required: propTypes.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

      /**
       * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
       * If this option is set you must pass the options of the select as children.
       */
      select: propTypes.bool,

      /**
       * Props applied to the [`Select`](/api/select/) element.
       */
      SelectProps: propTypes.object,

      /**
       * The size of the text field.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: propTypes.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: propTypes.any,

      /**
       * The variant to use.
       */
      variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var TextField$1 = withStyles(styles$5, {
      name: 'MuiTextField'
    })(TextField);

    var style$1 = makeStyles(function (theme) {
        return createStyles({
            root: {
                userSelect: "none",
                width: "1em",
                height: "1em",
                display: "inline-block",
                fill: "currentColor",
                flexShrink: 0,
                fontSize: 24,
                transition: theme.transitions.create("fill", {
                    duration: theme.transitions.duration.shorter,
                }),
            },
        });
    });

    var SvgIcon = React.memo(function (_a) {
        var className = _a.className, id = _a.id, children = _a.children, SvgProps = __rest(_a, ["className", "id", "children"]);
        var classes = style$1();
        return (React__default['default'].createElement("svg", __assign({ className: clsx(classes.root, className), id: id, width: "24", height: "24", viewBox: "0 0 24 24" }, SvgProps), children));
    });

    var MoreVert = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-dots-vertical" },
            React__default['default'].createElement("path", { d: "M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z" })));
    };

    var useStyles$g = makeStyles(function (theme) {
        return createStyles({
            toolbarContainer: {
                borderBottom: "solid " + theme.palette.grey[300] + " 1px",
                display: "flex",
                alignItems: "center",
            },
            tools: {
                display: "flex",
                alignItems: "center",
                flex: 1,
            },
            title: { padding: "0 " + theme.spacing(1) },
            icon: {
                fill: theme.palette.secondary.main,
            },
        });
    });
    var TableToolbar = function (_a) {
        var title = _a.title, height = _a.height, classes = _a.classes, rest = __rest(_a, ["title", "height", "classes"]);
        var toolbarClasses = useStyles$g();
        return (React__default['default'].createElement("div", { style: { height: height || DEFAULT_TOOLBAR_HEIGHT }, className: clsx(toolbarClasses.toolbarContainer, classes === null || classes === void 0 ? void 0 : classes.root) },
            React__default['default'].createElement("div", { className: clsx(toolbarClasses.tools) },
                React__default['default'].createElement(ToolbarMoreVert, { classes: classes }),
                rest.operationOnRows && React__default['default'].createElement(ToolbarOperation, __assign({}, rest))),
            React__default['default'].createElement(Typography$1, { align: "center", className: toolbarClasses.title }, title !== null && title !== void 0 ? title : "")));
    };
    function ToolbarMoreVert(_a) {
        var _b;
        var classes = _a.classes;
        var _c = React.useState(null), anchorEl = _c[0], setAnchorEl = _c[1];
        var open = Boolean(anchorEl);
        var enhancedColumns = useTStoreState(function (state) { return state.enhancedColumns; });
        var toolbarClasses = useStyles$g();
        var handleClick = function (event) {
            setAnchorEl(event.currentTarget);
        };
        var handleClose = function () {
            setAnchorEl(null);
        };
        var toggleVisibleColumns = useTStoreActions(function (actions) { return actions.toggleVisibleColumns; });
        var toggleShowFilter = useTStoreActions(function (actions) { return actions.toggleShowFilter; });
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(IconButton$1, { onClick: handleClick, className: classes === null || classes === void 0 ? void 0 : classes.iconButton },
                React__default['default'].createElement(MoreVert, { className: clsx((_b = {}, _b[toolbarClasses.icon] = !(classes === null || classes === void 0 ? void 0 : classes.icon), _b), classes === null || classes === void 0 ? void 0 : classes.icon) })),
            React__default['default'].createElement(Menu$1, { disableScrollLock: true, id: "long-menu", anchorEl: anchorEl, keepMounted: true, open: open, onClose: handleClose, className: classes === null || classes === void 0 ? void 0 : classes.menu },
                React__default['default'].createElement(MenuItem$1, { className: classes === null || classes === void 0 ? void 0 : classes.menuItem, onClick: function () {
                        toggleShowFilter(true);
                        handleClose();
                    } }, "filter"), enhancedColumns === null || enhancedColumns === void 0 ? void 0 :
                enhancedColumns.map(function (c, index) { return (React__default['default'].createElement(MenuItem$1, { key: c.key, className: classes === null || classes === void 0 ? void 0 : classes.menuItem },
                    React__default['default'].createElement(FormControlLabel$1, { control: React__default['default'].createElement(Switch$1, { checked: c.visible, onChange: function () { return toggleVisibleColumns({ index: index }); }, name: c.label }), label: c.label }))); }))));
    }
    function ToolbarOperation(_a) {
        var operationOnRows = _a.operationOnRows;
        var numRowsSelected = useTStoreState(function (state) { return state.numRowsSelected; });
        return (React__default['default'].createElement(React__default['default'].Fragment, null, operationOnRows &&
            numRowsSelected > 0 &&
            operationOnRows.map(function (Component, index) { return (React__default['default'].createElement(Component, { key: index })); })));
    }

    /**
     * @ignore - internal component.
     */

    var CloseIcon$1 = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Close');

    /**
     * @ignore - internal component.
     */

    var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    // Give up on IE 11 support for this feature

    function stripDiacritics(string) {
      return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
    }

    function createFilterOptions() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _config$ignoreAccents = config.ignoreAccents,
          ignoreAccents = _config$ignoreAccents === void 0 ? true : _config$ignoreAccents,
          _config$ignoreCase = config.ignoreCase,
          ignoreCase = _config$ignoreCase === void 0 ? true : _config$ignoreCase,
          limit = config.limit,
          _config$matchFrom = config.matchFrom,
          matchFrom = _config$matchFrom === void 0 ? 'any' : _config$matchFrom,
          stringify = config.stringify,
          _config$trim = config.trim,
          trim = _config$trim === void 0 ? false : _config$trim;
      return function (options, _ref) {
        var inputValue = _ref.inputValue,
            getOptionLabel = _ref.getOptionLabel;
        var input = trim ? inputValue.trim() : inputValue;

        if (ignoreCase) {
          input = input.toLowerCase();
        }

        if (ignoreAccents) {
          input = stripDiacritics(input);
        }

        var filteredOptions = options.filter(function (option) {
          var candidate = (stringify || getOptionLabel)(option);

          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }

          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }

          return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    } // To replace with .findIndex() once we stop IE 11 support.

    function findIndex(array, comp) {
      for (var i = 0; i < array.length; i += 1) {
        if (comp(array[i])) {
          return i;
        }
      }

      return -1;
    }

    var defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.

    var pageSize = 5;
    function useAutocomplete(props) {
      var _props$autoComplete = props.autoComplete,
          autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,
          _props$autoHighlight = props.autoHighlight,
          autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,
          _props$autoSelect = props.autoSelect,
          autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,
          _props$blurOnSelect = props.blurOnSelect,
          blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,
          _props$clearOnBlur = props.clearOnBlur,
          clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,
          _props$clearOnEscape = props.clearOnEscape,
          clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,
          _props$componentName = props.componentName,
          componentName = _props$componentName === void 0 ? 'useAutocomplete' : _props$componentName,
          _props$debug = props.debug,
          debug = _props$debug === void 0 ? false : _props$debug,
          _props$defaultValue = props.defaultValue,
          defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,
          _props$disableClearab = props.disableClearable,
          disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,
          _props$disableCloseOn = props.disableCloseOnSelect,
          disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,
          _props$disabledItemsF = props.disabledItemsFocusable,
          disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
          _props$disableListWra = props.disableListWrap,
          disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
          _props$filterOptions = props.filterOptions,
          filterOptions = _props$filterOptions === void 0 ? defaultFilterOptions : _props$filterOptions,
          _props$filterSelected = props.filterSelectedOptions,
          filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,
          _props$freeSolo = props.freeSolo,
          freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,
          getOptionDisabled = props.getOptionDisabled,
          _props$getOptionLabel = props.getOptionLabel,
          getOptionLabelProp = _props$getOptionLabel === void 0 ? function (option) {
        return option;
      } : _props$getOptionLabel,
          _props$getOptionSelec = props.getOptionSelected,
          getOptionSelected = _props$getOptionSelec === void 0 ? function (option, value) {
        return option === value;
      } : _props$getOptionSelec,
          groupBy = props.groupBy,
          _props$handleHomeEndK = props.handleHomeEndKeys,
          handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,
          idProp = props.id,
          _props$includeInputIn = props.includeInputInList,
          includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,
          inputValueProp = props.inputValue,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          onChange = props.onChange,
          onClose = props.onClose,
          onHighlightChange = props.onHighlightChange,
          onInputChange = props.onInputChange,
          onOpen = props.onOpen,
          openProp = props.open,
          _props$openOnFocus = props.openOnFocus,
          openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,
          options = props.options,
          _props$selectOnFocus = props.selectOnFocus,
          selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,
          valueProp = props.value;
      var id = useId(idProp);
      var getOptionLabel = getOptionLabelProp;

      if (process.env.NODE_ENV !== 'production') {
        getOptionLabel = function getOptionLabel(option) {
          var optionLabel = getOptionLabelProp(option);

          if (typeof optionLabel !== 'string') {
            var erroneousReturn = optionLabel === undefined ? 'undefined' : "".concat(_typeof$1(optionLabel), " (").concat(optionLabel, ")");
            console.error("Material-UI: The `getOptionLabel` method of ".concat(componentName, " returned ").concat(erroneousReturn, " instead of a string for ").concat(JSON.stringify(option), "."));
          }

          return optionLabel;
        };
      }

      var ignoreFocus = React__namespace.useRef(false);
      var firstFocus = React__namespace.useRef(true);
      var inputRef = React__namespace.useRef(null);
      var listboxRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(null),
          anchorEl = _React$useState[0],
          setAnchorEl = _React$useState[1];

      var _React$useState2 = React__namespace.useState(-1),
          focusedTag = _React$useState2[0],
          setFocusedTag = _React$useState2[1];

      var defaultHighlighted = autoHighlight ? 0 : -1;
      var highlightedIndexRef = React__namespace.useRef(defaultHighlighted);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
      }),
          _useControlled2 = _slicedToArray$1(_useControlled, 2),
          value = _useControlled2[0],
          setValue = _useControlled2[1];

      var _useControlled3 = useControlled({
        controlled: inputValueProp,
        default: '',
        name: componentName,
        state: 'inputValue'
      }),
          _useControlled4 = _slicedToArray$1(_useControlled3, 2),
          inputValue = _useControlled4[0],
          setInputValue = _useControlled4[1];

      var _React$useState3 = React__namespace.useState(false),
          focused = _React$useState3[0],
          setFocused = _React$useState3[1];

      var resetInputValue = useEventCallback(function (event, newValue) {
        var newInputValue;

        if (multiple) {
          newInputValue = '';
        } else if (newValue == null) {
          newInputValue = '';
        } else {
          var optionLabel = getOptionLabel(newValue);
          newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
        }

        if (inputValue === newInputValue) {
          return;
        }

        setInputValue(newInputValue);

        if (onInputChange) {
          onInputChange(event, newInputValue, 'reset');
        }
      });
      React__namespace.useEffect(function () {
        resetInputValue(null, value);
      }, [value, resetInputValue]);

      var _useControlled5 = useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: 'open'
      }),
          _useControlled6 = _slicedToArray$1(_useControlled5, 2),
          open = _useControlled6[0],
          setOpenState = _useControlled6[1];

      var inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
      var popupOpen = open;
      var filteredOptions = popupOpen ? filterOptions(options.filter(function (option) {
        if (filterSelectedOptions && (multiple ? value : [value]).some(function (value2) {
          return value2 !== null && getOptionSelected(option, value2);
        })) {
          return false;
        }

        return true;
      }), // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue ? '' : inputValue,
        getOptionLabel: getOptionLabel
      }) : [];

      if (process.env.NODE_ENV !== 'production') {
        if (value !== null && !freeSolo && options.length > 0) {
          var missingValue = (multiple ? value : [value]).filter(function (value2) {
            return !options.some(function (option) {
              return getOptionSelected(option, value2);
            });
          });

          if (missingValue.length > 0) {
            console.warn(["Material-UI: The value provided to ".concat(componentName, " is invalid."), "None of the options match with `".concat(missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0]), "`."), 'You can use the `getOptionSelected` prop to customize the equality test.'].join('\n'));
          }
        }
      }

      var focusTag = useEventCallback(function (tagToFocus) {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector("[data-tag-index=\"".concat(tagToFocus, "\"]")).focus();
        }
      }); // Ensure the focusedTag is never inconsistent

      React__namespace.useEffect(function () {
        if (multiple && focusedTag > value.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value, multiple, focusedTag, focusTag]);

      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) {
          return -1;
        }

        var nextFocus = index;

        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }

          var option = listboxRef.current.querySelector("[data-option-index=\"".concat(nextFocus, "\"]")); // Same logic as MenuList.js

          var nextFocusDisabled = disabledItemsFocusable ? false : option && (option.disabled || option.getAttribute('aria-disabled') === 'true');

          if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
            // Move to the next element.
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }

      var setHighlightedIndex = useEventCallback(function (_ref2) {
        var event = _ref2.event,
            index = _ref2.index,
            _ref2$reason = _ref2.reason,
            reason = _ref2$reason === void 0 ? 'auto' : _ref2$reason;
        highlightedIndexRef.current = index; // does the index exist?

        if (index === -1) {
          inputRef.current.removeAttribute('aria-activedescendant');
        } else {
          inputRef.current.setAttribute('aria-activedescendant', "".concat(id, "-option-").concat(index));
        }

        if (onHighlightChange) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }

        if (!listboxRef.current) {
          return;
        }

        var prev = listboxRef.current.querySelector('[data-focus]');

        if (prev) {
          prev.removeAttribute('data-focus');
        }

        var listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"

        if (!listboxNode) {
          return;
        }

        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }

        var option = listboxRef.current.querySelector("[data-option-index=\"".concat(index, "\"]"));

        if (!option) {
          return;
        }

        option.setAttribute('data-focus', 'true'); // Scroll active descendant into view.
        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
        //
        // Consider this API instead once it has a better browser support:
        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });

        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
          var element = option;
          var scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          var elementBottom = element.offsetTop + element.offsetHeight;

          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      var changeHighlightedIndex = useEventCallback(function (_ref3) {
        var event = _ref3.event,
            diff = _ref3.diff,
            _ref3$direction = _ref3.direction,
            direction = _ref3$direction === void 0 ? 'next' : _ref3$direction,
            _ref3$reason = _ref3.reason,
            reason = _ref3$reason === void 0 ? 'auto' : _ref3$reason;

        if (!popupOpen) {
          return;
        }

        var getNextIndex = function getNextIndex() {
          var maxIndex = filteredOptions.length - 1;

          if (diff === 'reset') {
            return defaultHighlighted;
          }

          if (diff === 'start') {
            return 0;
          }

          if (diff === 'end') {
            return maxIndex;
          }

          var newIndex = highlightedIndexRef.current + diff;

          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }

            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
              return 0;
            }

            return maxIndex;
          }

          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }

            if (disableListWrap || Math.abs(diff) > 1) {
              return maxIndex;
            }

            return 0;
          }

          return newIndex;
        };

        var nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason: reason,
          event: event
        }); // Sync the content of the input with the highlighted option.

        if (autoComplete && diff !== 'reset') {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            var option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
            // a completion string, appears inline after the input cursor in the textbox.

            var index = option.toLowerCase().indexOf(inputValue.toLowerCase());

            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      var syncHighlightedIndex = React__namespace.useCallback(function () {
        if (!popupOpen) {
          return;
        }

        var valueItem = multiple ? value[0] : value; // The popup is empty, reset

        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: 'reset'
          });
          return;
        }

        if (!listboxRef.current) {
          return;
        } // Synchronize the value with the highlighted index


        if (!filterSelectedOptions && valueItem != null) {
          var currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible

          if (multiple && currentOption && findIndex(value, function (val) {
            return getOptionSelected(currentOption, val);
          }) !== -1) {
            return;
          }

          var itemIndex = findIndex(filteredOptions, function (optionItem) {
            return getOptionSelected(optionItem, valueItem);
          });

          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: 'reset'
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }

          return;
        } // Prevent the highlighted index to leak outside the boundaries.


        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        } // Restore the focus to the previous index.


        setHighlightedIndex({
          index: highlightedIndexRef.current
        }); // Ignore filteredOptions (and options, getOptionSelected, getOptionLabel) not to break the scroll position
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [// Only sync the highlighted index when the option switch between empty and not
      // eslint-disable-next-line react-hooks/exhaustive-deps
      filteredOptions.length === 0, // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
      var handleListboxRef = useEventCallback(function (node) {
        setRef(listboxRef, node);

        if (!node) {
          return;
        }

        syncHighlightedIndex();
      });
      React__namespace.useEffect(function () {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);

      var handleOpen = function handleOpen(event) {
        if (open) {
          return;
        }

        setOpenState(true);

        if (onOpen) {
          onOpen(event);
        }
      };

      var handleClose = function handleClose(event, reason) {
        if (!open) {
          return;
        }

        setOpenState(false);

        if (onClose) {
          onClose(event, reason);
        }
      };

      var handleValue = function handleValue(event, newValue, reason, details) {
        if (value === newValue) {
          return;
        }

        if (onChange) {
          onChange(event, newValue, reason, details);
        }

        setValue(newValue);
      };

      var isTouch = React__namespace.useRef(false);

      var selectNewValue = function selectNewValue(event, option) {
        var reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'select-option';
        var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';
        var reason = reasonProp;
        var newValue = option;

        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];

          if (process.env.NODE_ENV !== 'production') {
            var matches = newValue.filter(function (val) {
              return getOptionSelected(option, val);
            });

            if (matches.length > 1) {
              console.error(["Material-UI: The `getOptionSelected` method of ".concat(componentName, " do not handle the arguments correctly."), "The component expects a single value to match a given option but found ".concat(matches.length, " matches.")].join('\n'));
            }
          }

          var itemIndex = findIndex(newValue, function (valueItem) {
            return getOptionSelected(option, valueItem);
          });

          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== 'freeSolo') {
            newValue.splice(itemIndex, 1);
            reason = 'remove-option';
          }
        }

        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
          option: option
        });

        if (!disableCloseOnSelect) {
          handleClose(event, reason);
        }

        if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
          inputRef.current.blur();
        }
      };

      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }

        var nextFocus = index;

        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }

          var option = anchorEl.querySelector("[data-tag-index=\"".concat(nextFocus, "\"]")); // Same logic as MenuList.js

          if (option && (!option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true')) {
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }

      var handleFocusTag = function handleFocusTag(event, direction) {
        if (!multiple) {
          return;
        }

        handleClose(event, 'toggleInput');
        var nextTag = focusedTag;

        if (focusedTag === -1) {
          if (inputValue === '' && direction === 'previous') {
            nextTag = value.length - 1;
          }
        } else {
          nextTag += direction === 'next' ? 1 : -1;

          if (nextTag < 0) {
            nextTag = 0;
          }

          if (nextTag === value.length) {
            nextTag = -1;
          }
        }

        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };

      var handleClear = function handleClear(event) {
        ignoreFocus.current = true;
        setInputValue('');

        if (onInputChange) {
          onInputChange(event, '', 'clear');
        }

        handleValue(event, multiple ? [] : null, 'clear');
      };

      var handleKeyDown = function handleKeyDown(other) {
        return function (event) {
          if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
            setFocusedTag(-1);
            focusTag(-1);
          }

          switch (event.key) {
            case 'Home':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'start',
                  direction: 'next',
                  reason: 'keyboard',
                  event: event
                });
              }

              break;

            case 'End':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'end',
                  direction: 'previous',
                  reason: 'keyboard',
                  event: event
                });
              }

              break;

            case 'PageUp':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: 'previous',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'PageDown':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: 'next',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowDown':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: 'next',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowUp':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: 'previous',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowLeft':
              handleFocusTag(event, 'previous');
              break;

            case 'ArrowRight':
              handleFocusTag(event, 'next');
              break;

            case 'Enter':
              // Wait until IME is settled.
              if (event.which === 229) {
                break;
              }

              if (highlightedIndexRef.current !== -1 && popupOpen) {
                var option = filteredOptions[highlightedIndexRef.current];
                var disabled = getOptionDisabled ? getOptionDisabled(option) : false; // We don't want to validate the form.

                event.preventDefault();

                if (disabled) {
                  return;
                }

                selectNewValue(event, option, 'select-option'); // Move the selection to the end.

                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
                if (multiple) {
                  // Allow people to add new values before they submit the form.
                  event.preventDefault();
                }

                selectNewValue(event, inputValue, 'create-option', 'freeSolo');
              }

              break;

            case 'Escape':
              if (popupOpen) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault(); // Avoid the Modal to handle the event.

                event.stopPropagation();
                handleClose(event, 'escape');
              } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault(); // Avoid the Modal to handle the event.

                event.stopPropagation();
                handleClear(event);
              }

              break;

            case 'Backspace':
              if (multiple && inputValue === '' && value.length > 0) {
                var index = focusedTag === -1 ? value.length - 1 : focusedTag;
                var newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, 'remove-option', {
                  option: value[index]
                });
              }

              break;
          }

          if (other.onKeyDown) {
            other.onKeyDown(event);
          }
        };
      };

      var handleFocus = function handleFocus(event) {
        setFocused(true);

        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };

      var handleBlur = function handleBlur(event) {
        // Ignore the event when using the scrollbar with IE 11
        if (listboxRef.current !== null && document.activeElement === listboxRef.current.parentElement) {
          inputRef.current.focus();
          return;
        }

        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;

        if (debug && inputValue !== '') {
          return;
        }

        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
        } else if (autoSelect && freeSolo && inputValue !== '') {
          selectNewValue(event, inputValue, 'blur', 'freeSolo');
        } else if (clearOnBlur) {
          resetInputValue(event, value);
        }

        handleClose(event, 'blur');
      };

      var handleInputChange = function handleInputChange(event) {
        var newValue = event.target.value;

        if (inputValue !== newValue) {
          setInputValue(newValue);

          if (onInputChange) {
            onInputChange(event, newValue, 'input');
          }
        }

        if (newValue === '') {
          if (!disableClearable && !multiple) {
            handleValue(event, null, 'clear');
          }
        } else {
          handleOpen(event);
        }
      };

      var handleOptionMouseOver = function handleOptionMouseOver(event) {
        setHighlightedIndex({
          event: event,
          index: Number(event.currentTarget.getAttribute('data-option-index')),
          reason: 'mouse'
        });
      };

      var handleOptionTouchStart = function handleOptionTouchStart() {
        isTouch.current = true;
      };

      var handleOptionClick = function handleOptionClick(event) {
        var index = Number(event.currentTarget.getAttribute('data-option-index'));
        selectNewValue(event, filteredOptions[index], 'select-option');
        isTouch.current = false;
      };

      var handleTagDelete = function handleTagDelete(index) {
        return function (event) {
          var newValue = value.slice();
          newValue.splice(index, 1);
          handleValue(event, newValue, 'remove-option', {
            option: value[index]
          });
        };
      };

      var handlePopupIndicator = function handlePopupIndicator(event) {
        if (open) {
          handleClose(event, 'toggleInput');
        } else {
          handleOpen(event);
        }
      }; // Prevent input blur when interacting with the combobox


      var handleMouseDown = function handleMouseDown(event) {
        if (event.target.getAttribute('id') !== id) {
          event.preventDefault();
        }
      }; // Focus the input when interacting with the combobox


      var handleClick = function handleClick() {
        inputRef.current.focus();

        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }

        firstFocus.current = false;
      };

      var handleInputMouseDown = function handleInputMouseDown(event) {
        if (inputValue === '' || !open) {
          handlePopupIndicator(event);
        }
      };

      var dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value.length > 0 : value !== null);
      var groupedOptions = filteredOptions;

      if (groupBy) {
        // used to keep track of key and indexes in the result array
        var indexBy = new Map();
        var warn = false;
        groupedOptions = filteredOptions.reduce(function (acc, option, index) {
          var group = groupBy(option);

          if (acc.length > 0 && acc[acc.length - 1].group === group) {
            acc[acc.length - 1].options.push(option);
          } else {
            if (process.env.NODE_ENV !== 'production') {
              if (indexBy.get(group) && !warn) {
                console.warn("Material-UI: The options provided combined with the `groupBy` method of ".concat(componentName, " returns duplicated headers."), 'You can solve the issue by sorting the options with the output of `groupBy`.');
                warn = true;
              }

              indexBy.set(group, true);
            }

            acc.push({
              key: index,
              index: index,
              group: group,
              options: [option]
            });
          }

          return acc;
        }, []);
      }

      return {
        getRootProps: function getRootProps() {
          var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return _extends$3({
            'aria-owns': popupOpen ? "".concat(id, "-popup") : null,
            role: 'combobox',
            'aria-expanded': popupOpen
          }, other, {
            onKeyDown: handleKeyDown(other),
            onMouseDown: handleMouseDown,
            onClick: handleClick
          });
        },
        getInputLabelProps: function getInputLabelProps() {
          return {
            id: "".concat(id, "-label"),
            htmlFor: id
          };
        },
        getInputProps: function getInputProps() {
          return {
            id: id,
            value: inputValue,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onChange: handleInputChange,
            onMouseDown: handleInputMouseDown,
            // if open then this is handled imperativeley so don't let react override
            // only have an opinion about this when closed
            'aria-activedescendant': popupOpen ? '' : null,
            'aria-autocomplete': autoComplete ? 'both' : 'list',
            'aria-controls': popupOpen ? "".concat(id, "-popup") : null,
            // Disable browser's suggestion that might overlap with the popup.
            // Handle autocomplete but not autofill.
            autoComplete: 'off',
            ref: inputRef,
            autoCapitalize: 'none',
            spellCheck: 'false'
          };
        },
        getClearProps: function getClearProps() {
          return {
            tabIndex: -1,
            onClick: handleClear
          };
        },
        getPopupIndicatorProps: function getPopupIndicatorProps() {
          return {
            tabIndex: -1,
            onClick: handlePopupIndicator
          };
        },
        getTagProps: function getTagProps(_ref4) {
          var index = _ref4.index;
          return {
            key: index,
            'data-tag-index': index,
            tabIndex: -1,
            onDelete: handleTagDelete(index)
          };
        },
        getListboxProps: function getListboxProps() {
          return {
            role: 'listbox',
            id: "".concat(id, "-popup"),
            'aria-labelledby': "".concat(id, "-label"),
            ref: handleListboxRef,
            onMouseDown: function onMouseDown(event) {
              // Prevent blur
              event.preventDefault();
            }
          };
        },
        getOptionProps: function getOptionProps(_ref5) {
          var index = _ref5.index,
              option = _ref5.option;
          var selected = (multiple ? value : [value]).some(function (value2) {
            return value2 != null && getOptionSelected(option, value2);
          });
          var disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: index,
            tabIndex: -1,
            role: 'option',
            id: "".concat(id, "-option-").concat(index),
            onMouseOver: handleOptionMouseOver,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            'data-option-index': index,
            'aria-disabled': disabled,
            'aria-selected': selected
          };
        },
        id: id,
        inputValue: inputValue,
        value: value,
        dirty: dirty,
        popupOpen: popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl: anchorEl,
        setAnchorEl: setAnchorEl,
        focusedTag: focusedTag,
        groupedOptions: groupedOptions
      };
    }

    var styles$4 = function styles(theme) {
      var _option;

      return {
        /* Styles applied to the root element. */
        root: {
          '&$focused $clearIndicatorDirty': {
            visibility: 'visible'
          },

          /* Avoid double tap issue on iOS */
          '@media (pointer: fine)': {
            '&:hover $clearIndicatorDirty': {
              visibility: 'visible'
            }
          }
        },

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Pseudo-class applied to the root element if focused. */
        focused: {},

        /* Styles applied to the tag elements, e.g. the chips. */
        tag: {
          margin: 3,
          maxWidth: 'calc(100% - 6px)'
        },

        /* Styles applied to the tag elements, e.g. the chips if `size="small"`. */
        tagSizeSmall: {
          margin: 2,
          maxWidth: 'calc(100% - 4px)'
        },

        /* Styles applied when the popup icon is rendered. */
        hasPopupIcon: {},

        /* Styles applied when the clear icon is rendered. */
        hasClearIcon: {},

        /* Styles applied to the Input element. */
        inputRoot: {
          flexWrap: 'wrap',
          '$hasPopupIcon &, $hasClearIcon &': {
            paddingRight: 26 + 4
          },
          '$hasPopupIcon$hasClearIcon &': {
            paddingRight: 52 + 4
          },
          '& $input': {
            width: 0,
            minWidth: 30
          },
          '&[class*="MuiInput-root"]': {
            paddingBottom: 1,
            '& $input': {
              padding: 4
            },
            '& $input:first-child': {
              padding: '6px 0'
            }
          },
          '&[class*="MuiInput-root"][class*="MuiInput-marginDense"]': {
            '& $input': {
              padding: '4px 4px 5px'
            },
            '& $input:first-child': {
              padding: '3px 0 6px'
            }
          },
          '&[class*="MuiOutlinedInput-root"]': {
            padding: 9,
            '$hasPopupIcon &, $hasClearIcon &': {
              paddingRight: 26 + 4 + 9
            },
            '$hasPopupIcon$hasClearIcon &': {
              paddingRight: 52 + 4 + 9
            },
            '& $input': {
              padding: '9.5px 4px'
            },
            '& $input:first-child': {
              paddingLeft: 6
            },
            '& $endAdornment': {
              right: 9
            }
          },
          '&[class*="MuiOutlinedInput-root"][class*="MuiOutlinedInput-marginDense"]': {
            padding: 6,
            '& $input': {
              padding: '4.5px 4px'
            }
          },
          '&[class*="MuiFilledInput-root"]': {
            paddingTop: 19,
            paddingLeft: 8,
            '$hasPopupIcon &, $hasClearIcon &': {
              paddingRight: 26 + 4 + 9
            },
            '$hasPopupIcon$hasClearIcon &': {
              paddingRight: 52 + 4 + 9
            },
            '& $input': {
              padding: '9px 4px'
            },
            '& $endAdornment': {
              right: 9
            }
          },
          '&[class*="MuiFilledInput-root"][class*="MuiFilledInput-marginDense"]': {
            paddingBottom: 1,
            '& $input': {
              padding: '4.5px 4px'
            }
          }
        },

        /* Styles applied to the input element. */
        input: {
          flexGrow: 1,
          textOverflow: 'ellipsis',
          opacity: 0
        },

        /* Styles applied to the input element if tag focused. */
        inputFocused: {
          opacity: 1
        },

        /* Styles applied to the endAdornment element. */
        endAdornment: {
          // We use a position absolute to support wrapping tags.
          position: 'absolute',
          right: 0,
          top: 'calc(50% - 14px)' // Center vertically

        },

        /* Styles applied to the clear indicator. */
        clearIndicator: {
          marginRight: -2,
          padding: 4,
          visibility: 'hidden'
        },

        /* Styles applied to the clear indicator if the input is dirty. */
        clearIndicatorDirty: {},

        /* Styles applied to the popup indicator. */
        popupIndicator: {
          padding: 2,
          marginRight: -2
        },

        /* Styles applied to the popup indicator if the popup is open. */
        popupIndicatorOpen: {
          transform: 'rotate(180deg)'
        },

        /* Styles applied to the popper element. */
        popper: {
          zIndex: theme.zIndex.modal
        },

        /* Styles applied to the popper element if `disablePortal={true}`. */
        popperDisablePortal: {
          position: 'absolute'
        },

        /* Styles applied to the `Paper` component. */
        paper: _extends$3({}, theme.typography.body1, {
          overflow: 'hidden',
          margin: '4px 0'
        }),

        /* Styles applied to the `listbox` component. */
        listbox: {
          listStyle: 'none',
          margin: 0,
          padding: '8px 0',
          maxHeight: '40vh',
          overflow: 'auto'
        },

        /* Styles applied to the loading wrapper. */
        loading: {
          color: theme.palette.text.secondary,
          padding: '14px 16px'
        },

        /* Styles applied to the no option wrapper. */
        noOptions: {
          color: theme.palette.text.secondary,
          padding: '14px 16px'
        },

        /* Styles applied to the option elements. */
        option: (_option = {
          minHeight: 48,
          display: 'flex',
          justifyContent: 'flex-start',
          alignItems: 'center',
          cursor: 'pointer',
          paddingTop: 6,
          boxSizing: 'border-box',
          outline: '0',
          WebkitTapHighlightColor: 'transparent',
          paddingBottom: 6,
          paddingLeft: 16,
          paddingRight: 16
        }, _defineProperty(_option, theme.breakpoints.up('sm'), {
          minHeight: 'auto'
        }), _defineProperty(_option, '&[aria-selected="true"]', {
          backgroundColor: theme.palette.action.selected
        }), _defineProperty(_option, '&[data-focus="true"]', {
          backgroundColor: theme.palette.action.hover
        }), _defineProperty(_option, '&:active', {
          backgroundColor: theme.palette.action.selected
        }), _defineProperty(_option, '&[aria-disabled="true"]', {
          opacity: theme.palette.action.disabledOpacity,
          pointerEvents: 'none'
        }), _option),

        /* Styles applied to the group's label elements. */
        groupLabel: {
          backgroundColor: theme.palette.background.paper,
          top: -8
        },

        /* Styles applied to the group's ul elements. */
        groupUl: {
          padding: 0,
          '& $option': {
            paddingLeft: 24
          }
        }
      };
    };

    function DisablePortal(props) {
      // eslint-disable-next-line react/prop-types
      props.anchorEl;
          props.open;
          var other = _objectWithoutProperties(props, ["anchorEl", "open"]);

      return /*#__PURE__*/React__namespace.createElement("div", other);
    }

    var _ref = /*#__PURE__*/React__namespace.createElement(CloseIcon$1, {
      fontSize: "small"
    });

    var _ref2 = /*#__PURE__*/React__namespace.createElement(ArrowDropDownIcon, null);

    var Autocomplete = /*#__PURE__*/React__namespace.forwardRef(function Autocomplete(props, ref) {
      /* eslint-disable no-unused-vars */
      props.autoComplete;
          props.autoHighlight;
          props.autoSelect;
          props.blurOnSelect;
          var ChipProps = props.ChipProps,
          classes = props.classes,
          className = props.className,
          _props$clearOnBlur = props.clearOnBlur;
          _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur;
          props.clearOnEscape;
          var _props$clearText = props.clearText,
          clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,
          _props$closeIcon = props.closeIcon,
          closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,
          _props$closeText = props.closeText,
          closeText = _props$closeText === void 0 ? 'Close' : _props$closeText;
          props.debug;
          var _props$defaultValue = props.defaultValue;
          _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue;
          var _props$disableClearab = props.disableClearable,
          disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab;
          props.disableCloseOnSelect;
          var _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled;
          props.disabledItemsFocusable;
          props.disableListWrap;
          var _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal;
          props.filterOptions;
          props.filterSelectedOptions;
          var _props$forcePopupIcon = props.forcePopupIcon,
          forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,
          _props$freeSolo = props.freeSolo,
          freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$getLimitTagsTe = props.getLimitTagsText,
          getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {
        return "+".concat(more);
      } : _props$getLimitTagsTe;
          props.getOptionDisabled;
          var _props$getOptionLabel = props.getOptionLabel,
          getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {
        return x;
      } : _props$getOptionLabel;
          props.getOptionSelected;
          var groupBy = props.groupBy,
          _props$handleHomeEndK = props.handleHomeEndKeys;
          _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK;
          props.id;
          props.includeInputInList;
          props.inputValue;
          var _props$limitTags = props.limitTags,
          limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,
          _props$ListboxCompone = props.ListboxComponent,
          ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,
          ListboxProps = props.ListboxProps,
          _props$loading = props.loading,
          loading = _props$loading === void 0 ? false : _props$loading,
          _props$loadingText = props.loadingText,
          loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$noOptionsText = props.noOptionsText,
          noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText;
          props.onChange;
          props.onClose;
          props.onHighlightChange;
          props.onInputChange;
          props.onOpen;
          props.open;
          props.openOnFocus;
          var _props$openText = props.openText,
          openText = _props$openText === void 0 ? 'Open' : _props$openText;
          props.options;
          var _props$PaperComponent = props.PaperComponent,
          PaperComponent = _props$PaperComponent === void 0 ? Paper$1 : _props$PaperComponent,
          _props$PopperComponen = props.PopperComponent,
          PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,
          _props$popupIcon = props.popupIcon,
          popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,
          renderGroupProp = props.renderGroup,
          renderInput = props.renderInput,
          renderOptionProp = props.renderOption,
          renderTags = props.renderTags,
          _props$selectOnFocus = props.selectOnFocus;
          _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus;
          var _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size;
          props.value;
          var other = _objectWithoutProperties(props, ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "classes", "className", "clearOnBlur", "clearOnEscape", "clearText", "closeIcon", "closeText", "debug", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "getOptionSelected", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "value"]);
      /* eslint-enable no-unused-vars */


      var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;

      var _useAutocomplete = useAutocomplete(_extends$3({}, props, {
        componentName: 'Autocomplete'
      })),
          getRootProps = _useAutocomplete.getRootProps,
          getInputProps = _useAutocomplete.getInputProps,
          getInputLabelProps = _useAutocomplete.getInputLabelProps,
          getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,
          getClearProps = _useAutocomplete.getClearProps,
          getTagProps = _useAutocomplete.getTagProps,
          getListboxProps = _useAutocomplete.getListboxProps,
          getOptionProps = _useAutocomplete.getOptionProps,
          value = _useAutocomplete.value,
          dirty = _useAutocomplete.dirty,
          id = _useAutocomplete.id,
          popupOpen = _useAutocomplete.popupOpen,
          focused = _useAutocomplete.focused,
          focusedTag = _useAutocomplete.focusedTag,
          anchorEl = _useAutocomplete.anchorEl,
          setAnchorEl = _useAutocomplete.setAnchorEl,
          inputValue = _useAutocomplete.inputValue,
          groupedOptions = _useAutocomplete.groupedOptions;

      var startAdornment;

      if (multiple && value.length > 0) {
        var getCustomizedTagProps = function getCustomizedTagProps(params) {
          return _extends$3({
            className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),
            disabled: disabled
          }, getTagProps(params));
        };

        if (renderTags) {
          startAdornment = renderTags(value, getCustomizedTagProps);
        } else {
          startAdornment = value.map(function (option, index) {
            return /*#__PURE__*/React__namespace.createElement(Chip$1, _extends$3({
              label: getOptionLabel(option),
              size: size
            }, getCustomizedTagProps({
              index: index
            }), ChipProps));
          });
        }
      }

      if (limitTags > -1 && Array.isArray(startAdornment)) {
        var more = startAdornment.length - limitTags;

        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push( /*#__PURE__*/React__namespace.createElement("span", {
            className: classes.tag,
            key: startAdornment.length
          }, getLimitTagsText(more)));
        }
      }

      var defaultRenderGroup = function defaultRenderGroup(params) {
        return /*#__PURE__*/React__namespace.createElement("li", {
          key: params.key
        }, /*#__PURE__*/React__namespace.createElement(ListSubheader$1, {
          className: classes.groupLabel,
          component: "div"
        }, params.group), /*#__PURE__*/React__namespace.createElement("ul", {
          className: classes.groupUl
        }, params.children));
      };

      var renderGroup = renderGroupProp || defaultRenderGroup;
      var renderOption = renderOptionProp || getOptionLabel;

      var renderListOption = function renderListOption(option, index) {
        var optionProps = getOptionProps({
          option: option,
          index: index
        });
        return /*#__PURE__*/React__namespace.createElement("li", _extends$3({}, optionProps, {
          className: classes.option
        }), renderOption(option, {
          selected: optionProps['aria-selected'],
          inputValue: inputValue
        }));
      };

      var hasClearIcon = !disableClearable && !disabled;
      var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: ref,
        className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)
      }, getRootProps(other)), renderInput({
        id: id,
        disabled: disabled,
        fullWidth: true,
        size: size === 'small' ? 'small' : undefined,
        InputLabelProps: getInputLabelProps(),
        InputProps: {
          ref: setAnchorEl,
          className: classes.inputRoot,
          startAdornment: startAdornment,
          endAdornment: /*#__PURE__*/React__namespace.createElement("div", {
            className: classes.endAdornment
          }, hasClearIcon ? /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({}, getClearProps(), {
            "aria-label": clearText,
            title: clearText,
            className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)
          }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({}, getPopupIndicatorProps(), {
            disabled: disabled,
            "aria-label": popupOpen ? closeText : openText,
            title: popupOpen ? closeText : openText,
            className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)
          }), popupIcon) : null)
        },
        inputProps: _extends$3({
          className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),
          disabled: disabled
        }, getInputProps())
      })), popupOpen && anchorEl ? /*#__PURE__*/React__namespace.createElement(PopperComponent, {
        className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        role: "presentation",
        anchorEl: anchorEl,
        open: true
      }, /*#__PURE__*/React__namespace.createElement(PaperComponent, {
        className: classes.paper
      }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.loading
      }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.noOptions
      }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React__namespace.createElement(ListboxComponent, _extends$3({
        className: classes.listbox
      }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {
        if (groupBy) {
          return renderGroup({
            key: option.key,
            group: option.group,
            children: option.options.map(function (option2, index2) {
              return renderListOption(option2, option.index + index2);
            })
          });
        }

        return renderListOption(option, index);
      })) : null)) : null);
    });
    process.env.NODE_ENV !== "production" ? Autocomplete.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the portion of the selected suggestion that has not been typed by the user,
       * known as the completion string, appears inline after the input cursor in the textbox.
       * The inline completion string is visually highlighted and has a selected state.
       */
      autoComplete: propTypes.bool,

      /**
       * If `true`, the first option is automatically highlighted.
       */
      autoHighlight: propTypes.bool,

      /**
       * If `true`, the selected option becomes the value of the input
       * when the Autocomplete loses focus unless the user chooses
       * a different option or changes the character string in the input.
       */
      autoSelect: propTypes.bool,

      /**
       * Control if the input should be blurred when an option is selected:
       *
       * - `false` the input is not blurred.
       * - `true` the input is always blurred.
       * - `touch` the input is blurred after a touch event.
       * - `mouse` the input is blurred after a mouse event.
       */
      blurOnSelect: propTypes.oneOfType([propTypes.oneOf(['mouse', 'touch']), propTypes.bool]),

      /**
       * Props applied to the [`Chip`](/api/chip/) element.
       */
      ChipProps: propTypes.object,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: propTypes.object,

      /**
       * @ignore
       */
      className: propTypes.string,

      /**
       * If `true`, the input's text will be cleared on blur if no value is selected.
       *
       * Set to `true` if you want to help the user enter a new value.
       * Set to `false` if you want to help the user resume his search.
       */
      clearOnBlur: propTypes.bool,

      /**
       * If `true`, clear all values when the user presses escape and the popup is closed.
       */
      clearOnEscape: propTypes.bool,

      /**
       * Override the default text for the *clear* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      clearText: propTypes.string,

      /**
       * The icon to display in place of the default close icon.
       */
      closeIcon: propTypes.node,

      /**
       * Override the default text for the *close popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      closeText: propTypes.string,

      /**
       * If `true`, the popup will ignore the blur event if the input is filled.
       * You can inspect the popup markup with your browser tools.
       * Consider this option when you need to customize the component.
       */
      debug: propTypes.bool,

      /**
       * The default input value. Use when the component is not controlled.
       */
      defaultValue: propTypes.any,

      /**
       * If `true`, the input can't be cleared.
       */
      disableClearable: propTypes
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * If `true`, the popup won't close when a value is selected.
       */
      disableCloseOnSelect: propTypes.bool,

      /**
       * If `true`, the input will be disabled.
       */
      disabled: propTypes.bool,

      /**
       * If `true`, will allow focus on disabled items.
       */
      disabledItemsFocusable: propTypes.bool,

      /**
       * If `true`, the list box in the popup will not wrap focus.
       */
      disableListWrap: propTypes.bool,

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: propTypes.bool,

      /**
       * A filter function that determines the options that are eligible.
       *
       * @param {T[]} options The options to render.
       * @param {object} state The state of the component.
       * @returns {T[]}
       */
      filterOptions: propTypes.func,

      /**
       * If `true`, hide the selected options from the list box.
       */
      filterSelectedOptions: propTypes.bool,

      /**
       * Force the visibility display of the popup icon.
       */
      forcePopupIcon: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.bool]),

      /**
       * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
       */
      freeSolo: propTypes
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: propTypes.bool,

      /**
       * The label to display when the tags are truncated (`limitTags`).
       *
       * @param {number} more The number of truncated tags.
       * @returns {ReactNode}
       */
      getLimitTagsText: propTypes.func,

      /**
       * Used to determine the disabled state for a given option.
       *
       * @param {T} option The option to test.
       * @returns {boolean}
       */
      getOptionDisabled: propTypes.func,

      /**
       * Used to determine the string value for a given option.
       * It's used to fill the input (and the list box options if `renderOption` is not provided).
       *
       * @param {T} option
       * @returns {string}
       */
      getOptionLabel: propTypes.func,

      /**
       * Used to determine if an option is selected, considering the current value.
       * Uses strict equality by default.
       *
       * @param {T} option The option to test.
       * @param {T} value The value to test against.
       * @returns {boolean}
       */
      getOptionSelected: propTypes.func,

      /**
       * If provided, the options will be grouped under the returned string.
       * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
       *
       * @param {T} options The options to group.
       * @returns {string}
       */
      groupBy: propTypes.func,

      /**
       * If `true`, the component handles the "Home" and "End" keys when the popup is open.
       * It should move focus to the first option and last option, respectively.
       */
      handleHomeEndKeys: propTypes.bool,

      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: propTypes.string,

      /**
       * If `true`, the highlight can move to the input.
       */
      includeInputInList: propTypes.bool,

      /**
       * The input value.
       */
      inputValue: propTypes.string,

      /**
       * The maximum number of tags that will be visible when not focused.
       * Set `-1` to disable the limit.
       */
      limitTags: propTypes.number,

      /**
       * The component used to render the listbox.
       */
      ListboxComponent: propTypes.elementType,

      /**
       * Props applied to the Listbox element.
       */
      ListboxProps: propTypes.object,

      /**
       * If `true`, the component is in a loading state.
       */
      loading: propTypes.bool,

      /**
       * Text to display when in a loading state.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      loadingText: propTypes.node,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: propTypes
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * Text to display when there are no options.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      noOptionsText: propTypes.node,

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {T|T[]} value The new value of the component.
       * @param {string} reason One of "create-option", "select-option", "remove-option", "blur" or "clear".
       */
      onChange: propTypes.func,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"select-option"`, `"blur"`.
       */
      onClose: propTypes.func,

      /**
       * Callback fired when the highlight option changes.
       *
       * @param {object} event The event source of the callback.
       * @param {T} option The highlighted option.
       * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`.
       */
      onHighlightChange: propTypes.func,

      /**
       * Callback fired when the input value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {string} value The new value of the text input.
       * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
       */
      onInputChange: propTypes.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: propTypes.func,

      /**
       * Control the popup` open state.
       */
      open: propTypes.bool,

      /**
       * If `true`, the popup will open on input focus.
       */
      openOnFocus: propTypes.bool,

      /**
       * Override the default text for the *open popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      openText: propTypes.string,

      /**
       * Array of options.
       */
      options: propTypes.array.isRequired,

      /**
       * The component used to render the body of the popup.
       */
      PaperComponent: propTypes.elementType,

      /**
       * The component used to position the popup.
       */
      PopperComponent: propTypes.elementType,

      /**
       * The icon to display in place of the default popup icon.
       */
      popupIcon: propTypes.node,

      /**
       * Render the group.
       *
       * @param {any} option The group to render.
       * @returns {ReactNode}
       */
      renderGroup: propTypes.func,

      /**
       * Render the input.
       *
       * @param {object} params
       * @returns {ReactNode}
       */
      renderInput: propTypes.func.isRequired,

      /**
       * Render the option, use `getOptionLabel` by default.
       *
       * @param {T} option The option to render.
       * @param {object} state The state of the component.
       * @returns {ReactNode}
       */
      renderOption: propTypes.func,

      /**
       * Render the selected value.
       *
       * @param {T[]} value The `value` provided to the component.
       * @param {function} getTagProps A tag props getter.
       * @returns {ReactNode}
       */
      renderTags: propTypes.func,

      /**
       * If `true`, the input's text will be selected on focus.
       * It helps the user clear the selected value.
       */
      selectOnFocus: propTypes.bool,

      /**
       * The size of the autocomplete.
       */
      size: propTypes.oneOf(['medium', 'small']),

      /**
       * The value of the autocomplete.
       *
       * The value must have reference equality with the option in order to be selected.
       * You can customize the equality behavior with the `getOptionSelected` prop.
       */
      value: propTypes.any
    } : void 0;
    var Autocomplete$1 = withStyles(styles$4, {
      name: 'MuiAutocomplete'
    })(Autocomplete);

    function SimpleNumericInput(_a) {
        // const classes = filterValueStyles();
        var filterIndex = _a.filterIndex, valIndex = _a.valIndex, onSetFilter = _a.onSetFilter, value = _a.value, label = _a.label, classes = _a.classes;
        var handleChange = function (_) { return function (e) {
            if (!e.target.value)
                return;
            onSetFilter(filterIndex, valIndex, e.target.value);
        }; };
        // if (value === undefined || value === null) return null;
        return (React__default['default'].createElement(TextField$1, { classes: { root: clsx(classes === null || classes === void 0 ? void 0 : classes.root, classes === null || classes === void 0 ? void 0 : classes.input) }, key: "number-" + valIndex, value: value, onChange: handleChange(), type: "number", label: label, variant: "standard" }));
    }
    function SimpleStringInput(_a) {
        var filterIndex = _a.filterIndex, valIndex = _a.valIndex, onSetFilter = _a.onSetFilter, value = _a.value, classes = _a.classes, label = _a.label;
        var handleChange = function (valIndex) { return function (e) {
            if (!e.target.value)
                return;
            onSetFilter(filterIndex, valIndex, e.target.value);
        }; };
        // if (value === undefined || value === null) return null;
        return (React__default['default'].createElement(TextField$1, { classes: { root: clsx(classes === null || classes === void 0 ? void 0 : classes.root, classes === null || classes === void 0 ? void 0 : classes.input) }, key: "string-" + valIndex, value: value, onChange: handleChange(valIndex), label: label, variant: "standard" }));
    }
    // export function DateInput({
    //   filterIndex,
    //   valIndex,
    //   onSetFilter,
    //   value,
    //   classes,
    //   label,
    // }: FilterBaseProps) {
    //   // if (value === undefined || value === null) return null;
    //   return (
    //     <

    var MuiPickersContext = React.createContext(null);
    var MuiPickersUtilsProvider = function MuiPickersUtilsProvider(_ref) {
      var Utils = _ref.utils,
          children = _ref.children,
          locale = _ref.locale,
          libInstance = _ref.libInstance;
      var utils = React.useMemo(function () {
        return new Utils({
          locale: locale,
          instance: libInstance
        });
      }, [Utils, libInstance, locale]);
      return React.createElement(MuiPickersContext.Provider, {
        value: utils,
        children: children
      });
    };
    process.env.NODE_ENV !== "production" ? MuiPickersUtilsProvider.propTypes = {
      utils: propTypes.func.isRequired,
      locale: propTypes.oneOfType([propTypes.object, propTypes.string]),
      children: propTypes.oneOfType([propTypes.element.isRequired, propTypes.arrayOf(propTypes.element.isRequired)]).isRequired
    } : void 0;

    var checkUtils = function checkUtils(utils) {
      if (!utils) {
        // tslint:disable-next-line
        throw new Error('Can not find utils in context. You either a) forgot to wrap your component tree in MuiPickersUtilsProvider; or b) mixed named and direct file imports.  Recommendation: use named imports from the module index.');
      }
    };
    function useUtils() {
      var utils = React.useContext(MuiPickersContext);
      checkUtils(utils);
      return utils;
    }

    /** Use it instead of .includes method for IE support */
    function arrayIncludes(array, itemOrItems) {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.every(function (item) {
          return array.indexOf(item) !== -1;
        });
      }

      return array.indexOf(itemOrItems) !== -1;
    }

    var DIALOG_WIDTH = 310;
    var DIALOG_WIDTH_WIDER = 325;
    var VIEW_HEIGHT = 305;

    var useStyles$f = makeStyles(function (theme) {
      return {
        staticWrapperRoot: {
          overflow: 'hidden',
          minWidth: DIALOG_WIDTH,
          display: 'flex',
          flexDirection: 'column',
          backgroundColor: theme.palette.background.paper
        }
      };
    }, {
      name: 'MuiPickersStaticWrapper'
    });
    var StaticWrapper = function StaticWrapper(_ref) {
      var children = _ref.children;
      var classes = useStyles$f();
      return React.createElement("div", {
        className: classes.staticWrapperRoot,
        children: children
      });
    };

    var ModalDialog = function ModalDialog(_ref) {
      var children = _ref.children,
          classes = _ref.classes,
          onAccept = _ref.onAccept,
          onDismiss = _ref.onDismiss,
          onClear = _ref.onClear,
          onSetToday = _ref.onSetToday,
          okLabel = _ref.okLabel,
          cancelLabel = _ref.cancelLabel,
          clearLabel = _ref.clearLabel,
          todayLabel = _ref.todayLabel,
          clearable = _ref.clearable,
          showTodayButton = _ref.showTodayButton;
          _ref.showTabs;
          var wider = _ref.wider,
          other = _objectWithoutProperties(_ref, ["children", "classes", "onAccept", "onDismiss", "onClear", "onSetToday", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "clearable", "showTodayButton", "showTabs", "wider"]);

      return React.createElement(Dialog$1, _extends$3({
        role: "dialog",
        onClose: onDismiss,
        classes: {
          paper: clsx(classes.dialogRoot, wider && classes.dialogRootWider)
        }
      }, other), React.createElement(DialogContent$1, {
        children: children,
        className: classes.dialog
      }), React.createElement(DialogActions$1, {
        classes: {
          root: clsx((clearable || showTodayButton) && classes.withAdditionalAction)
        }
      }, clearable && React.createElement(Button$1, {
        color: "primary",
        onClick: onClear
      }, clearLabel), showTodayButton && React.createElement(Button$1, {
        color: "primary",
        onClick: onSetToday
      }, todayLabel), cancelLabel && React.createElement(Button$1, {
        color: "primary",
        onClick: onDismiss
      }, cancelLabel), okLabel && React.createElement(Button$1, {
        color: "primary",
        onClick: onAccept
      }, okLabel)));
    };
    ModalDialog.displayName = 'ModalDialog';
    var styles$3 = createStyles({
      dialogRoot: {
        minWidth: DIALOG_WIDTH
      },
      dialogRootWider: {
        minWidth: DIALOG_WIDTH_WIDER
      },
      dialog: {
        '&:first-child': {
          padding: 0
        }
      },
      withAdditionalAction: {
        // set justifyContent to default value to fix IE11 layout bug
        // see https://github.com/dmtrKovalenko/material-ui-pickers/pull/267
        justifyContent: 'flex-start',
        '& > *:first-child': {
          marginRight: 'auto'
        }
      }
    });
    var ModalDialog$1 = withStyles(styles$3, {
      name: 'MuiPickersModal'
    })(ModalDialog);

    var useIsomorphicEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
    function runKeyHandler(e, keyHandlers) {
      var handler = keyHandlers[e.key];

      if (handler) {
        handler(); // if event was handled prevent other side effects (e.g. page scroll)

        e.preventDefault();
      }
    }
    function useKeyDown(active, keyHandlers) {
      var keyHandlersRef = React.useRef(keyHandlers);
      keyHandlersRef.current = keyHandlers;
      useIsomorphicEffect(function () {
        if (active) {
          var handleKeyDown = function handleKeyDown(event) {
            runKeyHandler(event, keyHandlersRef.current);
          };

          window.addEventListener('keydown', handleKeyDown);
          return function () {
            window.removeEventListener('keydown', handleKeyDown);
          };
        }
      }, [active]);
    }

    var ModalWrapper = function ModalWrapper(_ref) {
      var open = _ref.open,
          children = _ref.children,
          okLabel = _ref.okLabel,
          cancelLabel = _ref.cancelLabel,
          clearLabel = _ref.clearLabel,
          todayLabel = _ref.todayLabel,
          showTodayButton = _ref.showTodayButton,
          clearable = _ref.clearable,
          DialogProps = _ref.DialogProps,
          showTabs = _ref.showTabs,
          wider = _ref.wider,
          InputComponent = _ref.InputComponent,
          DateInputProps = _ref.DateInputProps,
          onClear = _ref.onClear,
          onAccept = _ref.onAccept,
          onDismiss = _ref.onDismiss,
          onSetToday = _ref.onSetToday,
          other = _objectWithoutProperties(_ref, ["open", "children", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "showTodayButton", "clearable", "DialogProps", "showTabs", "wider", "InputComponent", "DateInputProps", "onClear", "onAccept", "onDismiss", "onSetToday"]);

      useKeyDown(open, {
        Enter: onAccept
      });
      return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$3({}, other, DateInputProps)), React.createElement(ModalDialog$1, _extends$3({
        wider: wider,
        showTabs: showTabs,
        open: open,
        onClear: onClear,
        onAccept: onAccept,
        onDismiss: onDismiss,
        onSetToday: onSetToday,
        clearLabel: clearLabel,
        todayLabel: todayLabel,
        okLabel: okLabel,
        cancelLabel: cancelLabel,
        clearable: clearable,
        showTodayButton: showTodayButton,
        children: children
      }, DialogProps)));
    };
    process.env.NODE_ENV !== "production" ? ModalWrapper.propTypes = {
      okLabel: propTypes.node,
      cancelLabel: propTypes.node,
      clearLabel: propTypes.node,
      clearable: propTypes.bool,
      todayLabel: propTypes.node,
      showTodayButton: propTypes.bool,
      DialogProps: propTypes.object
    } : void 0;
    ModalWrapper.defaultProps = {
      okLabel: 'OK',
      cancelLabel: 'Cancel',
      clearLabel: 'Clear',
      todayLabel: 'Today',
      clearable: false,
      showTodayButton: false
    };

    var InlineWrapper = function InlineWrapper(_ref) {
      var open = _ref.open;
          _ref.wider;
          var children = _ref.children,
          PopoverProps = _ref.PopoverProps;
          _ref.onClear;
          var onDismiss = _ref.onDismiss;
          _ref.onSetToday;
          var onAccept = _ref.onAccept;
          _ref.showTabs;
          var DateInputProps = _ref.DateInputProps,
          InputComponent = _ref.InputComponent,
          other = _objectWithoutProperties(_ref, ["open", "wider", "children", "PopoverProps", "onClear", "onDismiss", "onSetToday", "onAccept", "showTabs", "DateInputProps", "InputComponent"]);

      var ref = React.useRef();
      useKeyDown(open, {
        Enter: onAccept
      });
      return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$3({}, other, DateInputProps, {
        inputRef: ref
      })), React.createElement(Popover$1, _extends$3({
        open: open,
        onClose: onDismiss,
        anchorEl: ref.current,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'center'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'center'
        },
        children: children
      }, PopoverProps)));
    };
    process.env.NODE_ENV !== "production" ? InlineWrapper.propTypes = {
      onOpen: propTypes.func,
      onClose: propTypes.func,
      PopoverProps: propTypes.object
    } : void 0;

    function getWrapperFromVariant(variant) {
      switch (variant) {
        case 'inline':
          return InlineWrapper;

        case 'static':
          return StaticWrapper;

        default:
          return ModalWrapper;
      }
    }
    var VariantContext = React.createContext(null);
    var Wrapper = function Wrapper(_ref) {
      var variant = _ref.variant,
          props = _objectWithoutProperties(_ref, ["variant"]);

      var Component = getWrapperFromVariant(variant);
      return React.createElement(VariantContext.Provider, {
        value: variant || 'dialog'
      }, React.createElement(Component, props));
    };

    var Rifm =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose$1(Rifm, _React$Component);

      function Rifm(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this._state = null;
        _this._del = false;

        _this._handleChange = function (evt) {
          if (process.env.NODE_ENV !== 'production') {
            if (evt.target.type === 'number') {
              console.error('Rifm does not support input type=number, use type=tel instead.');
              return;
            }
          } // FUTURE: use evt.nativeEvent.inputType for del event, see comments at onkeydown


          var stateValue = _this.state.value;
          var value = evt.target.value;
          var input = evt.target;
          var op = value.length > stateValue.length;
          var del = _this._del;

          var noOp = stateValue === _this.props.format(value);

          _this.setState({
            value: value,
            local: true
          }, function () {
            var selectionStart = input.selectionStart;
            var refuse = _this.props.refuse || /[^\d]+/g;
            var before = value.substr(0, selectionStart).replace(refuse, '');
            _this._state = {
              input: input,
              before: before,
              op: op,
              di: del && noOp,
              del: del
            };

            if (_this.props.replace && _this.props.replace(stateValue) && op && !noOp) {
              var start = -1;

              for (var i = 0; i !== before.length; ++i) {
                start = Math.max(start, value.toLowerCase().indexOf(before[i].toLowerCase(), start + 1));
              }

              var c = value.substr(start + 1).replace(refuse, '')[0];
              start = value.indexOf(c, start + 1);
              value = "" + value.substr(0, start) + value.substr(start + 1);
            }

            var fv = _this.props.format(value);

            if (stateValue === fv) {
              _this.setState({
                value: value
              });
            } else {
              _this.props.onChange(fv);
            }
          });
        };

        _this._hKD = function (evt) {
          if (evt.code === 'Delete') {
            _this._del = true;
          }
        };

        _this._hKU = function (evt) {
          if (evt.code === 'Delete') {
            _this._del = false;
          }
        };

        _this.state = {
          value: props.value,
          local: true
        };
        return _this;
      }

      Rifm.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        return {
          value: state.local ? state.value : props.value,
          local: false
        };
      };

      var _proto = Rifm.prototype;

      _proto.render = function render() {
        var _handleChange = this._handleChange,
            value = this.state.value,
            children = this.props.children;
        return children({
          value: value,
          onChange: _handleChange
        });
      } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
      ;

      _proto.componentWillUnmount = function componentWillUnmount() {
        document.removeEventListener('keydown', this._hKD);
        document.removeEventListener('keyup', this._hKU);
      } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
      ;

      _proto.componentDidMount = function componentDidMount() {
        document.addEventListener('keydown', this._hKD);
        document.addEventListener('keyup', this._hKU);
      };

      _proto.componentDidUpdate = function componentDidUpdate() {
        var _state = this._state;

        if (_state) {
          var value = this.state.value;
          var start = -1;

          for (var i = 0; i !== _state.before.length; ++i) {
            start = Math.max(start, value.toLowerCase().indexOf(_state.before[i].toLowerCase(), start + 1));
          } // format usually looks better without this


          if (this.props.replace && (_state.op || _state.del && !_state.di)) {
            while (value[start + 1] && (this.props.refuse || /[^\d]+/).test(value[start + 1])) {
              start += 1;
            }
          }

          _state.input.selectionStart = _state.input.selectionEnd = start + 1 + (_state.di ? 1 : 0);
        }

        this._state = null;
      };

      return Rifm;
    }(React.Component);

    var useStyles$e = makeStyles(function (theme) {
      return {
        day: {
          width: 36,
          height: 36,
          fontSize: theme.typography.caption.fontSize,
          margin: '0 2px',
          color: theme.palette.text.primary,
          fontWeight: theme.typography.fontWeightMedium,
          padding: 0
        },
        hidden: {
          opacity: 0,
          pointerEvents: 'none'
        },
        current: {
          color: theme.palette.primary.main,
          fontWeight: 600
        },
        daySelected: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          fontWeight: theme.typography.fontWeightMedium,
          '&:hover': {
            backgroundColor: theme.palette.primary.main
          }
        },
        dayDisabled: {
          pointerEvents: 'none',
          color: theme.palette.text.hint
        }
      };
    }, {
      name: 'MuiPickersDay'
    });
    var Day = function Day(_ref) {
      var children = _ref.children,
          disabled = _ref.disabled,
          hidden = _ref.hidden,
          current = _ref.current,
          selected = _ref.selected,
          other = _objectWithoutProperties(_ref, ["children", "disabled", "hidden", "current", "selected"]);

      var classes = useStyles$e();
      var className = clsx(classes.day, hidden && classes.hidden, current && classes.current, selected && classes.daySelected, disabled && classes.dayDisabled);
      return React.createElement(IconButton$1, _extends$3({
        className: className,
        tabIndex: hidden || disabled ? -1 : 0
      }, other), React.createElement(Typography$1, {
        variant: "body2",
        color: "inherit"
      }, children));
    };
    Day.displayName = 'Day';
    process.env.NODE_ENV !== "production" ? Day.propTypes = {
      current: propTypes.bool,
      disabled: propTypes.bool,
      hidden: propTypes.bool,
      selected: propTypes.bool
    } : void 0;
    Day.defaultProps = {
      disabled: false,
      hidden: false,
      current: false,
      selected: false
    };

    var findClosestEnabledDate = function findClosestEnabledDate(_ref) {
      var date = _ref.date,
          utils = _ref.utils,
          minDate = _ref.minDate,
          maxDate = _ref.maxDate,
          disableFuture = _ref.disableFuture,
          disablePast = _ref.disablePast,
          shouldDisableDate = _ref.shouldDisableDate;
      var today = utils.startOfDay(utils.date());

      if (disablePast && utils.isBefore(minDate, today)) {
        minDate = today;
      }

      if (disableFuture && utils.isAfter(maxDate, today)) {
        maxDate = today;
      }

      var forward = date;
      var backward = date;

      if (utils.isBefore(date, minDate)) {
        forward = utils.date(minDate);
        backward = null;
      }

      if (utils.isAfter(date, maxDate)) {
        if (backward) {
          backward = utils.date(maxDate);
        }

        forward = null;
      }

      while (forward || backward) {
        if (forward && utils.isAfter(forward, maxDate)) {
          forward = null;
        }

        if (backward && utils.isBefore(backward, minDate)) {
          backward = null;
        }

        if (forward) {
          if (!shouldDisableDate(forward)) {
            return forward;
          }

          forward = utils.addDays(forward, 1);
        }

        if (backward) {
          if (!shouldDisableDate(backward)) {
            return backward;
          }

          backward = utils.addDays(backward, -1);
        }
      } // fallback to today if no enabled days


      return utils.date();
    };
    var isYearOnlyView = function isYearOnlyView(views) {
      return views.length === 1 && views[0] === 'year';
    };
    var isYearAndMonthViews = function isYearAndMonthViews(views) {
      return views.length === 2 && arrayIncludes(views, 'month') && arrayIncludes(views, 'year');
    };
    var getFormatByViews = function getFormatByViews(views, utils) {
      if (isYearOnlyView(views)) {
        return utils.yearFormat;
      }

      if (isYearAndMonthViews(views)) {
        return utils.yearMonthFormat;
      }

      return utils.dateFormat;
    };

    var DayWrapper = function DayWrapper(_ref) {
      var children = _ref.children,
          value = _ref.value,
          disabled = _ref.disabled,
          onSelect = _ref.onSelect,
          dayInCurrentMonth = _ref.dayInCurrentMonth,
          other = _objectWithoutProperties(_ref, ["children", "value", "disabled", "onSelect", "dayInCurrentMonth"]);

      var handleClick = React.useCallback(function () {
        return onSelect(value);
      }, [onSelect, value]);
      return React.createElement("div", _extends$3({
        role: "presentation",
        onClick: dayInCurrentMonth && !disabled ? handleClick : undefined,
        onKeyPress: dayInCurrentMonth && !disabled ? handleClick : undefined
      }, other), children);
    };

    var animationDuration = 350;
    var useStyles$d = makeStyles(function (theme) {
      var slideTransition = theme.transitions.create('transform', {
        duration: animationDuration,
        easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)'
      });
      return {
        transitionContainer: {
          display: 'block',
          position: 'relative',
          '& > *': {
            position: 'absolute',
            top: 0,
            right: 0,
            left: 0
          }
        },
        'slideEnter-left': {
          willChange: 'transform',
          transform: 'translate(100%)'
        },
        'slideEnter-right': {
          willChange: 'transform',
          transform: 'translate(-100%)'
        },
        slideEnterActive: {
          transform: 'translate(0%)',
          transition: slideTransition
        },
        slideExit: {
          transform: 'translate(0%)'
        },
        'slideExitActiveLeft-left': {
          willChange: 'transform',
          transform: 'translate(-200%)',
          transition: slideTransition
        },
        'slideExitActiveLeft-right': {
          willChange: 'transform',
          transform: 'translate(200%)',
          transition: slideTransition
        }
      };
    }, {
      name: 'MuiPickersSlideTransition'
    });

    var SlideTransition = function SlideTransition(_ref) {
      var children = _ref.children,
          transKey = _ref.transKey,
          slideDirection = _ref.slideDirection,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? null : _ref$className;
      var classes = useStyles$d();
      var transitionClasses = {
        exit: classes.slideExit,
        enterActive: classes.slideEnterActive,
        // @ts-ignore
        enter: classes['slideEnter-' + slideDirection],
        // @ts-ignore
        exitActive: classes['slideExitActiveLeft-' + slideDirection]
      };
      return React.createElement(TransitionGroup, {
        className: clsx(classes.transitionContainer, className),
        childFactory: function childFactory(element) {
          return React.cloneElement(element, {
            classNames: transitionClasses
          });
        }
      }, React.createElement(CSSTransition, {
        mountOnEnter: true,
        unmountOnExit: true,
        key: transKey + slideDirection,
        timeout: animationDuration,
        classNames: transitionClasses,
        children: children
      }));
    };

    var ArrowLeftIcon$1 = function ArrowLeftIcon(props) {
      return React__default['default'].createElement(SvgIcon$2, props, React__default['default'].createElement("path", {
        d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
      }), React__default['default'].createElement("path", {
        fill: "none",
        d: "M0 0h24v24H0V0z"
      }));
    };

    var ArrowRightIcon$1 = function ArrowRightIcon(props) {
      return React__default['default'].createElement(SvgIcon$2, props, React__default['default'].createElement("path", {
        d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
      }), React__default['default'].createElement("path", {
        fill: "none",
        d: "M0 0h24v24H0V0z"
      }));
    };

    var useStyles$1$3 = makeStyles(function (theme) {
      return {
        switchHeader: {
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginTop: theme.spacing(0.5),
          marginBottom: theme.spacing(1)
        },
        transitionContainer: {
          width: '100%',
          overflow: 'hidden',
          height: 23
        },
        iconButton: {
          zIndex: 1,
          backgroundColor: theme.palette.background.paper
        },
        daysHeader: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          maxHeight: 16
        },
        dayLabel: {
          width: 36,
          margin: '0 2px',
          textAlign: 'center',
          color: theme.palette.text.hint
        }
      };
    }, {
      name: 'MuiPickersCalendarHeader'
    });
    var CalendarHeader = function CalendarHeader(_ref) {
      var currentMonth = _ref.currentMonth,
          onMonthChange = _ref.onMonthChange,
          leftArrowIcon = _ref.leftArrowIcon,
          rightArrowIcon = _ref.rightArrowIcon,
          leftArrowButtonProps = _ref.leftArrowButtonProps,
          rightArrowButtonProps = _ref.rightArrowButtonProps,
          disablePrevMonth = _ref.disablePrevMonth,
          disableNextMonth = _ref.disableNextMonth,
          slideDirection = _ref.slideDirection;
      var utils = useUtils();
      var classes = useStyles$1$3();
      var theme = useTheme();
      var rtl = theme.direction === 'rtl';

      var selectNextMonth = function selectNextMonth() {
        return onMonthChange(utils.getNextMonth(currentMonth), 'left');
      };

      var selectPreviousMonth = function selectPreviousMonth() {
        return onMonthChange(utils.getPreviousMonth(currentMonth), 'right');
      };

      return React.createElement("div", null, React.createElement("div", {
        className: classes.switchHeader
      }, React.createElement(IconButton$1, _extends$3({}, leftArrowButtonProps, {
        disabled: disablePrevMonth,
        onClick: selectPreviousMonth,
        className: classes.iconButton
      }), rtl ? rightArrowIcon : leftArrowIcon), React.createElement(SlideTransition, {
        slideDirection: slideDirection,
        transKey: currentMonth.toString(),
        className: classes.transitionContainer
      }, React.createElement(Typography$1, {
        align: "center",
        variant: "body1"
      }, utils.getCalendarHeaderText(currentMonth))), React.createElement(IconButton$1, _extends$3({}, rightArrowButtonProps, {
        disabled: disableNextMonth,
        onClick: selectNextMonth,
        className: classes.iconButton
      }), rtl ? leftArrowIcon : rightArrowIcon)), React.createElement("div", {
        className: classes.daysHeader
      }, utils.getWeekdays().map(function (day, index) {
        return React.createElement(Typography$1, {
          key: index // eslint-disable-line react/no-array-index-key
          ,
          variant: "caption",
          className: classes.dayLabel
        }, day);
      })));
    };
    CalendarHeader.displayName = 'CalendarHeader';
    process.env.NODE_ENV !== "production" ? CalendarHeader.propTypes = {
      leftArrowIcon: propTypes.node,
      rightArrowIcon: propTypes.node,
      disablePrevMonth: propTypes.bool,
      disableNextMonth: propTypes.bool
    } : void 0;
    CalendarHeader.defaultProps = {
      leftArrowIcon: React.createElement(ArrowLeftIcon$1, null),
      rightArrowIcon: React.createElement(ArrowRightIcon$1, null),
      disablePrevMonth: false,
      disableNextMonth: false
    };

    var withUtils = function withUtils() {
      return function (Component) {
        var WithUtils = function WithUtils(props) {
          var utils = useUtils();
          return React.createElement(Component, _extends$3({
            utils: utils
          }, props));
        };

        WithUtils.displayName = "WithUtils(".concat(Component.displayName || Component.name, ")");
        return WithUtils;
      };
    };

    var KeyDownListener = function KeyDownListener(_ref) {
      var onKeyDown = _ref.onKeyDown;
      React.useEffect(function () {
        window.addEventListener('keydown', onKeyDown);
        return function () {
          window.removeEventListener('keydown', onKeyDown);
        };
      }, [onKeyDown]);
      return null;
    };

    var Calendar =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(Calendar, _React$Component);

      function Calendar() {
        var _getPrototypeOf2;

        var _this;

        _classCallCheck(this, Calendar);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          slideDirection: 'left',
          currentMonth: _this.props.utils.startOfMonth(_this.props.date),
          loadingQueue: 0
        };

        _this.pushToLoadingQueue = function () {
          var loadingQueue = _this.state.loadingQueue + 1;

          _this.setState({
            loadingQueue: loadingQueue
          });
        };

        _this.popFromLoadingQueue = function () {
          var loadingQueue = _this.state.loadingQueue;
          loadingQueue = loadingQueue <= 0 ? 0 : loadingQueue - 1;

          _this.setState({
            loadingQueue: loadingQueue
          });
        };

        _this.handleChangeMonth = function (newMonth, slideDirection) {
          _this.setState({
            currentMonth: newMonth,
            slideDirection: slideDirection
          });

          if (_this.props.onMonthChange) {
            var returnVal = _this.props.onMonthChange(newMonth);

            if (returnVal) {
              _this.pushToLoadingQueue();

              returnVal.then(function () {
                _this.popFromLoadingQueue();
              });
            }
          }
        };

        _this.validateMinMaxDate = function (day) {
          var _this$props = _this.props,
              minDate = _this$props.minDate,
              maxDate = _this$props.maxDate,
              utils = _this$props.utils,
              disableFuture = _this$props.disableFuture,
              disablePast = _this$props.disablePast;
          var now = utils.date();
          return Boolean(disableFuture && utils.isAfterDay(day, now) || disablePast && utils.isBeforeDay(day, now) || minDate && utils.isBeforeDay(day, utils.date(minDate)) || maxDate && utils.isAfterDay(day, utils.date(maxDate)));
        };

        _this.shouldDisablePrevMonth = function () {
          var _this$props2 = _this.props,
              utils = _this$props2.utils,
              disablePast = _this$props2.disablePast,
              minDate = _this$props2.minDate;
          var now = utils.date();
          var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utils.date(minDate)) ? now : utils.date(minDate));
          return !utils.isBefore(firstEnabledMonth, _this.state.currentMonth);
        };

        _this.shouldDisableNextMonth = function () {
          var _this$props3 = _this.props,
              utils = _this$props3.utils,
              disableFuture = _this$props3.disableFuture,
              maxDate = _this$props3.maxDate;
          var now = utils.date();
          var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utils.date(maxDate)) ? now : utils.date(maxDate));
          return !utils.isAfter(lastEnabledMonth, _this.state.currentMonth);
        };

        _this.shouldDisableDate = function (day) {
          var shouldDisableDate = _this.props.shouldDisableDate;
          return _this.validateMinMaxDate(day) || Boolean(shouldDisableDate && shouldDisableDate(day));
        };

        _this.handleDaySelect = function (day) {
          var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          var _this$props4 = _this.props,
              date = _this$props4.date,
              utils = _this$props4.utils;

          _this.props.onChange(utils.mergeDateAndTime(day, date), isFinish);
        };

        _this.moveToDay = function (day) {
          var utils = _this.props.utils;

          if (day && !_this.shouldDisableDate(day)) {
            if (utils.getMonth(day) !== utils.getMonth(_this.state.currentMonth)) {
              _this.handleChangeMonth(utils.startOfMonth(day), 'left');
            }

            _this.handleDaySelect(day, false);
          }
        };

        _this.handleKeyDown = function (event) {
          var _this$props5 = _this.props,
              theme = _this$props5.theme,
              date = _this$props5.date,
              utils = _this$props5.utils;
          runKeyHandler(event, {
            ArrowUp: function ArrowUp() {
              return _this.moveToDay(utils.addDays(date, -7));
            },
            ArrowDown: function ArrowDown() {
              return _this.moveToDay(utils.addDays(date, 7));
            },
            ArrowLeft: function ArrowLeft() {
              return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? -1 : 1));
            },
            ArrowRight: function ArrowRight() {
              return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? 1 : -1));
            }
          });
        };

        _this.renderWeeks = function () {
          var _this$props6 = _this.props,
              utils = _this$props6.utils,
              classes = _this$props6.classes;
          var weeks = utils.getWeekArray(_this.state.currentMonth);
          return weeks.map(function (week) {
            return React.createElement("div", {
              key: "week-".concat(week[0].toString()),
              className: classes.week
            }, _this.renderDays(week));
          });
        };

        _this.renderDays = function (week) {
          var _this$props7 = _this.props,
              date = _this$props7.date,
              renderDay = _this$props7.renderDay,
              utils = _this$props7.utils;
          var now = utils.date();
          var selectedDate = utils.startOfDay(date);
          var currentMonthNumber = utils.getMonth(_this.state.currentMonth);
          return week.map(function (day) {
            var disabled = _this.shouldDisableDate(day);

            var isDayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;
            var dayComponent = React.createElement(Day, {
              disabled: disabled,
              current: utils.isSameDay(day, now),
              hidden: !isDayInCurrentMonth,
              selected: utils.isSameDay(selectedDate, day)
            }, utils.getDayText(day));

            if (renderDay) {
              dayComponent = renderDay(day, selectedDate, isDayInCurrentMonth, dayComponent);
            }

            return React.createElement(DayWrapper, {
              value: day,
              key: day.toString(),
              disabled: disabled,
              dayInCurrentMonth: isDayInCurrentMonth,
              onSelect: _this.handleDaySelect
            }, dayComponent);
          });
        };

        return _this;
      }

      _createClass(Calendar, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props8 = this.props,
              date = _this$props8.date,
              minDate = _this$props8.minDate,
              maxDate = _this$props8.maxDate,
              utils = _this$props8.utils,
              disablePast = _this$props8.disablePast,
              disableFuture = _this$props8.disableFuture;

          if (this.shouldDisableDate(date)) {
            var closestEnabledDate = findClosestEnabledDate({
              date: date,
              utils: utils,
              minDate: utils.date(minDate),
              maxDate: utils.date(maxDate),
              disablePast: Boolean(disablePast),
              disableFuture: Boolean(disableFuture),
              shouldDisableDate: this.shouldDisableDate
            });
            this.handleDaySelect(closestEnabledDate, false);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$state = this.state,
              currentMonth = _this$state.currentMonth,
              slideDirection = _this$state.slideDirection;
          var _this$props9 = this.props,
              classes = _this$props9.classes,
              allowKeyboardControl = _this$props9.allowKeyboardControl,
              leftArrowButtonProps = _this$props9.leftArrowButtonProps,
              leftArrowIcon = _this$props9.leftArrowIcon,
              rightArrowButtonProps = _this$props9.rightArrowButtonProps,
              rightArrowIcon = _this$props9.rightArrowIcon,
              loadingIndicator = _this$props9.loadingIndicator;
          var loadingElement = loadingIndicator ? loadingIndicator : React.createElement(CircularProgress$1, null);
          return React.createElement(React.Fragment, null, allowKeyboardControl && this.context !== 'static' && React.createElement(KeyDownListener, {
            onKeyDown: this.handleKeyDown
          }), React.createElement(CalendarHeader, {
            currentMonth: currentMonth,
            slideDirection: slideDirection,
            onMonthChange: this.handleChangeMonth,
            leftArrowIcon: leftArrowIcon,
            leftArrowButtonProps: leftArrowButtonProps,
            rightArrowIcon: rightArrowIcon,
            rightArrowButtonProps: rightArrowButtonProps,
            disablePrevMonth: this.shouldDisablePrevMonth(),
            disableNextMonth: this.shouldDisableNextMonth()
          }), React.createElement(SlideTransition, {
            slideDirection: slideDirection,
            transKey: currentMonth.toString(),
            className: classes.transitionContainer
          }, React.createElement(React.Fragment, null, this.state.loadingQueue > 0 && React.createElement("div", {
            className: classes.progressContainer
          }, loadingElement) || React.createElement("div", null, this.renderWeeks()))));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, state) {
          var utils = nextProps.utils,
              nextDate = nextProps.date;

          if (!utils.isEqual(nextDate, state.lastDate)) {
            var nextMonth = utils.getMonth(nextDate);
            var lastDate = state.lastDate || nextDate;
            var lastMonth = utils.getMonth(lastDate);
            return {
              lastDate: nextDate,
              currentMonth: nextProps.utils.startOfMonth(nextDate),
              // prettier-ignore
              slideDirection: nextMonth === lastMonth ? state.slideDirection : utils.isAfterDay(nextDate, lastDate) ? 'left' : 'right'
            };
          }

          return null;
        }
      }]);

      return Calendar;
    }(React.Component);
    Calendar.contextType = VariantContext;
    process.env.NODE_ENV !== "production" ? Calendar.propTypes = {
      renderDay: propTypes.func,
      shouldDisableDate: propTypes.func,
      allowKeyboardControl: propTypes.bool
    } : void 0;
    Calendar.defaultProps = {
      minDate: new Date('1900-01-01'),
      maxDate: new Date('2100-01-01'),
      disablePast: false,
      disableFuture: false,
      allowKeyboardControl: true
    };
    var styles$2 = function styles(theme) {
      return {
        transitionContainer: {
          minHeight: 36 * 6,
          marginTop: theme.spacing(1.5)
        },
        progressContainer: {
          width: '100%',
          height: '100%',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center'
        },
        week: {
          display: 'flex',
          justifyContent: 'center'
        }
      };
    };
    var Calendar$1 = withStyles(styles$2, {
      name: 'MuiPickersCalendar',
      withTheme: true
    })(withUtils()(Calendar));

    var ClockType;

    (function (ClockType) {
      ClockType["HOURS"] = "hours";
      ClockType["MINUTES"] = "minutes";
      ClockType["SECONDS"] = "seconds";
    })(ClockType || (ClockType = {}));

    var ClockType$1 = ClockType;

    var ClockPointer =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(ClockPointer, _React$Component);

      function ClockPointer() {
        var _getPrototypeOf2;

        var _this;

        _classCallCheck(this, ClockPointer);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClockPointer)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          toAnimateTransform: false,
          previousType: undefined
        };

        _this.getAngleStyle = function () {
          var _this$props = _this.props,
              value = _this$props.value,
              isInner = _this$props.isInner,
              type = _this$props.type;
          var max = type === ClockType$1.HOURS ? 12 : 60;
          var angle = 360 / max * value;

          if (type === ClockType$1.HOURS && value > 12) {
            angle -= 360; // round up angle to max 360 degrees
          }

          return {
            height: isInner ? '26%' : '40%',
            transform: "rotateZ(".concat(angle, "deg)")
          };
        };

        return _this;
      }

      _createClass(ClockPointer, [{
        key: "render",
        value: function render() {
          var _this$props2 = this.props,
              classes = _this$props2.classes,
              hasSelected = _this$props2.hasSelected;
          return React.createElement("div", {
            style: this.getAngleStyle(),
            className: clsx(classes.pointer, this.state.toAnimateTransform && classes.animateTransform)
          }, React.createElement("div", {
            className: clsx(classes.thumb, hasSelected && classes.noPoint)
          }));
        }
      }]);

      return ClockPointer;
    }(React.Component);

    ClockPointer.getDerivedStateFromProps = function (nextProps, state) {
      if (nextProps.type !== state.previousType) {
        return {
          toAnimateTransform: true,
          previousType: nextProps.type
        };
      }

      return {
        toAnimateTransform: false,
        previousType: nextProps.type
      };
    };

    var styles$1 = function styles(theme) {
      return createStyles({
        pointer: {
          width: 2,
          backgroundColor: theme.palette.primary.main,
          position: 'absolute',
          left: 'calc(50% - 1px)',
          bottom: '50%',
          transformOrigin: 'center bottom 0px'
        },
        animateTransform: {
          transition: theme.transitions.create(['transform', 'height'])
        },
        thumb: {
          width: 4,
          height: 4,
          backgroundColor: theme.palette.primary.contrastText,
          borderRadius: '100%',
          position: 'absolute',
          top: -21,
          left: -15,
          border: "14px solid ".concat(theme.palette.primary.main),
          boxSizing: 'content-box'
        },
        noPoint: {
          backgroundColor: theme.palette.primary.main
        }
      });
    };
    var ClockPointer$1 = withStyles(styles$1, {
      name: 'MuiPickersClockPointer'
    })(ClockPointer);

    var center = {
      x: 260 / 2,
      y: 260 / 2
    };
    var basePoint = {
      x: center.x,
      y: 0
    };
    var cx = basePoint.x - center.x;
    var cy = basePoint.y - center.y;

    var rad2deg = function rad2deg(rad) {
      return rad * 57.29577951308232;
    };

    var getAngleValue = function getAngleValue(step, offsetX, offsetY) {
      var x = offsetX - center.x;
      var y = offsetY - center.y;
      var atan = Math.atan2(cx, cy) - Math.atan2(x, y);
      var deg = rad2deg(atan);
      deg = Math.round(deg / step) * step;
      deg %= 360;
      var value = Math.floor(deg / step) || 0;
      var delta = Math.pow(x, 2) + Math.pow(y, 2);
      var distance = Math.sqrt(delta);
      return {
        value: value,
        distance: distance
      };
    };

    var getHours = function getHours(offsetX, offsetY, ampm) {
      var _getAngleValue = getAngleValue(30, offsetX, offsetY),
          value = _getAngleValue.value,
          distance = _getAngleValue.distance;

      value = value || 12;

      if (!ampm) {
        if (distance < 90) {
          value += 12;
          value %= 24;
        }
      } else {
        value %= 12;
      }

      return value;
    };
    var getMinutes = function getMinutes(offsetX, offsetY) {
      var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var angleStep = step * 6;

      var _getAngleValue2 = getAngleValue(angleStep, offsetX, offsetY),
          value = _getAngleValue2.value;

      value = value * step % 60;
      return value;
    };
    var getMeridiem = function getMeridiem(date, utils) {
      return utils.getHours(date) >= 12 ? 'pm' : 'am';
    };
    var convertToMeridiem = function convertToMeridiem(time, meridiem, ampm, utils) {
      if (ampm) {
        var currentMeridiem = utils.getHours(time) >= 12 ? 'pm' : 'am';

        if (currentMeridiem !== meridiem) {
          var hours = meridiem === 'am' ? utils.getHours(time) - 12 : utils.getHours(time) + 12;
          return utils.setHours(time, hours);
        }
      }

      return time;
    };

    var Clock =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(Clock, _React$Component);

      function Clock() {
        var _getPrototypeOf2;

        var _this;

        _classCallCheck(this, Clock);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Clock)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.isMoving = false;

        _this.handleTouchMove = function (e) {
          _this.isMoving = true;

          _this.setTime(e);
        };

        _this.handleTouchEnd = function (e) {
          if (_this.isMoving) {
            _this.setTime(e, true);

            _this.isMoving = false;
          }
        };

        _this.handleMove = function (e) {
          e.preventDefault();
          e.stopPropagation(); // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari

          var isButtonPressed = typeof e.buttons === 'undefined' ? e.nativeEvent.which === 1 : e.buttons === 1;

          if (isButtonPressed) {
            _this.setTime(e.nativeEvent, false);
          }
        };

        _this.handleMouseUp = function (e) {
          if (_this.isMoving) {
            _this.isMoving = false;
          }

          _this.setTime(e.nativeEvent, true);
        };

        _this.hasSelected = function () {
          var _this$props = _this.props,
              type = _this$props.type,
              value = _this$props.value;

          if (type === ClockType$1.HOURS) {
            return true;
          }

          return value % 5 === 0;
        };

        return _this;
      }

      _createClass(Clock, [{
        key: "setTime",
        value: function setTime(e) {
          var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var offsetX = e.offsetX,
              offsetY = e.offsetY;

          if (typeof offsetX === 'undefined') {
            var rect = e.target.getBoundingClientRect();
            offsetX = e.changedTouches[0].clientX - rect.left;
            offsetY = e.changedTouches[0].clientY - rect.top;
          }

          var value = this.props.type === ClockType$1.SECONDS || this.props.type === ClockType$1.MINUTES ? getMinutes(offsetX, offsetY, this.props.minutesStep) : getHours(offsetX, offsetY, Boolean(this.props.ampm));
          this.props.onChange(value, isFinish);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props,
              classes = _this$props2.classes,
              value = _this$props2.value,
              children = _this$props2.children,
              type = _this$props2.type,
              ampm = _this$props2.ampm;
          var isPointerInner = !ampm && type === ClockType$1.HOURS && (value < 1 || value > 12);
          return React.createElement("div", {
            className: classes.container
          }, React.createElement("div", {
            className: classes.clock
          }, React.createElement("div", {
            role: "menu",
            tabIndex: -1,
            className: classes.squareMask,
            onTouchMove: this.handleTouchMove,
            onTouchEnd: this.handleTouchEnd,
            onMouseUp: this.handleMouseUp,
            onMouseMove: this.handleMove
          }), React.createElement("div", {
            className: classes.pin
          }), React.createElement(ClockPointer$1, {
            type: type,
            value: value,
            isInner: isPointerInner,
            hasSelected: this.hasSelected()
          }), children));
        }
      }]);

      return Clock;
    }(React.Component);
    process.env.NODE_ENV !== "production" ? Clock.propTypes = {
      type: propTypes.oneOf(Object.keys(ClockType$1).map(function (key) {
        return ClockType$1[key];
      })).isRequired,
      value: propTypes.number.isRequired,
      onChange: propTypes.func.isRequired,
      children: propTypes.arrayOf(propTypes.node).isRequired,
      ampm: propTypes.bool,
      minutesStep: propTypes.number,
      innerRef: propTypes.any
    } : void 0;
    Clock.defaultProps = {
      ampm: false,
      minutesStep: 1
    };
    var styles$1$1 = function styles(theme) {
      return createStyles({
        container: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'flex-end',
          margin: "".concat(theme.spacing(2), "px 0 ").concat(theme.spacing(1), "px")
        },
        clock: {
          backgroundColor: 'rgba(0,0,0,.07)',
          borderRadius: '50%',
          height: 260,
          width: 260,
          position: 'relative',
          pointerEvents: 'none'
        },
        squareMask: {
          width: '100%',
          height: '100%',
          position: 'absolute',
          pointerEvents: 'auto',
          outline: 'none',
          touchActions: 'none',
          userSelect: 'none',
          '&:active': {
            cursor: 'move'
          }
        },
        pin: {
          width: 6,
          height: 6,
          borderRadius: '50%',
          backgroundColor: theme.palette.primary.main,
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)'
        }
      });
    };
    var Clock$1 = withStyles(styles$1$1, {
      name: 'MuiPickersClock'
    })(Clock);

    var positions = {
      0: [0, 40],
      1: [55, 19.6],
      2: [94.4, 59.5],
      3: [109, 114],
      4: [94.4, 168.5],
      5: [54.5, 208.4],
      6: [0, 223],
      7: [-54.5, 208.4],
      8: [-94.4, 168.5],
      9: [-109, 114],
      10: [-94.4, 59.5],
      11: [-54.5, 19.6],
      12: [0, 5],
      13: [36.9, 49.9],
      14: [64, 77],
      15: [74, 114],
      16: [64, 151],
      17: [37, 178],
      18: [0, 188],
      19: [-37, 178],
      20: [-64, 151],
      21: [-74, 114],
      22: [-64, 77],
      23: [-37, 50]
    };
    var useStyles$c = makeStyles(function (theme) {
      var size = theme.spacing(4);
      return {
        clockNumber: {
          width: size,
          height: 32,
          userSelect: 'none',
          position: 'absolute',
          left: "calc((100% - ".concat(typeof size === 'number' ? "".concat(size, "px") : size, ") / 2)"),
          display: 'inline-flex',
          justifyContent: 'center',
          alignItems: 'center',
          borderRadius: '50%',
          color: theme.palette.type === 'light' ? theme.palette.text.primary : theme.palette.text.hint
        },
        clockNumberSelected: {
          color: theme.palette.primary.contrastText
        }
      };
    }, {
      name: 'MuiPickersClockNumber'
    });
    var ClockNumber = function ClockNumber(_ref) {
      var selected = _ref.selected,
          label = _ref.label,
          index = _ref.index,
          isInner = _ref.isInner;
      var classes = useStyles$c();
      var className = clsx(classes.clockNumber, selected && classes.clockNumberSelected);
      var transformStyle = React.useMemo(function () {
        var position = positions[index];
        return {
          transform: "translate(".concat(position[0], "px, ").concat(position[1], "px")
        };
      }, [index]);
      return React.createElement(Typography$1, {
        component: "span",
        className: className,
        variant: isInner ? 'body2' : 'body1',
        style: transformStyle,
        children: label
      });
    };

    var getHourNumbers = function getHourNumbers(_ref) {
      var ampm = _ref.ampm,
          utils = _ref.utils,
          date = _ref.date;
      var currentHours = utils.getHours(date);
      var hourNumbers = [];
      var startHour = ampm ? 1 : 0;
      var endHour = ampm ? 12 : 23;

      var isSelected = function isSelected(hour) {
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }

          return currentHours === hour || currentHours - 12 === hour;
        }

        return currentHours === hour;
      };

      for (var hour = startHour; hour <= endHour; hour += 1) {
        var label = hour.toString();

        if (hour === 0) {
          label = '00';
        }

        var props = {
          index: hour,
          label: utils.formatNumber(label),
          selected: isSelected(hour),
          isInner: !ampm && (hour === 0 || hour > 12)
        };
        hourNumbers.push(React.createElement(ClockNumber, _extends$3({
          key: hour
        }, props)));
      }

      return hourNumbers;
    };
    var getMinutesNumbers = function getMinutesNumbers(_ref2) {
      var value = _ref2.value,
          utils = _ref2.utils;
      var f = utils.formatNumber;
      return [React.createElement(ClockNumber, {
        label: f('00'),
        selected: value === 0,
        index: 12,
        key: 12
      }), React.createElement(ClockNumber, {
        label: f('05'),
        selected: value === 5,
        index: 1,
        key: 1
      }), React.createElement(ClockNumber, {
        label: f('10'),
        selected: value === 10,
        index: 2,
        key: 2
      }), React.createElement(ClockNumber, {
        label: f('15'),
        selected: value === 15,
        index: 3,
        key: 3
      }), React.createElement(ClockNumber, {
        label: f('20'),
        selected: value === 20,
        index: 4,
        key: 4
      }), React.createElement(ClockNumber, {
        label: f('25'),
        selected: value === 25,
        index: 5,
        key: 5
      }), React.createElement(ClockNumber, {
        label: f('30'),
        selected: value === 30,
        index: 6,
        key: 6
      }), React.createElement(ClockNumber, {
        label: f('35'),
        selected: value === 35,
        index: 7,
        key: 7
      }), React.createElement(ClockNumber, {
        label: f('40'),
        selected: value === 40,
        index: 8,
        key: 8
      }), React.createElement(ClockNumber, {
        label: f('45'),
        selected: value === 45,
        index: 9,
        key: 9
      }), React.createElement(ClockNumber, {
        label: f('50'),
        selected: value === 50,
        index: 10,
        key: 10
      }), React.createElement(ClockNumber, {
        label: f('55'),
        selected: value === 55,
        index: 11,
        key: 11
      })];
    };

    var ClockView = function ClockView(_ref) {
      var type = _ref.type,
          onHourChange = _ref.onHourChange,
          onMinutesChange = _ref.onMinutesChange,
          onSecondsChange = _ref.onSecondsChange,
          ampm = _ref.ampm,
          date = _ref.date,
          minutesStep = _ref.minutesStep;
      var utils = useUtils();
      var viewProps = React.useMemo(function () {
        switch (type) {
          case ClockType$1.HOURS:
            return {
              value: utils.getHours(date),
              children: getHourNumbers({
                date: date,
                utils: utils,
                ampm: Boolean(ampm)
              }),
              onChange: function onChange(value, isFinish) {
                var currentMeridiem = getMeridiem(date, utils);
                var updatedTimeWithMeridiem = convertToMeridiem(utils.setHours(date, value), currentMeridiem, Boolean(ampm), utils);
                onHourChange(updatedTimeWithMeridiem, isFinish);
              }
            };

          case ClockType$1.MINUTES:
            var minutesValue = utils.getMinutes(date);
            return {
              value: minutesValue,
              children: getMinutesNumbers({
                value: minutesValue,
                utils: utils
              }),
              onChange: function onChange(value, isFinish) {
                var updatedTime = utils.setMinutes(date, value);
                onMinutesChange(updatedTime, isFinish);
              }
            };

          case ClockType$1.SECONDS:
            var secondsValue = utils.getSeconds(date);
            return {
              value: secondsValue,
              children: getMinutesNumbers({
                value: secondsValue,
                utils: utils
              }),
              onChange: function onChange(value, isFinish) {
                var updatedTime = utils.setSeconds(date, value);
                onSecondsChange(updatedTime, isFinish);
              }
            };

          default:
            throw new Error('You must provide the type for TimePickerView');
        }
      }, [ampm, date, onHourChange, onMinutesChange, onSecondsChange, type, utils]);
      return React.createElement(Clock$1, _extends$3({
        type: type,
        ampm: ampm,
        minutesStep: minutesStep
      }, viewProps));
    };
    ClockView.displayName = 'TimePickerView';
    process.env.NODE_ENV !== "production" ? ClockView.propTypes = {
      date: propTypes.object.isRequired,
      onHourChange: propTypes.func.isRequired,
      onMinutesChange: propTypes.func.isRequired,
      onSecondsChange: propTypes.func.isRequired,
      ampm: propTypes.bool,
      minutesStep: propTypes.number,
      type: propTypes.oneOf(Object.keys(ClockType$1).map(function (key) {
        return ClockType$1[key];
      })).isRequired
    } : void 0;
    ClockView.defaultProps = {
      ampm: true,
      minutesStep: 1
    };
    React.memo(ClockView);

    function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.number, propTypes.instanceOf(Date)]);
    propTypes.oneOf(['year', 'month', 'day']);
    /* eslint-disable @typescript-eslint/no-object-literal-type-assertion */

    var timePickerDefaultProps = {
      ampm: true,
      invalidDateMessage: 'Invalid Time Format'
    };
    var datePickerDefaultProps = {
      minDate: new Date('1900-01-01'),
      maxDate: new Date('2100-01-01'),
      invalidDateMessage: 'Invalid Date Format',
      minDateMessage: 'Date should not be before minimal date',
      maxDateMessage: 'Date should not be after maximal date',
      allowKeyboardControl: true
    };
    _objectSpread$3({}, timePickerDefaultProps, {}, datePickerDefaultProps, {
      showTabs: true
    });

    function useViews(views, openTo, onChange) {
      var _React$useState = React.useState(openTo && arrayIncludes(views, openTo) ? openTo : views[0]),
          _React$useState2 = _slicedToArray$1(_React$useState, 2),
          openView = _React$useState2[0],
          setOpenView = _React$useState2[1];

      var handleChangeAndOpenNext = React.useCallback(function (date, isFinish) {
        var nextViewToOpen = views[views.indexOf(openView) + 1];

        if (isFinish && nextViewToOpen) {
          // do not close picker if needs to show next view
          onChange(date, false);
          setOpenView(nextViewToOpen);
          return;
        }

        onChange(date, Boolean(isFinish));
      }, [onChange, openView, views]);
      return {
        handleChangeAndOpenNext: handleChangeAndOpenNext,
        openView: openView,
        setOpenView: setOpenView
      };
    }

    var useStyles$b = makeStyles(function (theme) {
      return {
        root: {
          height: 40,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          outline: 'none',
          '&:focus': {
            color: theme.palette.primary.main,
            fontWeight: theme.typography.fontWeightMedium
          }
        },
        yearSelected: {
          margin: '10px 0',
          fontWeight: theme.typography.fontWeightMedium
        },
        yearDisabled: {
          pointerEvents: 'none',
          color: theme.palette.text.hint
        }
      };
    }, {
      name: 'MuiPickersYear'
    });
    var Year = function Year(_ref) {
      var onSelect = _ref.onSelect,
          forwardedRef = _ref.forwardedRef,
          value = _ref.value,
          selected = _ref.selected,
          disabled = _ref.disabled,
          children = _ref.children,
          other = _objectWithoutProperties(_ref, ["onSelect", "forwardedRef", "value", "selected", "disabled", "children"]);

      var classes = useStyles$b();
      var handleClick = React.useCallback(function () {
        return onSelect(value);
      }, [onSelect, value]);
      return React.createElement(Typography$1, _extends$3({
        role: "button",
        component: "div",
        tabIndex: disabled ? -1 : 0,
        onClick: handleClick,
        onKeyPress: handleClick,
        color: selected ? 'primary' : undefined,
        variant: selected ? 'h5' : 'subtitle1',
        children: children,
        ref: forwardedRef,
        className: clsx(classes.root, selected && classes.yearSelected, disabled && classes.yearDisabled)
      }, other));
    };
    Year.displayName = 'Year';
    var Year$1 = React.forwardRef(function (props, ref) {
      return React.createElement(Year, _extends$3({}, props, {
        forwardedRef: ref
      }));
    });

    var useStyles$1$2 = makeStyles({
      container: {
        height: 300,
        overflowY: 'auto'
      }
    }, {
      name: 'MuiPickersYearSelection'
    });
    var YearSelection = function YearSelection(_ref) {
      var date = _ref.date,
          onChange = _ref.onChange,
          onYearChange = _ref.onYearChange,
          minDate = _ref.minDate,
          maxDate = _ref.maxDate,
          disablePast = _ref.disablePast,
          disableFuture = _ref.disableFuture,
          animateYearScrolling = _ref.animateYearScrolling;
      var utils = useUtils();
      var classes = useStyles$1$2();
      var currentVariant = React.useContext(VariantContext);
      var selectedYearRef = React.useRef(null);
      React.useEffect(function () {
        if (selectedYearRef.current && selectedYearRef.current.scrollIntoView) {
          try {
            selectedYearRef.current.scrollIntoView({
              block: currentVariant === 'static' ? 'nearest' : 'center',
              behavior: animateYearScrolling ? 'smooth' : 'auto'
            });
          } catch (e) {
            // call without arguments in case when scrollIntoView works improperly (e.g. Firefox 52-57)
            selectedYearRef.current.scrollIntoView();
          }
        }
      }, []); // eslint-disable-line

      var currentYear = utils.getYear(date);
      var onYearSelect = React.useCallback(function (year) {
        var newDate = utils.setYear(date, year);

        if (onYearChange) {
          onYearChange(newDate);
        }

        onChange(newDate, true);
      }, [date, onChange, onYearChange, utils]);
      return React.createElement("div", {
        className: classes.container
      }, utils.getYearRange(minDate, maxDate).map(function (year) {
        var yearNumber = utils.getYear(year);
        var selected = yearNumber === currentYear;
        return React.createElement(Year$1, {
          key: utils.getYearText(year),
          selected: selected,
          value: yearNumber,
          onSelect: onYearSelect,
          ref: selected ? selectedYearRef : undefined,
          disabled: Boolean(disablePast && utils.isBeforeYear(year, utils.date()) || disableFuture && utils.isAfterYear(year, utils.date()))
        }, utils.getYearText(year));
      }));
    };

    var useStyles$2$1 = makeStyles(function (theme) {
      return {
        root: {
          flex: '1 0 33.33%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          outline: 'none',
          height: 75,
          transition: theme.transitions.create('font-size', {
            duration: '100ms'
          }),
          '&:focus': {
            color: theme.palette.primary.main,
            fontWeight: theme.typography.fontWeightMedium
          }
        },
        monthSelected: {
          color: theme.palette.primary.main,
          fontWeight: theme.typography.fontWeightMedium
        },
        monthDisabled: {
          pointerEvents: 'none',
          color: theme.palette.text.hint
        }
      };
    }, {
      name: 'MuiPickersMonth'
    });
    var Month = function Month(_ref) {
      var selected = _ref.selected,
          onSelect = _ref.onSelect,
          disabled = _ref.disabled,
          value = _ref.value,
          children = _ref.children,
          other = _objectWithoutProperties(_ref, ["selected", "onSelect", "disabled", "value", "children"]);

      var classes = useStyles$2$1();
      var handleSelection = React.useCallback(function () {
        onSelect(value);
      }, [onSelect, value]);
      return React.createElement(Typography$1, _extends$3({
        role: "button",
        component: "div",
        className: clsx(classes.root, selected && classes.monthSelected, disabled && classes.monthDisabled),
        tabIndex: disabled ? -1 : 0,
        onClick: handleSelection,
        onKeyPress: handleSelection,
        color: selected ? 'primary' : undefined,
        variant: selected ? 'h5' : 'subtitle1',
        children: children
      }, other));
    };
    Month.displayName = 'Month';

    var useStyles$3$1 = makeStyles({
      container: {
        width: 310,
        display: 'flex',
        flexWrap: 'wrap',
        alignContent: 'stretch'
      }
    }, {
      name: 'MuiPickersMonthSelection'
    });
    var MonthSelection = function MonthSelection(_ref) {
      var disablePast = _ref.disablePast,
          disableFuture = _ref.disableFuture,
          minDate = _ref.minDate,
          maxDate = _ref.maxDate,
          date = _ref.date,
          onMonthChange = _ref.onMonthChange,
          onChange = _ref.onChange;
      var utils = useUtils();
      var classes = useStyles$3$1();
      var currentMonth = utils.getMonth(date);

      var shouldDisableMonth = function shouldDisableMonth(month) {
        var now = utils.date();
        var utilMinDate = utils.date(minDate);
        var utilMaxDate = utils.date(maxDate);
        var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utilMinDate) ? now : utilMinDate);
        var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utilMaxDate) ? now : utilMaxDate);
        var isBeforeFirstEnabled = utils.isBefore(month, firstEnabledMonth);
        var isAfterLastEnabled = utils.isAfter(month, lastEnabledMonth);
        return isBeforeFirstEnabled || isAfterLastEnabled;
      };

      var onMonthSelect = React.useCallback(function (month) {
        var newDate = utils.setMonth(date, month);
        onChange(newDate, true);

        if (onMonthChange) {
          onMonthChange(newDate);
        }
      }, [date, onChange, onMonthChange, utils]);
      return React.createElement("div", {
        className: classes.container
      }, utils.getMonthArray(date).map(function (month) {
        var monthNumber = utils.getMonth(month);
        var monthText = utils.format(month, 'MMM');
        return React.createElement(Month, {
          key: monthText,
          value: monthNumber,
          selected: monthNumber === currentMonth,
          onSelect: onMonthSelect,
          disabled: shouldDisableMonth(month)
        }, monthText);
      }));
    };

    var getOrientation = function getOrientation() {
      if (typeof window === 'undefined') {
        return 'portrait';
      }

      if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
        return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
      } // Support IOS safari


      if (window.orientation) {
        return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
      }

      return 'portrait';
    };

    function useIsLandscape(customOrientation) {
      var _React$useState = React.useState(getOrientation()),
          _React$useState2 = _slicedToArray$1(_React$useState, 2),
          orientation = _React$useState2[0],
          setOrientation = _React$useState2[1];

      var eventHandler = React.useCallback(function () {
        return setOrientation(getOrientation());
      }, []);
      useIsomorphicEffect(function () {
        window.addEventListener('orientationchange', eventHandler);
        return function () {
          return window.removeEventListener('orientationchange', eventHandler);
        };
      }, [eventHandler]);
      var orientationToUse = customOrientation || orientation;
      return orientationToUse === 'landscape';
    }

    function ownKeys$1$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$2(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    var viewsMap = {
      year: YearSelection,
      month: MonthSelection,
      date: Calendar$1,
      hours: ClockView,
      minutes: ClockView,
      seconds: ClockView
    };
    var useStyles$4$1 = makeStyles({
      container: {
        display: 'flex',
        flexDirection: 'column'
      },
      containerLandscape: {
        flexDirection: 'row'
      },
      pickerView: {
        overflowX: 'hidden',
        minHeight: VIEW_HEIGHT,
        minWidth: DIALOG_WIDTH,
        maxWidth: DIALOG_WIDTH_WIDER,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center'
      },
      pickerViewLandscape: {
        padding: '0 8px'
      }
    }, {
      name: 'MuiPickersBasePicker'
    });
    var Picker = function Picker(_ref) {
      var date = _ref.date,
          views = _ref.views,
          disableToolbar = _ref.disableToolbar,
          onChange = _ref.onChange,
          openTo = _ref.openTo,
          unparsedMinDate = _ref.minDate,
          unparsedMaxDate = _ref.maxDate,
          ToolbarComponent = _ref.ToolbarComponent,
          orientation = _ref.orientation,
          rest = _objectWithoutProperties(_ref, ["date", "views", "disableToolbar", "onChange", "openTo", "minDate", "maxDate", "ToolbarComponent", "orientation"]);

      var utils = useUtils();
      var classes = useStyles$4$1();
      var isLandscape = useIsLandscape(orientation);

      var _useViews = useViews(views, openTo, onChange),
          openView = _useViews.openView,
          setOpenView = _useViews.setOpenView,
          handleChangeAndOpenNext = _useViews.handleChangeAndOpenNext;

      var minDate = React.useMemo(function () {
        return utils.date(unparsedMinDate);
      }, [unparsedMinDate, utils]);
      var maxDate = React.useMemo(function () {
        return utils.date(unparsedMaxDate);
      }, [unparsedMaxDate, utils]);
      return React.createElement("div", {
        className: clsx(classes.container, isLandscape && classes.containerLandscape)
      }, !disableToolbar && React.createElement(ToolbarComponent, _extends$3({}, rest, {
        views: views,
        isLandscape: isLandscape,
        date: date,
        onChange: onChange,
        setOpenView: setOpenView,
        openView: openView
      })), React.createElement("div", {
        className: clsx(classes.pickerView, isLandscape && classes.pickerViewLandscape)
      }, openView === 'year' && React.createElement(YearSelection, _extends$3({}, rest, {
        date: date,
        onChange: handleChangeAndOpenNext,
        minDate: minDate,
        maxDate: maxDate
      })), openView === 'month' && React.createElement(MonthSelection, _extends$3({}, rest, {
        date: date,
        onChange: handleChangeAndOpenNext,
        minDate: minDate,
        maxDate: maxDate
      })), openView === 'date' && React.createElement(Calendar$1, _extends$3({}, rest, {
        date: date,
        onChange: handleChangeAndOpenNext,
        minDate: minDate,
        maxDate: maxDate
      })), (openView === 'hours' || openView === 'minutes' || openView === 'seconds') && React.createElement(ClockView, _extends$3({}, rest, {
        date: date,
        type: openView,
        onHourChange: handleChangeAndOpenNext,
        onMinutesChange: handleChangeAndOpenNext,
        onSecondsChange: handleChangeAndOpenNext
      }))));
    };
    Picker.defaultProps = _objectSpread$1$2({}, datePickerDefaultProps, {
      views: Object.keys(viewsMap)
    });

    var useStyles$a = makeStyles(function (theme) {
      var textColor = theme.palette.type === 'light' ? theme.palette.primary.contrastText : theme.palette.getContrastText(theme.palette.background["default"]);
      return {
        toolbarTxt: {
          color: fade(textColor, 0.54)
        },
        toolbarBtnSelected: {
          color: textColor
        }
      };
    }, {
      name: 'MuiPickersToolbarText'
    });

    var ToolbarText = function ToolbarText(_ref) {
      var selected = _ref.selected,
          label = _ref.label,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? null : _ref$className,
          other = _objectWithoutProperties(_ref, ["selected", "label", "className"]);

      var classes = useStyles$a();
      return React.createElement(Typography$1, _extends$3({
        children: label,
        className: clsx(classes.toolbarTxt, className, selected && classes.toolbarBtnSelected)
      }, other));
    };

    var ToolbarButton = function ToolbarButton(_ref) {
      var classes = _ref.classes,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? null : _ref$className,
          label = _ref.label,
          selected = _ref.selected,
          variant = _ref.variant,
          align = _ref.align,
          typographyClassName = _ref.typographyClassName,
          other = _objectWithoutProperties(_ref, ["classes", "className", "label", "selected", "variant", "align", "typographyClassName"]);

      return React.createElement(Button$1, _extends$3({
        variant: "text",
        className: clsx(classes.toolbarBtn, className)
      }, other), React.createElement(ToolbarText, {
        align: align,
        className: typographyClassName,
        variant: variant,
        label: label,
        selected: selected
      }));
    };

    process.env.NODE_ENV !== "production" ? ToolbarButton.propTypes = {
      selected: propTypes.bool.isRequired,
      label: propTypes.string.isRequired,
      classes: propTypes.any.isRequired,
      className: propTypes.string,
      innerRef: propTypes.any
    } : void 0;
    ToolbarButton.defaultProps = {
      className: ''
    };
    var styles = createStyles({
      toolbarBtn: {
        padding: 0,
        minWidth: '16px',
        textTransform: 'none'
      }
    });
    var ToolbarButton$1 = withStyles(styles, {
      name: 'MuiPickersToolbarButton'
    })(ToolbarButton);

    var useStyles$1$1 = makeStyles(function (theme) {
      return {
        toolbar: {
          display: 'flex',
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'center',
          height: 100,
          backgroundColor: theme.palette.type === 'light' ? theme.palette.primary.main : theme.palette.background["default"]
        },
        toolbarLandscape: {
          height: 'auto',
          maxWidth: 150,
          padding: 8,
          justifyContent: 'flex-start'
        }
      };
    }, {
      name: 'MuiPickersToolbar'
    });

    var PickerToolbar = function PickerToolbar(_ref) {
      var children = _ref.children,
          isLandscape = _ref.isLandscape,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? null : _ref$className,
          other = _objectWithoutProperties(_ref, ["children", "isLandscape", "className"]);

      var classes = useStyles$1$1();
      return React.createElement(Toolbar$1, _extends$3({
        className: clsx(classes.toolbar, className, isLandscape && classes.toolbarLandscape)
      }, other), children);
    };

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    var PureDateInput = function PureDateInput(_ref) {
      var inputValue = _ref.inputValue,
          inputVariant = _ref.inputVariant,
          validationError = _ref.validationError,
          InputProps = _ref.InputProps,
          onOpen = _ref.openPicker,
          _ref$TextFieldCompone = _ref.TextFieldComponent,
          TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField$1 : _ref$TextFieldCompone,
          other = _objectWithoutProperties(_ref, ["inputValue", "inputVariant", "validationError", "InputProps", "openPicker", "TextFieldComponent"]);

      var PureDateInputProps = React.useMemo(function () {
        return _objectSpread$1({}, InputProps, {
          readOnly: true
        });
      }, [InputProps]);
      return React.createElement(TextFieldComponent, _extends$3({
        error: Boolean(validationError),
        helperText: validationError
      }, other, {
        // do not overridable
        onClick: onOpen,
        value: inputValue,
        variant: inputVariant,
        InputProps: PureDateInputProps,
        onKeyDown: function onKeyDown(e) {
          // space
          if (e.keyCode === 32) {
            e.stopPropagation();
            onOpen();
          }
        }
      }));
    };
    PureDateInput.displayName = 'PureDateInput';

    var KeyboardIcon = function KeyboardIcon(props) {
      return React__default['default'].createElement(SvgIcon$2, props, React__default['default'].createElement("path", {
        d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
      }), React__default['default'].createElement("path", {
        fill: "none",
        d: "M0 0h24v24H0z"
      }));
    };

    var getDisplayDate = function getDisplayDate(value, format, utils, isEmpty, _ref) {
      var invalidLabel = _ref.invalidLabel,
          emptyLabel = _ref.emptyLabel,
          labelFunc = _ref.labelFunc;
      var date = utils.date(value);

      if (labelFunc) {
        return labelFunc(isEmpty ? null : date, invalidLabel);
      }

      if (isEmpty) {
        return emptyLabel || '';
      }

      return utils.isValid(date) ? utils.format(date, format) : invalidLabel;
    };

    var getComparisonMaxDate = function getComparisonMaxDate(utils, strictCompareDates, date) {
      if (strictCompareDates) {
        return date;
      }

      return utils.endOfDay(date);
    };

    var getComparisonMinDate = function getComparisonMinDate(utils, strictCompareDates, date) {
      if (strictCompareDates) {
        return date;
      }

      return utils.startOfDay(date);
    };

    var validate = function validate(value, utils, _ref2) {
      var maxDate = _ref2.maxDate,
          minDate = _ref2.minDate,
          disablePast = _ref2.disablePast,
          disableFuture = _ref2.disableFuture,
          maxDateMessage = _ref2.maxDateMessage,
          minDateMessage = _ref2.minDateMessage,
          invalidDateMessage = _ref2.invalidDateMessage,
          strictCompareDates = _ref2.strictCompareDates;
      var parsedValue = utils.date(value); // if null - do not show error

      if (value === null) {
        return '';
      }

      if (!utils.isValid(value)) {
        return invalidDateMessage;
      }

      if (maxDate && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date(maxDate)))) {
        return maxDateMessage;
      }

      if (disableFuture && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date()))) {
        return maxDateMessage;
      }

      if (minDate && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date(minDate)))) {
        return minDateMessage;
      }

      if (disablePast && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date()))) {
        return minDateMessage;
      }

      return '';
    };
    function makeMaskFromFormat(format, numberMaskChar) {
      return format.replace(/[a-z]/gi, numberMaskChar);
    }
    var maskedDateFormatter = function maskedDateFormatter(mask, numberMaskChar, refuse) {
      return function (value) {
        var result = '';
        var parsed = value.replace(refuse, '');

        if (parsed === '') {
          return parsed;
        }

        var i = 0;
        var n = 0;

        while (i < mask.length) {
          var maskChar = mask[i];

          if (maskChar === numberMaskChar && n < parsed.length) {
            var parsedChar = parsed[n];
            result += parsedChar;
            n += 1;
          } else {
            result += maskChar;
          }

          i += 1;
        }

        return result;
      };
    };

    function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$1(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    var KeyboardDateInput = function KeyboardDateInput(_ref) {
      var inputValue = _ref.inputValue,
          inputVariant = _ref.inputVariant,
          validationError = _ref.validationError,
          KeyboardButtonProps = _ref.KeyboardButtonProps,
          InputAdornmentProps = _ref.InputAdornmentProps,
          onOpen = _ref.openPicker,
          onChange = _ref.onChange,
          InputProps = _ref.InputProps,
          mask = _ref.mask,
          _ref$maskChar = _ref.maskChar,
          maskChar = _ref$maskChar === void 0 ? '_' : _ref$maskChar,
          _ref$refuse = _ref.refuse,
          refuse = _ref$refuse === void 0 ? /[^\d]+/gi : _ref$refuse,
          format = _ref.format,
          keyboardIcon = _ref.keyboardIcon,
          disabled = _ref.disabled,
          rifmFormatter = _ref.rifmFormatter,
          _ref$TextFieldCompone = _ref.TextFieldComponent,
          TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField$1 : _ref$TextFieldCompone,
          other = _objectWithoutProperties(_ref, ["inputValue", "inputVariant", "validationError", "KeyboardButtonProps", "InputAdornmentProps", "openPicker", "onChange", "InputProps", "mask", "maskChar", "refuse", "format", "keyboardIcon", "disabled", "rifmFormatter", "TextFieldComponent"]);

      var inputMask = mask || makeMaskFromFormat(format, maskChar); // prettier-ignore

      var formatter = React.useMemo(function () {
        return maskedDateFormatter(inputMask, maskChar, refuse);
      }, [inputMask, maskChar, refuse]);
      var position = InputAdornmentProps && InputAdornmentProps.position ? InputAdornmentProps.position : 'end';

      var handleChange = function handleChange(text) {
        var finalString = text === '' || text === inputMask ? null : text;
        onChange(finalString);
      };

      return React.createElement(Rifm, {
        key: inputMask,
        value: inputValue,
        onChange: handleChange,
        refuse: refuse,
        format: rifmFormatter || formatter
      }, function (_ref2) {
        var onChange = _ref2.onChange,
            value = _ref2.value;
        return React.createElement(TextFieldComponent, _extends$3({
          disabled: disabled,
          error: Boolean(validationError),
          helperText: validationError
        }, other, {
          value: value,
          onChange: onChange,
          variant: inputVariant,
          InputProps: _objectSpread$1$1({}, InputProps, _defineProperty({}, "".concat(position, "Adornment"), React.createElement(InputAdornment$1, _extends$3({
            position: position
          }, InputAdornmentProps), React.createElement(IconButton$1, _extends$3({
            disabled: disabled
          }, KeyboardButtonProps, {
            onClick: onOpen
          }), keyboardIcon))))
        }));
      });
    };
    KeyboardDateInput.defaultProps = {
      keyboardIcon: React.createElement(KeyboardIcon, null)
    };

    function useOpenState(_ref) {
      var open = _ref.open,
          onOpen = _ref.onOpen,
          onClose = _ref.onClose;
      var setIsOpenState = null;

      if (open === undefined || open === null) {
        // The component is uncontrolled, so we need to give it its own state.
        var _useState = React.useState(false);

        var _useState2 = _slicedToArray$1(_useState, 2);

        open = _useState2[0];
        setIsOpenState = _useState2[1];
      } // prettier-ignore


      var setIsOpen = React.useCallback(function (newIsOpen) {
        setIsOpenState && setIsOpenState(newIsOpen);
        return newIsOpen ? onOpen && onOpen() : onClose && onClose();
      }, [onOpen, onClose, setIsOpenState]);
      return {
        isOpen: open,
        setIsOpen: setIsOpen
      };
    }

    var useValueToDate = function useValueToDate(utils, _ref) {
      var value = _ref.value,
          initialFocusedDate = _ref.initialFocusedDate;
      var nowRef = React.useRef(utils.date());
      var date = utils.date(value || initialFocusedDate || nowRef.current);
      return date && utils.isValid(date) ? date : nowRef.current;
    };

    function useDateValues(props, options) {
      var utils = useUtils();
      var date = useValueToDate(utils, props);
      var format = props.format || options.getDefaultFormat();
      return {
        date: date,
        format: format
      };
    }

    function usePickerState(props, options) {
      var autoOk = props.autoOk,
          disabled = props.disabled,
          readOnly = props.readOnly,
          onAccept = props.onAccept,
          _onChange = props.onChange,
          onError = props.onError,
          value = props.value,
          variant = props.variant;
      var utils = useUtils();

      var _useOpenState = useOpenState(props),
          isOpen = _useOpenState.isOpen,
          setIsOpen = _useOpenState.setIsOpen;

      var _useDateValues = useDateValues(props, options),
          date = _useDateValues.date,
          format = _useDateValues.format;

      var _useState = React.useState(date),
          _useState2 = _slicedToArray$1(_useState, 2),
          pickerDate = _useState2[0],
          setPickerDate = _useState2[1];

      React.useEffect(function () {
        // if value was changed in closed state - treat it as accepted
        if (!isOpen && !utils.isEqual(pickerDate, date)) {
          setPickerDate(date);
        }
      }, [date, isOpen, pickerDate, utils]);
      var acceptDate = React.useCallback(function (acceptedDate) {
        _onChange(acceptedDate);

        if (onAccept) {
          onAccept(acceptedDate);
        }

        setIsOpen(false);
      }, [onAccept, _onChange, setIsOpen]);
      var wrapperProps = React.useMemo(function () {
        return {
          format: format,
          open: isOpen,
          onClear: function onClear() {
            return acceptDate(null);
          },
          onAccept: function onAccept() {
            return acceptDate(pickerDate);
          },
          onSetToday: function onSetToday() {
            return setPickerDate(utils.date());
          },
          onDismiss: function onDismiss() {
            setIsOpen(false);
          }
        };
      }, [acceptDate, format, isOpen, pickerDate, setIsOpen, utils]);
      var pickerProps = React.useMemo(function () {
        return {
          date: pickerDate,
          onChange: function onChange(newDate) {
            var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            setPickerDate(newDate);

            if (isFinish && autoOk) {
              acceptDate(newDate);
              return;
            } // simulate autoOk, but do not close the modal


            if (variant === 'inline' || variant === 'static') {
              _onChange(newDate);

              onAccept && onAccept(newDate);
            }
          }
        };
      }, [acceptDate, autoOk, onAccept, _onChange, pickerDate, variant]);
      var validationError = validate(value, utils, props);
      React.useEffect(function () {
        if (onError) {
          onError(validationError, value);
        }
      }, [onError, validationError, value]);
      var inputValue = getDisplayDate(date, format, utils, value === null, props);
      var inputProps = React.useMemo(function () {
        return {
          inputValue: inputValue,
          validationError: validationError,
          openPicker: function openPicker() {
            return !readOnly && !disabled && setIsOpen(true);
          }
        };
      }, [disabled, inputValue, readOnly, setIsOpen, validationError]);
      var pickerState = {
        pickerProps: pickerProps,
        inputProps: inputProps,
        wrapperProps: wrapperProps
      };
      React.useDebugValue(pickerState);
      return pickerState;
    }

    function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function parseInputString(value, utils, format) {
      try {
        return utils.parse(value, format);
      } catch (_unused) {
        return null;
      }
    }

    function useKeyboardPickerState(props, options) {
      var _props$format = props.format,
          format = _props$format === void 0 ? options.getDefaultFormat() : _props$format,
          inputValue = props.inputValue,
          _onChange = props.onChange,
          value = props.value;
      var utils = useUtils();
      var displayDate = getDisplayDate(value, format, utils, value === null, props);

      var _useState = React.useState(displayDate),
          _useState2 = _slicedToArray$1(_useState, 2),
          innerInputValue = _useState2[0],
          setInnerInputValue = _useState2[1];

      var dateValue = inputValue ? parseInputString(inputValue, utils, format) : value;
      React.useEffect(function () {
        if (value === null || utils.isValid(value)) {
          setInnerInputValue(displayDate);
        }
      }, [displayDate, setInnerInputValue, utils, value]);
      var handleKeyboardChange = React.useCallback(function (date) {
        _onChange(date, date === null ? null : utils.format(date, format));
      }, [format, _onChange, utils]);

      var _usePickerState = usePickerState( // Extend props interface
      _objectSpread$2({}, props, {
        value: dateValue,
        onChange: handleKeyboardChange
      }), options),
          innerInputProps = _usePickerState.inputProps,
          wrapperProps = _usePickerState.wrapperProps,
          pickerProps = _usePickerState.pickerProps;

      var inputProps = React.useMemo(function () {
        return _objectSpread$2({}, innerInputProps, {
          // reuse validation and open/close logic
          format: wrapperProps.format,
          inputValue: inputValue || innerInputValue,
          onChange: function onChange(value) {
            setInnerInputValue(value || '');
            var date = value === null ? null : utils.parse(value, wrapperProps.format);

            _onChange(date, value);
          }
        });
      }, [innerInputProps, innerInputValue, inputValue, _onChange, utils, wrapperProps.format]);
      return {
        inputProps: inputProps,
        wrapperProps: wrapperProps,
        pickerProps: pickerProps
      };
    }

    function makePickerWithState(_ref) {
      var Input = _ref.Input,
          useState = _ref.useState,
          useOptions = _ref.useOptions,
          getCustomProps = _ref.getCustomProps,
          DefaultToolbarComponent = _ref.DefaultToolbarComponent;

      function PickerWithState(props) {
        var allowKeyboardControl = props.allowKeyboardControl,
            ampm = props.ampm,
            animateYearScrolling = props.animateYearScrolling;
            props.autoOk;
            var dateRangeIcon = props.dateRangeIcon,
            disableFuture = props.disableFuture,
            disablePast = props.disablePast,
            disableToolbar = props.disableToolbar;
            props.emptyLabel;
            props.format;
            props.forwardedRef;
            var hideTabs = props.hideTabs;
            props.initialFocusedDate;
            props.invalidDateMessage;
            props.invalidLabel;
            props.labelFunc;
            var leftArrowButtonProps = props.leftArrowButtonProps,
            leftArrowIcon = props.leftArrowIcon,
            loadingIndicator = props.loadingIndicator,
            maxDate = props.maxDate;
            props.maxDateMessage;
            var minDate = props.minDate;
            props.minDateMessage;
            var minutesStep = props.minutesStep;
            props.onAccept;
            props.onChange;
            props.onClose;
            var onMonthChange = props.onMonthChange;
            props.onOpen;
            var onYearChange = props.onYearChange,
            openTo = props.openTo,
            orientation = props.orientation,
            renderDay = props.renderDay,
            rightArrowButtonProps = props.rightArrowButtonProps,
            rightArrowIcon = props.rightArrowIcon,
            shouldDisableDate = props.shouldDisableDate,
            strictCompareDates = props.strictCompareDates,
            timeIcon = props.timeIcon,
            _props$ToolbarCompone = props.ToolbarComponent,
            ToolbarComponent = _props$ToolbarCompone === void 0 ? DefaultToolbarComponent : _props$ToolbarCompone;
            props.value;
            var variant = props.variant,
            views = props.views,
            other = _objectWithoutProperties(props, ["allowKeyboardControl", "ampm", "animateYearScrolling", "autoOk", "dateRangeIcon", "disableFuture", "disablePast", "disableToolbar", "emptyLabel", "format", "forwardedRef", "hideTabs", "initialFocusedDate", "invalidDateMessage", "invalidLabel", "labelFunc", "leftArrowButtonProps", "leftArrowIcon", "loadingIndicator", "maxDate", "maxDateMessage", "minDate", "minDateMessage", "minutesStep", "onAccept", "onChange", "onClose", "onMonthChange", "onOpen", "onYearChange", "openTo", "orientation", "renderDay", "rightArrowButtonProps", "rightArrowIcon", "shouldDisableDate", "strictCompareDates", "timeIcon", "ToolbarComponent", "value", "variant", "views"]);

        var injectedProps = getCustomProps ? getCustomProps(props) : {};
        var options = useOptions(props);

        var _useState = useState(props, options),
            pickerProps = _useState.pickerProps,
            inputProps = _useState.inputProps,
            wrapperProps = _useState.wrapperProps;

        return React.createElement(Wrapper, _extends$3({
          variant: variant,
          InputComponent: Input,
          DateInputProps: inputProps
        }, injectedProps, wrapperProps, other), React.createElement(Picker, _extends$3({}, pickerProps, {
          allowKeyboardControl: allowKeyboardControl,
          ampm: ampm,
          animateYearScrolling: animateYearScrolling,
          dateRangeIcon: dateRangeIcon,
          disableFuture: disableFuture,
          disablePast: disablePast,
          disableToolbar: disableToolbar,
          hideTabs: hideTabs,
          leftArrowButtonProps: leftArrowButtonProps,
          leftArrowIcon: leftArrowIcon,
          loadingIndicator: loadingIndicator,
          maxDate: maxDate,
          minDate: minDate,
          minutesStep: minutesStep,
          onMonthChange: onMonthChange,
          onYearChange: onYearChange,
          openTo: openTo,
          orientation: orientation,
          renderDay: renderDay,
          rightArrowButtonProps: rightArrowButtonProps,
          rightArrowIcon: rightArrowIcon,
          shouldDisableDate: shouldDisableDate,
          strictCompareDates: strictCompareDates,
          timeIcon: timeIcon,
          ToolbarComponent: ToolbarComponent,
          views: views
        })));
      }

      return PickerWithState;
    }

    var useStyles$9 = makeStyles({
      toolbar: {
        flexDirection: 'column',
        alignItems: 'flex-start'
      },
      toolbarLandscape: {
        padding: 16
      },
      dateLandscape: {
        marginRight: 16
      }
    }, {
      name: 'MuiPickersDatePickerRoot'
    });
    var DatePickerToolbar = function DatePickerToolbar(_ref) {
      var date = _ref.date,
          views = _ref.views,
          setOpenView = _ref.setOpenView,
          isLandscape = _ref.isLandscape,
          openView = _ref.openView;
      var utils = useUtils();
      var classes = useStyles$9();
      var isYearOnly = React.useMemo(function () {
        return isYearOnlyView(views);
      }, [views]);
      var isYearAndMonth = React.useMemo(function () {
        return isYearAndMonthViews(views);
      }, [views]);
      return React.createElement(PickerToolbar, {
        isLandscape: isLandscape,
        className: clsx(!isYearOnly && classes.toolbar, isLandscape && classes.toolbarLandscape)
      }, React.createElement(ToolbarButton$1, {
        variant: isYearOnly ? 'h3' : 'subtitle1',
        onClick: function onClick() {
          return setOpenView('year');
        },
        selected: openView === 'year',
        label: utils.getYearText(date)
      }), !isYearOnly && !isYearAndMonth && React.createElement(ToolbarButton$1, {
        variant: "h4",
        selected: openView === 'date',
        onClick: function onClick() {
          return setOpenView('date');
        },
        align: isLandscape ? 'left' : 'center',
        label: utils.getDatePickerHeaderText(date),
        className: clsx(isLandscape && classes.dateLandscape)
      }), isYearAndMonth && React.createElement(ToolbarButton$1, {
        variant: "h4",
        onClick: function onClick() {
          return setOpenView('month');
        },
        selected: openView === 'month',
        label: utils.getMonthText(date)
      }));
    };

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var defaultProps = _objectSpread({}, datePickerDefaultProps, {
      openTo: 'date',
      views: ['year', 'date']
    });

    function useOptions(props) {
      var utils = useUtils();
      return {
        getDefaultFormat: function getDefaultFormat() {
          return getFormatByViews(props.views, utils);
        }
      };
    }

    var DatePicker = makePickerWithState({
      useOptions: useOptions,
      Input: PureDateInput,
      useState: usePickerState,
      DefaultToolbarComponent: DatePickerToolbar
    });
    var KeyboardDatePicker = makePickerWithState({
      useOptions: useOptions,
      Input: KeyboardDateInput,
      useState: useKeyboardPickerState,
      DefaultToolbarComponent: DatePickerToolbar
    });
    DatePicker.defaultProps = defaultProps;
    KeyboardDatePicker.defaultProps = defaultProps;

    var dayjs_min = createCommonjsModule(function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,function(){var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",a="quarter",o="year",f="date",h=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,c=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,d={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},$=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},l={s:$,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+$(r,2,"0")+":"+$(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,u),s=n-i<0,a=e.clone().add(r+(s?-1:1),u);return +(-(r+(n-i)/(s?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return {M:u,y:o,w:s,d:i,D:f,h:r,m:n,s:e,ms:t,Q:a}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",M={};M[y]=d;var m=function(t){return t instanceof S},D=function(t,e,n){var r;if(!t)return y;if("string"==typeof t)M[t]&&(r=t),e&&(M[t]=e,r=t);else {var i=t.name;M[i]=t,r=i;}return !n&&r&&(y=r),r||!n&&y},v=function(t,e){if(m(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new S(n)},g=l;g.l=D,g.i=m,g.w=function(t,e){return v(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var S=function(){function d(t){this.$L=D(t.locale,null,!0),this.parse(t);}var $=d.prototype;return $.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(g.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},$.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},$.$utils=function(){return g},$.isValid=function(){return !("Invalid Date"===this.$d.toString())},$.isSame=function(t,e){var n=v(t);return this.startOf(e)<=n&&n<=this.endOf(e)},$.isAfter=function(t,e){return v(t)<this.startOf(e)},$.isBefore=function(t,e){return this.endOf(e)<v(t)},$.$g=function(t,e,n){return g.u(t)?this[e]:this.set(n,t)},$.unix=function(){return Math.floor(this.valueOf()/1e3)},$.valueOf=function(){return this.$d.getTime()},$.startOf=function(t,a){var h=this,c=!!g.u(a)||a,d=g.p(t),$=function(t,e){var n=g.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return c?n:n.endOf(i)},l=function(t,e){return g.w(h.toDate()[t].apply(h.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},y=this.$W,M=this.$M,m=this.$D,D="set"+(this.$u?"UTC":"");switch(d){case o:return c?$(1,0):$(31,11);case u:return c?$(1,M):$(0,M+1);case s:var v=this.$locale().weekStart||0,S=(y<v?y+7:y)-v;return $(c?m-S:m+(6-S),M);case i:case f:return l(D+"Hours",0);case r:return l(D+"Minutes",1);case n:return l(D+"Seconds",2);case e:return l(D+"Milliseconds",3);default:return this.clone()}},$.endOf=function(t){return this.startOf(t,!1)},$.$set=function(s,a){var h,c=g.p(s),d="set"+(this.$u?"UTC":""),$=(h={},h[i]=d+"Date",h[f]=d+"Date",h[u]=d+"Month",h[o]=d+"FullYear",h[r]=d+"Hours",h[n]=d+"Minutes",h[e]=d+"Seconds",h[t]=d+"Milliseconds",h)[c],l=c===i?this.$D+(a-this.$W):a;if(c===u||c===o){var y=this.clone().set(f,1);y.$d[$](l),y.init(),this.$d=y.set(f,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},$.set=function(t,e){return this.clone().$set(t,e)},$.get=function(t){return this[g.p(t)]()},$.add=function(t,a){var f,h=this;t=Number(t);var c=g.p(a),d=function(e){var n=v(h);return g.w(n.date(n.date()+Math.round(e*t)),h)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(f={},f[n]=6e4,f[r]=36e5,f[e]=1e3,f)[c]||1,l=this.$d.getTime()+t*$;return g.w(l,this)},$.subtract=function(t,e){return this.add(-1*t,e)},$.format=function(t){var e=this;if(!this.isValid())return "Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=g.z(this),i=this.$locale(),s=this.$H,u=this.$m,a=this.$M,o=i.weekdays,f=i.months,h=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return g.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:g.s(a+1,2,"0"),MMM:h(i.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:g.s(this.$D,2,"0"),d:String(this.$W),dd:h(i.weekdaysMin,this.$W,o,2),ddd:h(i.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:g.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:g.s(u,2,"0"),s:String(this.$s),ss:g.s(this.$s,2,"0"),SSS:g.s(this.$ms,3,"0"),Z:r};return n.replace(c,function(t,e){return e||l[t]||r.replace(":","")})},$.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},$.diff=function(t,f,h){var c,d=g.p(f),$=v(t),l=6e4*($.utcOffset()-this.utcOffset()),y=this-$,M=g.m(this,$);return M=(c={},c[o]=M/12,c[u]=M,c[a]=M/3,c[s]=(y-l)/6048e5,c[i]=(y-l)/864e5,c[r]=y/36e5,c[n]=y/6e4,c[e]=y/1e3,c)[d]||y,h?M:g.a(M)},$.daysInMonth=function(){return this.endOf(u).$D},$.$locale=function(){return M[this.$L]},$.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=D(t,e,!0);return r&&(n.$L=r),n},$.clone=function(){return g.w(this.$d,this)},$.toDate=function(){return new Date(this.valueOf())},$.toJSON=function(){return this.isValid()?this.toISOString():null},$.toISOString=function(){return this.$d.toISOString()},$.toString=function(){return this.$d.toUTCString()},d}(),p=S.prototype;return v.prototype=p,[["$ms",t],["$s",e],["$m",n],["$H",r],["$W",i],["$M",u],["$y",o],["$D",f]].forEach(function(t){p[t[1]]=function(e){return this.$g(e,t[0],t[1])};}),v.extend=function(t,e){return t.$i||(t(e,S,v),t.$i=!0),v},v.locale=D,v.isDayjs=m,v.unix=function(t){return v(1e3*t)},v.en=M[y],v.Ls=M,v.p={},v});
    });

    var customParseFormat = createCommonjsModule(function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,function(){var t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},e=function(e,n){return e.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(e,r,i){var o=i&&i.toUpperCase();return r||n[i]||t[i]||n[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(t,e,n){return e||n.slice(1)})})},n=/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,r=/\d\d/,i=/\d\d?/,o=/\d*[^\s\d-_:/()]+/,s={};var a=function(t){return function(e){this[t]=+e;}},f=[/[+-]\d\d:?(\d\d)?/,function(t){(this.zone||(this.zone={})).offset=function(t){if(!t)return 0;var e=t.match(/([+-]|\d\d)/g),n=60*e[1]+(+e[2]||0);return 0===n?0:"+"===e[0]?-n:n}(t);}],u=function(t){var e=s[t];return e&&(e.indexOf?e:e.s.concat(e.f))},h=function(t,e){var n,r=s.meridiem;if(r){for(var i=1;i<=24;i+=1)if(t.indexOf(r(i,0,e))>-1){n=i>12;break}}else n=t===(e?"pm":"PM");return n},d={A:[o,function(t){this.afternoon=h(t,!1);}],a:[o,function(t){this.afternoon=h(t,!0);}],S:[/\d/,function(t){this.milliseconds=100*+t;}],SS:[r,function(t){this.milliseconds=10*+t;}],SSS:[/\d{3}/,function(t){this.milliseconds=+t;}],s:[i,a("seconds")],ss:[i,a("seconds")],m:[i,a("minutes")],mm:[i,a("minutes")],H:[i,a("hours")],h:[i,a("hours")],HH:[i,a("hours")],hh:[i,a("hours")],D:[i,a("day")],DD:[r,a("day")],Do:[o,function(t){var e=s.ordinal,n=t.match(/\d+/);if(this.day=n[0],e)for(var r=1;r<=31;r+=1)e(r).replace(/\[|\]/g,"")===t&&(this.day=r);}],M:[i,a("month")],MM:[r,a("month")],MMM:[o,function(t){var e=u("months"),n=(u("monthsShort")||e.map(function(t){return t.substr(0,3)})).indexOf(t)+1;if(n<1)throw new Error;this.month=n%12||n;}],MMMM:[o,function(t){var e=u("months").indexOf(t)+1;if(e<1)throw new Error;this.month=e%12||e;}],Y:[/[+-]?\d+/,a("year")],YY:[r,function(t){t=+t,this.year=t+(t>68?1900:2e3);}],YYYY:[/\d{4}/,a("year")],Z:f,ZZ:f};var c=function(t,r,i){try{var o=function(t){for(var r=(t=e(t,s&&s.formats)).match(n),i=r.length,o=0;o<i;o+=1){var a=r[o],f=d[a],u=f&&f[0],h=f&&f[1];r[o]=h?{regex:u,parser:h}:a.replace(/^\[|\]$/g,"");}return function(t){for(var e={},n=0,o=0;n<i;n+=1){var s=r[n];if("string"==typeof s)o+=s.length;else {var a=s.regex,f=s.parser,u=t.substr(o),h=a.exec(u)[0];f.call(e,h),t=t.replace(h,"");}}return function(t){var e=t.afternoon;if(void 0!==e){var n=t.hours;e?n<12&&(t.hours+=12):12===n&&(t.hours=0),delete t.afternoon;}}(e),e}}(r)(t),a=o.year,f=o.month,u=o.day,h=o.hours,c=o.minutes,m=o.seconds,l=o.milliseconds,M=o.zone,Y=new Date,v=u||(a||f?1:Y.getDate()),p=a||Y.getFullYear(),D=0;a&&!f||(D=f>0?f-1:Y.getMonth());var y=h||0,L=c||0,g=m||0,$=l||0;return M?new Date(Date.UTC(p,D,v,y,L,g,$+60*M.offset*1e3)):i?new Date(Date.UTC(p,D,v,y,L,g,$)):new Date(p,D,v,y,L,g,$)}catch(t){return new Date("")}};return function(t,e,n){n.p.customParseFormat=!0;var r=e.prototype,i=r.parse;r.parse=function(t){var e=t.date,r=t.utc,o=t.args;this.$u=r;var a=o[1];if("string"==typeof a){var f=!0===o[2],u=!0===o[3],h=f||u,d=o[2];u&&(d=o[2]),s=this.$locale(),!f&&d&&(s=n.Ls[d]),this.$d=c(e,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),h&&e!==this.format(a)&&(this.$d=new Date("")),s={};}else if(a instanceof Array)for(var m=a.length,l=1;l<=m;l+=1){o[1]=a[l-1];var M=n.apply(this,o);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}l===m&&(this.$d=new Date(""));}else i.call(this,t);};}});
    });

    var localizedFormat = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t="YYYY-MM-DDTHH:mm:ssZ");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)};}});
    });

    var isBetween = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,i){t.prototype.isBetween=function(e,t,s,f){var n=i(e),o=i(t),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}});
    });

    dayjs_min.extend(customParseFormat);
    dayjs_min.extend(localizedFormat);
    dayjs_min.extend(isBetween);
    var withLocale = function (dayjs, locale) {
        return !locale ? dayjs : function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return dayjs.apply(void 0, args).locale(locale);
        };
    };
    var defaultFormats = {
        normalDateWithWeekday: "ddd, MMM D",
        normalDate: "D MMMM",
        shortDate: "MMM D",
        monthAndDate: "MMMM D",
        dayOfMonth: "D",
        year: "YYYY",
        month: "MMMM",
        monthShort: "MMM",
        monthAndYear: "MMMM YYYY",
        weekday: "dddd",
        weekdayShort: "ddd",
        minutes: "mm",
        hours12h: "hh",
        hours24h: "HH",
        seconds: "ss",
        fullTime: "LT",
        fullTime12h: "hh:mm A",
        fullTime24h: "HH:mm",
        fullDate: "ll",
        fullDateWithWeekday: "dddd, LL",
        fullDateTime: "lll",
        fullDateTime12h: "ll hh:mm A",
        fullDateTime24h: "ll HH:mm",
        keyboardDate: "L",
        keyboardDateTime: "L LT",
        keyboardDateTime12h: "L hh:mm A",
        keyboardDateTime24h: "L HH:mm",
    };
    var DayjsUtils = /** @class */ (function () {
        function DayjsUtils(_a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats, instance = _b.instance;
            this.lib = "dayjs";
            this.is12HourCycleInCurrentLocale = function () {
                var _a, _b;
                /* istanbul ignore next */
                return /A|a/.test((_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats) === null || _b === void 0 ? void 0 : _b.LT);
            };
            this.getCurrentLocaleCode = function () {
                return _this.locale || "en";
            };
            this.getFormatHelperText = function (format) {
                // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
                var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?)|./g;
                return format
                    .match(localFormattingTokens)
                    .map(function (token) {
                    var _a, _b;
                    var firstCharacter = token[0];
                    if (firstCharacter === "L") {
                        /* istanbul ignore next */
                        return (_b = (_a = _this.rawDayJsInstance.Ls[_this.locale || "en"]) === null || _a === void 0 ? void 0 : _a.formats[token]) !== null && _b !== void 0 ? _b : token;
                    }
                    return token;
                })
                    .join("")
                    .replace(/a/gi, "(a|p)m")
                    .toLocaleLowerCase();
            };
            this.parse = function (value, format) {
                if (value === "") {
                    return null;
                }
                return _this.dayjs(value, format, _this.locale);
            };
            this.date = function (value) {
                if (value === null) {
                    return null;
                }
                return _this.dayjs(value);
            };
            this.toJsDate = function (value) {
                return value.toDate();
            };
            this.isValid = function (value) {
                return _this.dayjs(value).isValid();
            };
            this.isNull = function (date) {
                return date === null;
            };
            this.getDiff = function (date, comparing, units) {
                return date.diff(comparing, units);
            };
            this.isAfter = function (date, value) {
                return date.isAfter(value);
            };
            this.isBefore = function (date, value) {
                return date.isBefore(value);
            };
            this.isAfterDay = function (date, value) {
                return date.isAfter(value, "day");
            };
            this.isBeforeDay = function (date, value) {
                return date.isBefore(value, "day");
            };
            this.isBeforeYear = function (date, value) {
                return date.isBefore(value, "year");
            };
            this.isAfterYear = function (date, value) {
                return date.isAfter(value, "year");
            };
            this.startOfDay = function (date) {
                return date.clone().startOf("day");
            };
            this.endOfDay = function (date) {
                return date.clone().endOf("day");
            };
            this.format = function (date, formatKey) {
                return _this.formatByString(date, _this.formats[formatKey]);
            };
            this.formatByString = function (date, formatString) {
                return _this.dayjs(date).format(formatString);
            };
            this.formatNumber = function (numberToFormat) {
                return numberToFormat;
            };
            this.getHours = function (date) {
                return date.hour();
            };
            this.addSeconds = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "second")
                    : date.add(count, "second");
            };
            this.addMinutes = function (date, count) {
                return count < 0
                    ? date.subtract(Math.abs(count), "minute")
                    : date.add(count, "minute");
            };
            this.addHours = function (date, count) {
                return count < 0 ? date.subtract(Math.abs(count), "hour") : date.add(count, "hour");
            };
            this.addDays = function (date, count) {
                return count < 0 ? date.subtract(Math.abs(count), "day") : date.add(count, "day");
            };
            this.addWeeks = function (date, count) {
                return count < 0 ? date.subtract(Math.abs(count), "week") : date.add(count, "week");
            };
            this.addMonths = function (date, count) {
                return count < 0 ? date.subtract(Math.abs(count), "month") : date.add(count, "month");
            };
            this.setMonth = function (date, count) {
                return date.set("month", count);
            };
            this.setHours = function (date, count) {
                return date.set("hour", count);
            };
            this.getMinutes = function (date) {
                return date.minute();
            };
            this.setMinutes = function (date, count) {
                return date.clone().set("minute", count);
            };
            this.getSeconds = function (date) {
                return date.second();
            };
            this.setSeconds = function (date, count) {
                return date.clone().set("second", count);
            };
            this.getMonth = function (date) {
                return date.month();
            };
            this.getDaysInMonth = function (date) {
                return date.daysInMonth();
            };
            this.isSameDay = function (date, comparing) {
                return date.isSame(comparing, "day");
            };
            this.isSameMonth = function (date, comparing) {
                return date.isSame(comparing, "month");
            };
            this.isSameYear = function (date, comparing) {
                return date.isSame(comparing, "year");
            };
            this.isSameHour = function (date, comparing) {
                return date.isSame(comparing, "hour");
            };
            this.getMeridiemText = function (ampm) {
                return ampm === "am" ? "AM" : "PM";
            };
            this.startOfMonth = function (date) {
                return date.clone().startOf("month");
            };
            this.endOfMonth = function (date) {
                return date.clone().endOf("month");
            };
            this.startOfWeek = function (date) {
                return date.clone().startOf("week");
            };
            this.endOfWeek = function (date) {
                return date.clone().endOf("week");
            };
            this.getNextMonth = function (date) {
                return date.clone().add(1, "month");
            };
            this.getPreviousMonth = function (date) {
                return date.clone().subtract(1, "month");
            };
            this.getMonthArray = function (date) {
                var firstMonth = date.clone().startOf("year");
                var monthArray = [firstMonth];
                while (monthArray.length < 12) {
                    var prevMonth = monthArray[monthArray.length - 1];
                    monthArray.push(_this.getNextMonth(prevMonth));
                }
                return monthArray;
            };
            this.getYear = function (date) {
                return date.year();
            };
            this.setYear = function (date, year) {
                return date.clone().set("year", year);
            };
            this.mergeDateAndTime = function (date, time) {
                return date.hour(time.hour()).minute(time.minute()).second(time.second());
            };
            this.getWeekdays = function () {
                var start = _this.dayjs().startOf("week");
                return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {
                    return _this.formatByString(start.add(diff, "day"), "dd");
                });
            };
            this.isEqual = function (value, comparing) {
                if (value === null && comparing === null) {
                    return true;
                }
                return _this.dayjs(value).isSame(comparing);
            };
            this.getWeekArray = function (date) {
                var start = _this.dayjs(date).clone().startOf("month").startOf("week");
                var end = _this.dayjs(date).clone().endOf("month").endOf("week");
                var count = 0;
                var current = start;
                var nestedWeeks = [];
                while (current.isBefore(end)) {
                    var weekNumber = Math.floor(count / 7);
                    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
                    nestedWeeks[weekNumber].push(current);
                    current = current.clone().add(1, "day");
                    count += 1;
                }
                return nestedWeeks;
            };
            this.getYearRange = function (start, end) {
                var startDate = _this.dayjs(start).startOf("year");
                var endDate = _this.dayjs(end).endOf("year");
                var years = [];
                var current = startDate;
                while (current.isBefore(endDate)) {
                    years.push(current);
                    current = current.clone().add(1, "year");
                }
                return years;
            };
            this.isWithinRange = function (date, _a) {
                var start = _a[0], end = _a[1];
                return date.isBetween(start, end, null, "[]");
            };
            this.rawDayJsInstance = instance || dayjs_min;
            this.dayjs = withLocale(this.rawDayJsInstance, locale);
            this.locale = locale;
            this.formats = Object.assign({}, defaultFormats, formats);
        }
        return DayjsUtils;
    }());

    var fa$1 = createCommonjsModule(function (module, exports) {
    !function(_,e){module.exports=e(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"fa",weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekStart:6,months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),ordinal:function(_){return _},formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"}};return _.locale(e,null,!0),e});
    });

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    /* eslint-disable */

    /*
     JavaScript functions for the Fourmilab Calendar Converter
     by John Walker  --  September, MIM
     http://www.fourmilab.ch/documents/calendar/
     This program is in the public domain.
     */

    /*  MOD  --  Modulus function which works for non-integers.  */
    var $floor = Math.floor;

    function mod(a, b) {
      return a - b * $floor(a / b);
    } //  LEAP_GREGORIAN  --  Is a given year in the Gregorian calendar a leap year ?


    function lg(year) {
      return year % 4 == 0 && !(year % 100 == 0 && year % 400 != 0);
    } //  GREGORIAN_TO_JD  --  Determine Julian day number from Gregorian calendar date
    // GREGORIAN_EPOCH


    var GE = 1721425.5;

    function g2j(year, month, day) {
      return GE - 1 + 365 * (year - 1) + $floor((year - 1) / 4) + -$floor((year - 1) / 100) + $floor((year - 1) / 400) + $floor((367 * month - 362) / 12 + (month <= 2 ? 0 : lg(year) ? -1 : -2) + day);
    } //  JD_TO_GREGORIAN  --  Calculate Gregorian calendar date from Julian day


    function j2g(jd) {
      var wjd, depoch, quadricent, dqc, cent, dcent, quad, dquad, yindex, year, yearday, leapadj;
      wjd = $floor(jd - 0.5) + 0.5;
      depoch = wjd - GE;
      quadricent = $floor(depoch / 146097);
      dqc = mod(depoch, 146097);
      cent = $floor(dqc / 36524);
      dcent = mod(dqc, 36524);
      quad = $floor(dcent / 1461);
      dquad = mod(dcent, 1461);
      yindex = $floor(dquad / 365);
      year = quadricent * 400 + cent * 100 + quad * 4 + yindex;

      if (!(cent == 4 || yindex == 4)) {
        year++;
      }

      yearday = wjd - g2j(year, 1, 1);
      leapadj = wjd < g2j(year, 3, 1) ? 0 : lg(year) ? 1 : 2;
      var month = $floor(((yearday + leapadj) * 12 + 373) / 367),
          day = wjd - g2j(year, month, 1) + 1;
      return [year, month, day];
    } // PERSIAN_EPOCH


    var PE = 1948320.5; //  PERSIAN_TO_JD  --  Determine Julian day from Persian date

    function p2j(year, month, day) {
      var epbase, epyear;
      epbase = year - (year >= 0 ? 474 : 473);
      epyear = 474 + mod(epbase, 2820);
      return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + $floor((epyear * 682 - 110) / 2816) + (epyear - 1) * 365 + $floor(epbase / 2820) * 1029983 + (PE - 1);
    } //  JD_TO_PERSIAN  --  Calculate Persian date from Julian day


    function j2p(jd) {
      var year, month, day, depoch, cycle, cyear, ycycle, aux1, aux2, yday;
      jd = $floor(jd) + 0.5;
      depoch = jd - p2j(475, 1, 1);
      cycle = $floor(depoch / 1029983);
      cyear = mod(depoch, 1029983);

      if (cyear == 1029982) {
        ycycle = 2820;
      } else {
        aux1 = $floor(cyear / 366);
        aux2 = mod(cyear, 366);
        ycycle = $floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;
      }

      year = ycycle + 2820 * cycle + 474;

      if (year <= 0) {
        year--;
      }

      yday = jd - p2j(year, 1, 1) + 1;
      month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);
      day = jd - p2j(year, month, 1) + 1;
      return [year, month, day];
    }

    var jdate = {
      J: function J(y, m, d) {
        return j2p(g2j(y, m, d));
      },
      G: function G(y, m, d) {
        return j2g(p2j(y, m, d));
      }
    };

    var REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})[-/]?(\d{0,2})(.*)?$/;
    var REGEX_FORMAT = /\[.*?\]|jY{2,4}|jM{1,4}|jD{1,2}|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
    var DATE = 'date';
    var D = 'day';
    var M = 'month';
    var Y = 'year';
    var W = 'week';
    var FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';
    var fa = {
      jmonths: 'فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند'.split('_')
    };

    var plugin = (function (o, Dayjs, dayjs) {
      var proto = Dayjs.prototype;
      var U = proto.$utils();

      var $isJalali = function $isJalali(v) {
        return v.$C === 'jalali';
      };

      var $prettyUnit = U.prettyUnit || U.p;
      var $isUndefined = U.isUndefined || U.u;
      var $padStart = U.padStart || U.s;
      var $monthDiff = U.monthDiff || U.m;
      var $absFloor = U.absFloor || U.a;

      var wrapperOfTruth = function wrapperOfTruth(action) {
        return function () {
          var unsure = action.bind(this).apply(void 0, arguments);
          unsure.$C = this.$C;

          if (unsure.isJalali()) {
            unsure.InitJalali();
          }

          return unsure;
        };
      }; // keep calendar on date manipulation


      proto.startOf = wrapperOfTruth(proto.startOf);
      proto.endOf = wrapperOfTruth(proto.endOf);
      proto.add = wrapperOfTruth(proto.add);
      proto.subtract = wrapperOfTruth(proto.subtract);
      proto.set = wrapperOfTruth(proto.set);
      var oldParse = proto.parse;
      var oldInit = proto.init;
      var oldStartOf = proto.startOf;
      var old$Set = proto.$set;
      var oldAdd = proto.add;
      var oldFormat = proto.format;
      var oldDiff = proto.diff;
      var oldYear = proto.year;
      var oldMonth = proto.month;
      var oldDate = proto.date;
      var oldDaysInMonth = proto.daysInMonth;
      var oldToArray = proto.toArray;
      dayjs.$C = 'gregory'; // First Day Of Week

      dayjs.$fdow = 6; // 0: sunday, ...

      dayjs.calendar = function (calendar) {
        dayjs.$C = calendar;
        return dayjs;
      };

      proto.calendar = function (calendar) {
        var that = this.clone();
        that.$C = calendar;

        if (that.isJalali()) {
          that.InitJalali();
        }

        return that;
      };

      proto.isJalali = function () {
        return $isJalali(this);
      };

      dayjs.en.jmonths = 'Farvardin_Ordibehesht_Khordaad_Tir_Mordaad_Shahrivar_Mehr_Aabaan_Aazar_Dey_Bahman_Esfand'.split('_');
      dayjs.locale('fa', Object.assign({}, fa$1, {}, fa), true);

      var wrapper = function wrapper(date, instance) {
        return dayjs(date, {
          locale: instance.$L,
          utc: instance.$u,
          calendar: instance.$C
        });
      };

      proto.init = function () {
        var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        oldInit.bind(this)(cfg);

        if (this.isJalali()) {
          this.InitJalali();
        }
      };

      proto.parse = function (cfg) {
        var reg;
        this.$C = cfg.calendar || this.$C || dayjs.$C; // eslint-disable-next-line no-cond-assign

        if (cfg.jalali && typeof cfg.date === 'string' && /.*[^Z]$/i.test(cfg.date) // looking for a better way
        && (reg = cfg.date.match(REGEX_PARSE))) {
          // 1397-08-08 or 13970808
          var _jdate$G = jdate.G(parseInt(reg[1], 10), parseInt(reg[2], 10), parseInt(reg[3] || 1, 10)),
              _jdate$G2 = _slicedToArray(_jdate$G, 3),
              y = _jdate$G2[0],
              m = _jdate$G2[1],
              d = _jdate$G2[2];

          cfg.date = "".concat(y, "-").concat(m, "-").concat(d).concat(reg[4] || '');
        }

        return oldParse.bind(this)(cfg);
      };

      proto.InitJalali = function () {
        var _jdate$J = jdate.J(this.$y, this.$M + 1, this.$D),
            _jdate$J2 = _slicedToArray(_jdate$J, 3),
            jy = _jdate$J2[0],
            jm = _jdate$J2[1],
            jd = _jdate$J2[2];

        this.$jy = jy;
        this.$jM = jm - 1;
        this.$jD = jd;
      };

      proto.startOf = function (units, startOf) {
        var _this = this;

        // startOf -> endOf
        if (!$isJalali(this)) {
          return oldStartOf.bind(this)(units, startOf);
        }

        var isStartOf = !$isUndefined(startOf) ? startOf : true;
        var unit = $prettyUnit(units);

        var instanceFactory = function instanceFactory(d, m) {
          var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.$jy;

          var _jdate$G3 = jdate.G(y, m + 1, d),
              _jdate$G4 = _slicedToArray(_jdate$G3, 3),
              gy = _jdate$G4[0],
              gm = _jdate$G4[1],
              gd = _jdate$G4[2];

          var ins = wrapper(new Date(gy, gm - 1, gd), _this);
          return (isStartOf ? ins : ins.endOf(D)).$set('hour', 1); // prevent daylight saving issue in safari
        };

        var WModifier = (this.$W + (7 - dayjs.$fdow)) % 7;

        switch (unit) {
          case Y:
            return isStartOf ? instanceFactory(1, 0) : instanceFactory(0, 0, this.$jy + 1);

          case M:
            return isStartOf ? instanceFactory(1, this.$jM) : instanceFactory(0, (this.$jM + 1) % 12, this.$jy + parseInt((this.$jM + 1) / 12, 10));

          case W:
            return isStartOf ? instanceFactory(this.$jD - WModifier, this.$jM) : instanceFactory(this.$jD + (6 - WModifier), this.$jM);

          default:
            return oldStartOf.bind(this)(units, startOf);
        }
      };

      proto.$set = function (units, _int) {
        var _this2 = this;

        if (!$isJalali(this)) {
          return old$Set.bind(this)(units, _int);
        }

        var unit = $prettyUnit(units);

        var instanceFactory = function instanceFactory(d, m) {
          var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this2.$jy;

          var _jdate$G5 = jdate.G(y, m + 1, d),
              _jdate$G6 = _slicedToArray(_jdate$G5, 3),
              gy = _jdate$G6[0],
              gm = _jdate$G6[1],
              gd = _jdate$G6[2];

          _this2.$d.setFullYear(gy);

          _this2.$d.setMonth(gm - 1);

          _this2.$d.setDate(gd);

          return _this2;
        };

        switch (unit) {
          case DATE:
          case D:
            instanceFactory(_int, this.$jM);
            break;

          case M:
            instanceFactory(this.$jD, _int);
            break;

          case Y:
            instanceFactory(this.$jD, this.$jM, _int);
            break;

          default:
            return old$Set.bind(this)(units, _int);
        }

        this.init();
        return this;
      };

      proto.add = function (number, units) {
        var _this3 = this;

        if (!$isJalali(this)) {
          return oldAdd.bind(this)(number, units);
        }

        number = Number(number); // eslint-disable-line no-param-reassign
        // units === 'ms' hard code here, will update in next release

        var unit = units && (units.length === 1 || units === 'ms') ? units : $prettyUnit(units);

        var instanceFactory = function instanceFactory(u, n) {
          var date = _this3.set(DATE, 1).set(u, n + number);

          return date.set(DATE, Math.min(_this3.$jD, date.daysInMonth()));
        };

        if (['M', M].indexOf(unit) > -1) {
          var n = this.$jM + number;
          var y = n < 0 ? -Math.ceil(-n / 12) : parseInt(n / 12, 10);
          var d = this.$jD;
          var x = this.set(D, 1).add(y, Y).set(M, n - y * 12);
          return x.set(D, Math.min(x.daysInMonth(), d));
        }

        if (['y', Y].indexOf(unit) > -1) {
          return instanceFactory(Y, this.$jy);
        }

        if (['d', D].indexOf(unit) > -1) {
          var date = new Date(this.$d);
          date.setDate(date.getDate() + number);
          return wrapper(date, this);
        }

        return oldAdd.bind(this)(number, units);
      };

      proto.format = function (formatStr, localeObject) {
        var _this4 = this;

        if (!$isJalali(this)) {
          return oldFormat.bind(this)(formatStr, localeObject);
        }

        var str = formatStr || FORMAT_DEFAULT;
        var locale = localeObject || this.$locale();
        var jmonths = locale.jmonths;
        return str.replace(REGEX_FORMAT, function (match) {
          if (match.indexOf('[') > -1) return match.replace(/\[|\]/g, '');

          switch (match) {
            case 'YY':
              return String(_this4.$jy).slice(-2);

            case 'YYYY':
              return String(_this4.$jy);

            case 'M':
              return String(_this4.$jM + 1);

            case 'MM':
              return $padStart(_this4.$jM + 1, 2, '0');

            case 'MMM':
              return jmonths[_this4.$jM].slice(0, 3);

            case 'MMMM':
              return jmonths[_this4.$jM];

            case 'D':
              return String(_this4.$jD);

            case 'DD':
              return $padStart(_this4.$jD, 2, '0');

            default:
              return oldFormat.bind(_this4)(match, localeObject);
          }
        });
      };

      proto.diff = function (input, units, _float) {
        if (!$isJalali(this)) {
          return oldDiff.bind(this)(input, units, _float);
        }

        var unit = $prettyUnit(units);
        var that = dayjs(input);
        var result = $monthDiff(this, that);

        switch (unit) {
          case Y:
            result /= 12;
            break;

          case M:
            break;

          default:
            // milliseconds
            return oldDiff.bind(this)(input, units, _float);
        }

        return _float ? result : $absFloor(result);
      };

      proto.$g = function (input, get, set) {
        if ($isUndefined(input)) return this[get];
        return this.set(set, input);
      };

      proto.year = function (input) {
        if (!$isJalali(this)) {
          return oldYear.bind(this)(input);
        }

        return this.$g(input, '$jy', Y);
      };

      proto.month = function (input) {
        if (!$isJalali(this)) {
          return oldMonth.bind(this)(input);
        }

        return this.$g(input, '$jM', M);
      };

      proto.date = function (input) {
        if (!$isJalali(this)) {
          return oldDate.bind(this)(input);
        }

        return this.$g(input, '$jD', D);
      };

      proto.daysInMonth = function () {
        if (!$isJalali(this)) {
          return oldDaysInMonth.bind(this)();
        }

        return this.endOf(M).$jD;
      };
      /**
       * toArray function moved to official plugin
       * Check function existence before override
       */


      if (oldToArray) {
        proto.toArray = function () {
          if (!$isJalali(this)) {
            return oldToArray.bind(this)();
          }

          return [this.$jy, this.$jM, this.$jD, this.$H, this.$m, this.$s, this.$ms];
        };
      }

      proto.clone = function () {
        return wrapper(this.toDate(), this);
      };
    });

    dayjs_min.extend(plugin);
    var FilterValueDateWrapper = function (_a) {
        var children = _a.children;
        return (React__default['default'].createElement(MuiPickersUtilsProvider, { utils: DayjsUtils , locale: "fa"  }, children));
    };
    var FilterValueDate = function (_a) {
        var filterIndex = _a.filterIndex, valIndex = _a.valIndex, onSetFilter = _a.onSetFilter, value = _a.value, classes = _a.classes, label = _a.label;
        var handleChange = function (_) { return function (date) {
            if (!date)
                return;
            onSetFilter(filterIndex, valIndex, date.toISOString());
        }; };
        return (React__default['default'].createElement(FilterValueDateWrapper, null,
            React__default['default'].createElement(DatePicker, { disableToolbar: true, variant: "inline", format: "MM/dd/yyyy", margin: "normal", id: "date-picker-inline", value: value, className: classes === null || classes === void 0 ? void 0 : classes.root, key: "date-" + valIndex, onChange: handleChange(), 
                //   minDate={calMinDate}
                //   maxDate={calMaxDate}
                // showTodayButton={true}
                // okLabel={t("ok")}
                // cancelLabel={t("cancel")}
                // clearLabel={t("clear")}
                // todayLabel={t("today")}
                label: label, 
                // autoOk
                inputVariant: "standard", InputProps: { classes: { root: classes === null || classes === void 0 ? void 0 : classes.input } }, 
                //   format={calendar === "jalali" ? "jYYYY/jMM/jDD" : "DD MMM YYYY"}
                //   openTo={openTo ? openTo : "date"}
                animateYearScrolling: true })));
    };

    var useStyles$8 = makeStyles(function () {
        return createStyles({ input: { borderColor: "transparent" } });
    });
    var FilterColumn = React.memo(function (_a) {
        var value = _a.value, filterIndex = _a.filterIndex, columns = _a.columns, columnIndex = _a.columnIndex, classes = _a.classes;
        var t = function (v) { return v; };
        var inClasses = useStyles$8();
        var _b = React.useState(""), inputValue = _b[0], setInputValue = _b[1];
        var filterSetColumn = useTStoreActions(function (actions) { return actions.filterSetColumn; });
        // const allOptions = value && columns ? [value, ...columns] : columns;
        // if (!columns) return null;
        return (React__default['default'].createElement(Autocomplete$1, { value: value, onChange: function (_, column) {
                if (!column || typeof column === "string")
                    return;
                filterSetColumn({
                    column: column,
                    columnIndex: columnIndex,
                    filterIndex: filterIndex,
                });
            }, freeSolo: true, inputValue: inputValue, onInputChange: function (_, newInputValue) {
                setInputValue(newInputValue);
            }, options: columns, className: clsx(inClasses.input, classes === null || classes === void 0 ? void 0 : classes.root), getOptionLabel: function (option) { return (option ? option.label : ""); }, getOptionSelected: function (option, value) {
                return (option === null || option === void 0 ? void 0 : option.label) ? option.label === value.label : true;
            }, renderInput: function (params) { return (React__default['default'].createElement(TextField$1, __assign({}, params, { classes: { root: classes === null || classes === void 0 ? void 0 : classes.input }, label: t("column"), 
                // InputProps={{ ...params.InputProps }}
                variant: "standard" }))); } }));
    });
    var FilterOperations = React.memo(function (_a) {
        var operation = _a.operation, filterIndex = _a.filterIndex, columnType = _a.columnType, classes = _a.classes;
        var t = function (v) { return v; };
        var inClasses = useStyles$8();
        var filterSetOperation = useTStoreActions(function (actions) { return actions.filterSetOperation; });
        var _b = React.useState(operations(t).commonOperations), options = _b[0], setOptions = _b[1];
        var _c = React.useState(""), inputValue = _c[0], setInputValue = _c[1];
        var lastType = React.useRef("");
        React.useEffect(function () {
            if (!columnType)
                return;
            if (lastType.current !== columnType && columnType) {
                lastType.current = columnType;
                switch (columnType) {
                    case "geographic":
                        setOptions(__spreadArray([], operations(t).mapOptions));
                        break;
                    case "number":
                        setOptions(__spreadArray(__spreadArray([], operations(t).commonOperations), operations(t).numericOptions));
                        break;
                    case "string":
                        setOptions(__spreadArray(__spreadArray([], operations(t).commonOperations), operations(t).stringOptions));
                        break;
                    case "date":
                        setOptions(__spreadArray(__spreadArray([], operations(t).commonOperations), operations(t).dateOptions));
                        break;
                    default:
                        setOptions(operations(t).commonOperations);
                }
            }
        }, [columnType, t]);
        return (React__default['default'].createElement(Autocomplete$1, { autoComplete: true, value: operation, onChange: function (_, operation) {
                if (!operation || typeof operation === "string")
                    return;
                filterSetOperation({ operation: operation, filterIndex: filterIndex });
            }, freeSolo: true, inputValue: inputValue, onInputChange: function (_, newInputValue) {
                setInputValue(newInputValue);
            }, options: options, className: clsx(inClasses.input, classes === null || classes === void 0 ? void 0 : classes.root), getOptionLabel: function (option) { var _a; return (_a = option === null || option === void 0 ? void 0 : option.name) !== null && _a !== void 0 ? _a : ""; }, getOptionSelected: function (option, value) {
                return !(option === null || option === void 0 ? void 0 : option.name) ? option.name === value.name : true;
            }, renderInput: function (params) { return (React__default['default'].createElement("div", { style: { display: "flex", alignItems: "center" } },
                React__default['default'].createElement(TextField$1, __assign({}, params, { classes: { root: classes === null || classes === void 0 ? void 0 : classes.input }, label: t("op"), InputProps: __assign({}, params.InputProps), variant: "standard" })))); } }));
    });
    var FilterValues = React.memo(function (_a) {
        var filterIndex = _a.filterIndex, val = _a.val, valIndex = _a.valIndex, columnType = _a.columnType, label = _a.label, classes = _a.classes;
        var filterSetValue = useTStoreActions(function (actions) { return actions.filterSetValue; });
        var onSetFilter = function (filterIndex, valueIndex, value) {
            filterSetValue({ filterIndex: filterIndex, valueIndex: valueIndex, value: value });
        };
        var FilterValue = undefined;
        // if (columnType === "geographic") {
        //   FilterValue = FilterMaps;
        // } else
        if (columnType === "date") {
            FilterValue = FilterValueDate;
        }
        else if (columnType === "number") {
            FilterValue = SimpleNumericInput;
        }
        else {
            FilterValue = SimpleStringInput;
        }
        return (React__default['default'].createElement(FilterValue, { filterIndex: filterIndex, valIndex: valIndex, onSetFilter: onSetFilter, value: val, label: label, classes: classes }));
    });

    var TrashIcon = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-trash-can-outline" },
            React__default['default'].createElement("path", { d: "M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" }),
            " "));
    };

    // import CollapseVertical from "/assets/icons/CollapseVertical";
    // import DeleteConfirm from "/components/actions/DeleteConfirm";
    // import { UISchema } from "/models/graph";
    // import { useDispatch } from "react-redux";
    // import { filterDelete, filterSetName } from "../services/filterActions";
    // import { useTranslation } from "/app/i18n";
    // import SimpleWarning from "/components/info/SimpleWarning";
    var useStyles$7 = makeStyles(function (theme) {
        return createStyles({
            deleteButton: {
            // display: "flex",
            // justifyContent: "flex-end",
            },
            inputs: { width: 150 },
            autoComplete: { margin: theme.spacing(1) },
        });
    });
    var FilterItem = function (_a) {
        var _b, _c;
        var filter = _a.filter, columns = _a.columns, index = _a.index;
        //   const [notExpanded, setExpanded] = useState<any>({});
        var t = function (v) { return v; };
        var classes = useStyles$7();
        var deleteFilter = useTStoreActions(function (actions) { return actions.filterDelete; });
        //   const dispatch = useDispatch();
        if (!((_b = filter === null || filter === void 0 ? void 0 : filter.column) === null || _b === void 0 ? void 0 : _b.length))
            return null;
        //   const { typedSchema, remainingSchema } = filteredSchema(filter, schema);
        //   const deleteWarning = `${t("deleteConfirmMsg")} filter ${filter.name}`;
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(IconButton$1, { size: "small", className: classes.deleteButton, onClick: function () { return deleteFilter({ index: index }); } },
                React__default['default'].createElement(TrashIcon, null)), filter === null || filter === void 0 ? void 0 :
            filter.column.map(function (column, columnIndex) {
                var _a;
                return (React__default['default'].createElement(FilterColumn, { key: ((_a = filter === null || filter === void 0 ? void 0 : filter.column[0]) === null || _a === void 0 ? void 0 : _a.type) + "-" + columnIndex, filterIndex: index, value: column, columnIndex: columnIndex, columns: columns, classes: { root: classes.autoComplete, input: classes.inputs } }));
            }),
            React__default['default'].createElement(FilterOperations, { columnType: (_c = filter === null || filter === void 0 ? void 0 : filter.column[0]) === null || _c === void 0 ? void 0 : _c.type, filterIndex: index, operation: filter.operation, classes: { root: classes.autoComplete, input: classes.inputs } }),
            filter.value.map(function (val, valIndex) {
                var _a, _b;
                return (React__default['default'].createElement(FilterValues, { key: ((_a = filter === null || filter === void 0 ? void 0 : filter.column[0]) === null || _a === void 0 ? void 0 : _a.type) + "-" + valIndex, filterIndex: index, valIndex: valIndex, val: val, columnType: (_b = filter === null || filter === void 0 ? void 0 : filter.column[0]) === null || _b === void 0 ? void 0 : _b.type, label: t("value"), classes: { root: classes.autoComplete, input: classes.inputs } }));
            })));
    };

    var CloseIcon = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-close" },
            React__default['default'].createElement("path", { d: "M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" }),
            " "));
    };

    var useStyles$6 = makeStyles(function (theme) {
        return createStyles({
            rootFilter: {
                position: "absolute",
                backgroundColor: "#FFF",
                padding: theme.spacing(1),
                top: 20,
                left: 20,
                boxShadow: theme.shadows[2],
            },
            filterWrapper: {
                display: "flex",
                alignItems: "center",
            },
        });
    });
    var TableFilter = function (_a) {
        var classes = useStyles$6();
        var showFilter = useTStoreState(function (state) { return state.showFilter; });
        var toggleShowFilter = useTStoreActions(function (actions) { return actions.toggleShowFilter; });
        var handleClose = function () {
            toggleShowFilter(false);
        };
        // const filterAdd = useStoreActions((actions) => actions.filterAdd);
        var filters = useTStoreState(function (state) { return state.filters; });
        if (!showFilter)
            return null;
        return (React__default['default'].createElement("div", { className: classes.rootFilter },
            React__default['default'].createElement(IconButton$1, { size: "small", onClick: handleClose, style: { float: "right" } },
                React__default['default'].createElement(CloseIcon, null)),
            filters.map(function (filter, index) { return (React__default['default'].createElement("div", { key: filter.id, className: classes.filterWrapper },
                React__default['default'].createElement(FilterItem, { filter: filter, index: index, columns: [] }))); }),
            React__default['default'].createElement("div", { style: { width: "100%" } })));
    };

    var useCalcTableWidth = function (columns, width) {
        var totalWidth = useTableSizeState().totalWidth;
        var calcRowWidth = React.useCallback(function () {
            if (totalWidth)
                return totalWidth > width ? totalWidth : width;
            var totalColumnSize = columns.reduce(function (acc, cur) {
                return acc + ((cur === null || cur === void 0 ? void 0 : cur.minWidth) || ROW_MIN_WIDTH + RESIZE_HANDLE_WIDTH);
            }, CHECKBOX_SIZE);
            return totalColumnSize > width ? totalColumnSize : width;
        }, [columns, width, totalWidth]);
        return calcRowWidth;
    };
    function chooseClass(common, user) {
        return user ? user : common;
    }

    var useStyles$5 = makeStyles(function (theme) {
        return createStyles({
            vtContainerRoot: { width: "100%" },
            commonVTContainer: { border: "solid 1px " + theme.palette.grey[300] },
        });
    });
    var VirtualTableContainer = function (_a) {
        var children = _a.children, classes = _a.classes, width = _a.width;
        var containerClasses = useStyles$5();
        var direction = themeLanguage.useLanguageState().direction;
        return (React__default['default'].createElement("div", { className: clsx(chooseClass(containerClasses.commonVTContainer, classes === null || classes === void 0 ? void 0 : classes.root), containerClasses.vtContainerRoot), style: { width: width, direction: direction } }, children));
    };

    var Overlay = function (_a) {
        return (React__default['default'].createElement("div", { style: {
                position: "absolute",
                pointerEvents: "none",
                right: 0,
                left: 0,
                top: 0,
                bottom: 0,
                overflow: "hidden",
            } }));
    };

    function _extends$1() {
      _extends$1 = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends$1.apply(this, arguments);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    var safeIsNaN = Number.isNaN ||
        function ponyfill(value) {
            return typeof value === 'number' && value !== value;
        };
    function isEqual(first, second) {
        if (first === second) {
            return true;
        }
        if (safeIsNaN(first) && safeIsNaN(second)) {
            return true;
        }
        return false;
    }
    function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
            return false;
        }
        for (var i = 0; i < newInputs.length; i++) {
            if (!isEqual(newInputs[i], lastInputs[i])) {
                return false;
            }
        }
        return true;
    }

    function memoizeOne(resultFn, isEqual) {
        if (isEqual === void 0) { isEqual = areInputsEqual; }
        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;
        function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newArgs[_i] = arguments[_i];
            }
            if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
                return lastResult;
            }
            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
        }
        return memoized;
    }

    // Animation frame based implementation of setTimeout.
    // Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    var now = hasNativePerformanceNow ? function () {
      return performance.now();
    } : function () {
      return Date.now();
    };
    function cancelTimeout(timeoutID) {
      cancelAnimationFrame(timeoutID.id);
    }
    function requestTimeout(callback, delay) {
      var start = now();

      function tick() {
        if (now() - start >= delay) {
          callback.call(null);
        } else {
          timeoutID.id = requestAnimationFrame(tick);
        }
      }

      var timeoutID = {
        id: requestAnimationFrame(tick)
      };
      return timeoutID;
    }
    var cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
    // Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).
    // Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.
    // The safest way to check this is to intentionally set a negative offset,
    // and then verify that the subsequent "scroll" event matches the negative offset.
    // If it does not match, then we can assume a non-standard RTL scroll implementation.

    function getRTLOffsetType(recalculate) {
      if (recalculate === void 0) {
        recalculate = false;
      }

      if (cachedRTLResult === null || recalculate) {
        var outerDiv = document.createElement('div');
        var outerStyle = outerDiv.style;
        outerStyle.width = '50px';
        outerStyle.height = '50px';
        outerStyle.overflow = 'scroll';
        outerStyle.direction = 'rtl';
        var innerDiv = document.createElement('div');
        var innerStyle = innerDiv.style;
        innerStyle.width = '100px';
        innerStyle.height = '100px';
        outerDiv.appendChild(innerDiv);
        document.body.appendChild(outerDiv);

        if (outerDiv.scrollLeft > 0) {
          cachedRTLResult = 'positive-descending';
        } else {
          outerDiv.scrollLeft = 1;

          if (outerDiv.scrollLeft === 0) {
            cachedRTLResult = 'negative';
          } else {
            cachedRTLResult = 'positive-ascending';
          }
        }

        document.body.removeChild(outerDiv);
        return cachedRTLResult;
      }

      return cachedRTLResult;
    }

    if (process.env.NODE_ENV !== 'production') ;

    var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;

    var defaultItemKey$1 = function defaultItemKey(index, data) {
      return index;
    }; // In DEV mode, this Set helps us only log a warning once per component instance.
    // This avoids spamming the console every time a render happens.


    var devWarningsDirection = null;
    var devWarningsTagName$1 = null;

    if (process.env.NODE_ENV !== 'production') {
      if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {
        devWarningsDirection =
        /*#__PURE__*/
        new WeakSet();
        devWarningsTagName$1 =
        /*#__PURE__*/
        new WeakSet();
      }
    }

    function createListComponent(_ref) {
      var _class, _temp;

      var getItemOffset = _ref.getItemOffset,
          getEstimatedTotalSize = _ref.getEstimatedTotalSize,
          getItemSize = _ref.getItemSize,
          getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,
          getStartIndexForOffset = _ref.getStartIndexForOffset,
          getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,
          initInstanceProps = _ref.initInstanceProps,
          shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,
          validateProps = _ref.validateProps;
      return _temp = _class =
      /*#__PURE__*/
      function (_PureComponent) {
        _inheritsLoose(List, _PureComponent);

        // Always use explicit constructor for React components.
        // It produces less code after transpilation. (#26)
        // eslint-disable-next-line no-useless-constructor
        function List(props) {
          var _this;

          _this = _PureComponent.call(this, props) || this;
          _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_assertThisInitialized(_this)));
          _this._outerRef = void 0;
          _this._resetIsScrollingTimeoutId = null;
          _this.state = {
            instance: _assertThisInitialized(_assertThisInitialized(_this)),
            isScrolling: false,
            scrollDirection: 'forward',
            scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,
            scrollUpdateWasRequested: false
          };
          _this._callOnItemsRendered = void 0;
          _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
            return _this.props.onItemsRendered({
              overscanStartIndex: overscanStartIndex,
              overscanStopIndex: overscanStopIndex,
              visibleStartIndex: visibleStartIndex,
              visibleStopIndex: visibleStopIndex
            });
          });
          _this._callOnScroll = void 0;
          _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {
            return _this.props.onScroll({
              scrollDirection: scrollDirection,
              scrollOffset: scrollOffset,
              scrollUpdateWasRequested: scrollUpdateWasRequested
            });
          });
          _this._getItemStyle = void 0;

          _this._getItemStyle = function (index) {
            var _this$props = _this.props,
                direction = _this$props.direction,
                itemSize = _this$props.itemSize,
                layout = _this$props.layout;

            var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);

            var style;

            if (itemStyleCache.hasOwnProperty(index)) {
              style = itemStyleCache[index];
            } else {
              var _offset = getItemOffset(_this.props, index, _this._instanceProps);

              var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction "horizontal"

              var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
              var isRtl = direction === 'rtl';
              var offsetHorizontal = isHorizontal ? _offset : 0;
              itemStyleCache[index] = style = {
                position: 'absolute',
                left: isRtl ? undefined : offsetHorizontal,
                right: isRtl ? offsetHorizontal : undefined,
                top: !isHorizontal ? _offset : 0,
                height: !isHorizontal ? size : '100%',
                width: isHorizontal ? size : '100%'
              };
            }

            return style;
          };

          _this._getItemStyleCache = void 0;
          _this._getItemStyleCache = memoizeOne(function (_, __, ___) {
            return {};
          });

          _this._onScrollHorizontal = function (event) {
            var _event$currentTarget = event.currentTarget,
                clientWidth = _event$currentTarget.clientWidth,
                scrollLeft = _event$currentTarget.scrollLeft,
                scrollWidth = _event$currentTarget.scrollWidth;

            _this.setState(function (prevState) {
              if (prevState.scrollOffset === scrollLeft) {
                // Scroll position may have been updated by cDM/cDU,
                // In which case we don't need to trigger another render,
                // And we don't want to update state.isScrolling.
                return null;
              }

              var direction = _this.props.direction;
              var scrollOffset = scrollLeft;

              if (direction === 'rtl') {
                // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
                // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
                // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.
                // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.
                switch (getRTLOffsetType()) {
                  case 'negative':
                    scrollOffset = -scrollLeft;
                    break;

                  case 'positive-descending':
                    scrollOffset = scrollWidth - clientWidth - scrollLeft;
                    break;
                }
              } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.


              scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
              return {
                isScrolling: true,
                scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',
                scrollOffset: scrollOffset,
                scrollUpdateWasRequested: false
              };
            }, _this._resetIsScrollingDebounced);
          };

          _this._onScrollVertical = function (event) {
            var _event$currentTarget2 = event.currentTarget,
                clientHeight = _event$currentTarget2.clientHeight,
                scrollHeight = _event$currentTarget2.scrollHeight,
                scrollTop = _event$currentTarget2.scrollTop;

            _this.setState(function (prevState) {
              if (prevState.scrollOffset === scrollTop) {
                // Scroll position may have been updated by cDM/cDU,
                // In which case we don't need to trigger another render,
                // And we don't want to update state.isScrolling.
                return null;
              } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.


              var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
              return {
                isScrolling: true,
                scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',
                scrollOffset: scrollOffset,
                scrollUpdateWasRequested: false
              };
            }, _this._resetIsScrollingDebounced);
          };

          _this._outerRefSetter = function (ref) {
            var outerRef = _this.props.outerRef;
            _this._outerRef = ref;

            if (typeof outerRef === 'function') {
              outerRef(ref);
            } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {
              outerRef.current = ref;
            }
          };

          _this._resetIsScrollingDebounced = function () {
            if (_this._resetIsScrollingTimeoutId !== null) {
              cancelTimeout(_this._resetIsScrollingTimeoutId);
            }

            _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
          };

          _this._resetIsScrolling = function () {
            _this._resetIsScrollingTimeoutId = null;

            _this.setState({
              isScrolling: false
            }, function () {
              // Clear style cache after state update has been committed.
              // This way we don't break pure sCU for items that don't use isScrolling param.
              _this._getItemStyleCache(-1, null);
            });
          };

          return _this;
        }

        List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          validateSharedProps$1(nextProps, prevState);
          validateProps(nextProps);
          return null;
        };

        var _proto = List.prototype;

        _proto.scrollTo = function scrollTo(scrollOffset) {
          scrollOffset = Math.max(0, scrollOffset);
          this.setState(function (prevState) {
            if (prevState.scrollOffset === scrollOffset) {
              return null;
            }

            return {
              scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',
              scrollOffset: scrollOffset,
              scrollUpdateWasRequested: true
            };
          }, this._resetIsScrollingDebounced);
        };

        _proto.scrollToItem = function scrollToItem(index, align) {
          if (align === void 0) {
            align = 'auto';
          }

          var itemCount = this.props.itemCount;
          var scrollOffset = this.state.scrollOffset;
          index = Math.max(0, Math.min(index, itemCount - 1));
          this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));
        };

        _proto.componentDidMount = function componentDidMount() {
          var _this$props2 = this.props,
              direction = _this$props2.direction,
              initialScrollOffset = _this$props2.initialScrollOffset,
              layout = _this$props2.layout;

          if (typeof initialScrollOffset === 'number' && this._outerRef != null) {
            var outerRef = this._outerRef; // TODO Deprecate direction "horizontal"

            if (direction === 'horizontal' || layout === 'horizontal') {
              outerRef.scrollLeft = initialScrollOffset;
            } else {
              outerRef.scrollTop = initialScrollOffset;
            }
          }

          this._callPropsCallbacks();
        };

        _proto.componentDidUpdate = function componentDidUpdate() {
          var _this$props3 = this.props,
              direction = _this$props3.direction,
              layout = _this$props3.layout;
          var _this$state = this.state,
              scrollOffset = _this$state.scrollOffset,
              scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;

          if (scrollUpdateWasRequested && this._outerRef != null) {
            var outerRef = this._outerRef; // TODO Deprecate direction "horizontal"

            if (direction === 'horizontal' || layout === 'horizontal') {
              if (direction === 'rtl') {
                // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.
                // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).
                // So we need to determine which browser behavior we're dealing with, and mimic it.
                switch (getRTLOffsetType()) {
                  case 'negative':
                    outerRef.scrollLeft = -scrollOffset;
                    break;

                  case 'positive-ascending':
                    outerRef.scrollLeft = scrollOffset;
                    break;

                  default:
                    var clientWidth = outerRef.clientWidth,
                        scrollWidth = outerRef.scrollWidth;
                    outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                    break;
                }
              } else {
                outerRef.scrollLeft = scrollOffset;
              }
            } else {
              outerRef.scrollTop = scrollOffset;
            }
          }

          this._callPropsCallbacks();
        };

        _proto.componentWillUnmount = function componentWillUnmount() {
          if (this._resetIsScrollingTimeoutId !== null) {
            cancelTimeout(this._resetIsScrollingTimeoutId);
          }
        };

        _proto.render = function render() {
          var _this$props4 = this.props,
              children = _this$props4.children,
              className = _this$props4.className,
              direction = _this$props4.direction,
              height = _this$props4.height,
              innerRef = _this$props4.innerRef,
              innerElementType = _this$props4.innerElementType,
              innerTagName = _this$props4.innerTagName,
              itemCount = _this$props4.itemCount,
              itemData = _this$props4.itemData,
              _this$props4$itemKey = _this$props4.itemKey,
              itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,
              layout = _this$props4.layout,
              outerElementType = _this$props4.outerElementType,
              outerTagName = _this$props4.outerTagName,
              style = _this$props4.style,
              useIsScrolling = _this$props4.useIsScrolling,
              width = _this$props4.width;
          var isScrolling = this.state.isScrolling; // TODO Deprecate direction "horizontal"

          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
          var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;

          var _this$_getRangeToRend = this._getRangeToRender(),
              startIndex = _this$_getRangeToRend[0],
              stopIndex = _this$_getRangeToRend[1];

          var items = [];

          if (itemCount > 0) {
            for (var _index = startIndex; _index <= stopIndex; _index++) {
              items.push(React.createElement(children, {
                data: itemData,
                key: itemKey(_index, itemData),
                index: _index,
                isScrolling: useIsScrolling ? isScrolling : undefined,
                style: this._getItemStyle(_index)
              }));
            }
          } // Read this value AFTER items have been created,
          // So their actual sizes (if variable) are taken into consideration.


          var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);
          return React.createElement(outerElementType || outerTagName || 'div', {
            className: className,
            onScroll: onScroll,
            ref: this._outerRefSetter,
            style: _extends$1({
              position: 'relative',
              height: height,
              width: width,
              overflow: 'auto',
              WebkitOverflowScrolling: 'touch',
              willChange: 'transform',
              direction: direction
            }, style)
          }, React.createElement(innerElementType || innerTagName || 'div', {
            children: items,
            ref: innerRef,
            style: {
              height: isHorizontal ? '100%' : estimatedTotalSize,
              pointerEvents: isScrolling ? 'none' : undefined,
              width: isHorizontal ? estimatedTotalSize : '100%'
            }
          }));
        };

        _proto._callPropsCallbacks = function _callPropsCallbacks() {
          if (typeof this.props.onItemsRendered === 'function') {
            var itemCount = this.props.itemCount;

            if (itemCount > 0) {
              var _this$_getRangeToRend2 = this._getRangeToRender(),
                  _overscanStartIndex = _this$_getRangeToRend2[0],
                  _overscanStopIndex = _this$_getRangeToRend2[1],
                  _visibleStartIndex = _this$_getRangeToRend2[2],
                  _visibleStopIndex = _this$_getRangeToRend2[3];

              this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
            }
          }

          if (typeof this.props.onScroll === 'function') {
            var _this$state2 = this.state,
                _scrollDirection = _this$state2.scrollDirection,
                _scrollOffset = _this$state2.scrollOffset,
                _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;

            this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
          }
        }; // Lazily create and cache item styles while scrolling,
        // So that pure component sCU will prevent re-renders.
        // We maintain this cache, and pass a style prop rather than index,
        // So that List can clear cached styles and force item re-render if necessary.


        _proto._getRangeToRender = function _getRangeToRender() {
          var _this$props5 = this.props,
              itemCount = _this$props5.itemCount,
              overscanCount = _this$props5.overscanCount;
          var _this$state3 = this.state,
              isScrolling = _this$state3.isScrolling,
              scrollDirection = _this$state3.scrollDirection,
              scrollOffset = _this$state3.scrollOffset;

          if (itemCount === 0) {
            return [0, 0, 0, 0];
          }

          var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);
          var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.
          // If there isn't at least one extra item, tab loops back around.

          var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;
          var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;
          return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
        };

        return List;
      }(React.PureComponent), _class.defaultProps = {
        direction: 'ltr',
        itemData: undefined,
        layout: 'vertical',
        overscanCount: 2,
        useIsScrolling: false
      }, _temp;
    } // NOTE: I considered further wrapping individual items with a pure ListItem component.
    // This would avoid ever calling the render function for the same index more than once,
    // But it would also add the overhead of a lot of components/fibers.
    // I assume people already do this (render function returning a class component),
    // So my doing it would just unnecessarily double the wrappers.

    var validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {
      var children = _ref2.children,
          direction = _ref2.direction,
          height = _ref2.height,
          layout = _ref2.layout,
          innerTagName = _ref2.innerTagName,
          outerTagName = _ref2.outerTagName,
          width = _ref2.width;
      var instance = _ref3.instance;

      if (process.env.NODE_ENV !== 'production') {
        if (innerTagName != null || outerTagName != null) {
          if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
            devWarningsTagName$1.add(instance);
            console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');
          }
        } // TODO Deprecate direction "horizontal"


        var isHorizontal = direction === 'horizontal' || layout === 'horizontal';

        switch (direction) {
          case 'horizontal':
          case 'vertical':
            if (devWarningsDirection && !devWarningsDirection.has(instance)) {
              devWarningsDirection.add(instance);
              console.warn('The direction prop should be either "ltr" (default) or "rtl". ' + 'Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
            }

            break;

          case 'ltr':
          case 'rtl':
            // Valid values
            break;

          default:
            throw Error('An invalid "direction" prop has been specified. ' + 'Value should be either "ltr" or "rtl". ' + ("\"" + direction + "\" was specified."));
        }

        switch (layout) {
          case 'horizontal':
          case 'vertical':
            // Valid values
            break;

          default:
            throw Error('An invalid "layout" prop has been specified. ' + 'Value should be either "horizontal" or "vertical". ' + ("\"" + layout + "\" was specified."));
        }

        if (children == null) {
          throw Error('An invalid "children" prop has been specified. ' + 'Value should be a React component. ' + ("\"" + (children === null ? 'null' : typeof children) + "\" was specified."));
        }

        if (isHorizontal && typeof width !== 'number') {
          throw Error('An invalid "width" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + ("\"" + (width === null ? 'null' : typeof width) + "\" was specified."));
        } else if (!isHorizontal && typeof height !== 'number') {
          throw Error('An invalid "height" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + ("\"" + (height === null ? 'null' : typeof height) + "\" was specified."));
        }
      }
    };

    var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;

    var getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {
      var _ref = props,
          itemSize = _ref.itemSize;
      var itemMetadataMap = instanceProps.itemMetadataMap,
          lastMeasuredIndex = instanceProps.lastMeasuredIndex;

      if (index > lastMeasuredIndex) {
        var offset = 0;

        if (lastMeasuredIndex >= 0) {
          var itemMetadata = itemMetadataMap[lastMeasuredIndex];
          offset = itemMetadata.offset + itemMetadata.size;
        }

        for (var i = lastMeasuredIndex + 1; i <= index; i++) {
          var size = itemSize(i);
          itemMetadataMap[i] = {
            offset: offset,
            size: size
          };
          offset += size;
        }

        instanceProps.lastMeasuredIndex = index;
      }

      return itemMetadataMap[index];
    };

    var findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {
      var itemMetadataMap = instanceProps.itemMetadataMap,
          lastMeasuredIndex = instanceProps.lastMeasuredIndex;
      var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;

      if (lastMeasuredItemOffset >= offset) {
        // If we've already measured items within this range just use a binary search as it's faster.
        return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);
      } else {
        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
        // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.
        // The overall complexity for this approach is O(log n).
        return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
      }
    };

    var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {
      while (low <= high) {
        var middle = low + Math.floor((high - low) / 2);
        var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;

        if (currentOffset === offset) {
          return middle;
        } else if (currentOffset < offset) {
          low = middle + 1;
        } else if (currentOffset > offset) {
          high = middle - 1;
        }
      }

      if (low > 0) {
        return low - 1;
      } else {
        return 0;
      }
    };

    var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {
      var itemCount = props.itemCount;
      var interval = 1;

      while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {
        index += interval;
        interval *= 2;
      }

      return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
    };

    var getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {
      var itemCount = _ref2.itemCount;
      var itemMetadataMap = _ref3.itemMetadataMap,
          estimatedItemSize = _ref3.estimatedItemSize,
          lastMeasuredIndex = _ref3.lastMeasuredIndex;
      var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.
      // https://github.com/bvaughn/react-window/pull/138

      if (lastMeasuredIndex >= itemCount) {
        lastMeasuredIndex = itemCount - 1;
      }

      if (lastMeasuredIndex >= 0) {
        var itemMetadata = itemMetadataMap[lastMeasuredIndex];
        totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
      }

      var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
      var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
      return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
    };

    var VariableSizeList =
    /*#__PURE__*/
    createListComponent({
      getItemOffset: function getItemOffset(props, index, instanceProps) {
        return getItemMetadata$1(props, index, instanceProps).offset;
      },
      getItemSize: function getItemSize(props, index, instanceProps) {
        return instanceProps.itemMetadataMap[index].size;
      },
      getEstimatedTotalSize: getEstimatedTotalSize,
      getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {
        var direction = props.direction,
            height = props.height,
            layout = props.layout,
            width = props.width; // TODO Deprecate direction "horizontal"

        var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
        var size = isHorizontal ? width : height;
        var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,
        // To ensure it reflects actual measurements instead of just estimates.

        var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);
        var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));
        var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);

        if (align === 'smart') {
          if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
            align = 'auto';
          } else {
            align = 'center';
          }
        }

        switch (align) {
          case 'start':
            return maxOffset;

          case 'end':
            return minOffset;

          case 'center':
            return Math.round(minOffset + (maxOffset - minOffset) / 2);

          case 'auto':
          default:
            if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
              return scrollOffset;
            } else if (scrollOffset < minOffset) {
              return minOffset;
            } else {
              return maxOffset;
            }

        }
      },
      getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {
        return findNearestItem$1(props, instanceProps, offset);
      },
      getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
        var direction = props.direction,
            height = props.height,
            itemCount = props.itemCount,
            layout = props.layout,
            width = props.width; // TODO Deprecate direction "horizontal"

        var isHorizontal = direction === 'horizontal' || layout === 'horizontal';
        var size = isHorizontal ? width : height;
        var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
        var maxOffset = scrollOffset + size;
        var offset = itemMetadata.offset + itemMetadata.size;
        var stopIndex = startIndex;

        while (stopIndex < itemCount - 1 && offset < maxOffset) {
          stopIndex++;
          offset += getItemMetadata$1(props, stopIndex, instanceProps).size;
        }

        return stopIndex;
      },
      initInstanceProps: function initInstanceProps(props, instance) {
        var _ref4 = props,
            estimatedItemSize = _ref4.estimatedItemSize;
        var instanceProps = {
          itemMetadataMap: {},
          estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
          lastMeasuredIndex: -1
        };

        instance.resetAfterIndex = function (index, shouldForceUpdate) {
          if (shouldForceUpdate === void 0) {
            shouldForceUpdate = true;
          }

          instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,
          // But since styles are only cached while scrolling is in progress-
          // It seems an unnecessary optimization.
          // It's unlikely that resetAfterIndex() will be called while a user is scrolling.

          instance._getItemStyleCache(-1);

          if (shouldForceUpdate) {
            instance.forceUpdate();
          }
        };

        return instanceProps;
      },
      shouldResetStyleCacheOnItemSizeChange: false,
      validateProps: function validateProps(_ref5) {
        var itemSize = _ref5.itemSize;

        if (process.env.NODE_ENV !== 'production') {
          if (typeof itemSize !== 'function') {
            throw Error('An invalid "itemSize" prop has been specified. ' + 'Value should be a function. ' + ("\"" + (itemSize === null ? 'null' : typeof itemSize) + "\" was specified."));
          }
        }
      }
    });

    var useCellStyles = makeStyles(function () {
        return createStyles({
            rowCell: {},
            simpleCell: {
                fontFamily: "inherit",
            },
        });
    });
    var SimpleTableCell = function (_a) {
        var value = _a.value, className = _a.className;
        var classes = useCellStyles();
        return (React__default['default'].createElement(Typography$1, { align: "center", className: clsx(classes.simpleCell, className) }, value));
    };
    var Cell = function (_a) {
        var _b;
        var label = _a.label, _c = _a.minWidth, minWidth = _c === void 0 ? ROW_MIN_WIDTH : _c, colKey = _a.colKey, _d = _a.CellComponent, CellComponent = _d === void 0 ? SimpleTableCell : _d; _a.HeaderComponent; _a.visible; _a.sorted; var row = _a.row, rowIndex = _a.rowIndex; _a.colIndex; _a.columnsLength; 
        var // currentWidths,
        classes = _a.classes; _a.sticky; _a.custom; _a.isScrolling; var rest = __rest(_a, ["label", "minWidth", "colKey", "CellComponent", "HeaderComponent", "visible", "sorted", "row", "rowIndex", "colIndex", "columnsLength", "classes", "sticky", "custom", "isScrolling"]);
        var cellClasses = useCellStyles();
        // const handleW = colIndex === columnsLength - 1 ? 0 : RESIZE_HANDLE_WIDTH;
        var currentWidths = useTableSizeState().currentWidths;
        var calcMinWidth = currentWidths[rest[DATA_FIELD]]
            ? currentWidths[rest[DATA_FIELD]] + RESIZE_HANDLE_WIDTH
            : minWidth + RESIZE_HANDLE_WIDTH;
        var value = typeof row[colKey] === "object" ? (_b = row[colKey]) === null || _b === void 0 ? void 0 : _b.value : row[colKey];
        return (React__default['default'].createElement("div", __assign({}, rest, { key: colKey, style: {
                minWidth: calcMinWidth || minWidth,
                width: calcMinWidth || minWidth,
                overflow: "hidden",
                textOverflow: "ellipsis",
                whiteSpace: "normal",
            }, className: clsx(
            // commonClasses.tableCell,
            cellClasses.rowCell, classes === null || classes === void 0 ? void 0 : classes.root
            // { [classes.evenRow]: index % 2 === 0 },
            // { [classes.oddRow]: index % 2 !== 0 }
            ) }),
            React__default['default'].createElement(CellComponent, { label: label, index: rowIndex, rowKey: rowIndex, row: row, value: value, className: classes === null || classes === void 0 ? void 0 : classes.simpleCell })));
    };

    var style = makeStyles(function () {
        return createStyles({
            tableCell: {
                overflow: "hidden",
                // margin: 4,
                // whiteSpace: "nowrap",
                display: "flex",
                height: "100%",
                alignItems: "center",
                justifyContent: "center",
                "& >button": {
                    opacity: 0,
                },
                "&:hover >button": {
                    opacity: 1,
                },
                // textAlign: "center",
            },
            checkbox: {
                width: CHECKBOX_SIZE,
                height: CHECKBOX_SIZE,
            },
        });
    });

    var useStyles$4 = makeStyles(function (theme) {
        return createStyles({
            evenRow: {
                backgroundColor: "#f8f8f0",
            },
            oddRow: {},
            tableRow: {
                display: "flex",
                alignItems: "center",
                overflow: "hidden",
                marginTop: commonSidebar.itemHeight,
            },
            tableRowCommon: {
                borderBottom: "solid " + theme.palette.grey[300] + " 1px",
                "&:hover": {
                    backgroundColor: "rgba(0,0,0,0.1)",
                },
            },
            rowCell: {},
            selected: { backgroundColor: "rgba(100,100,255,0.1)" },
            activatedRow: { backgroundColor: "rgba(255,100,255,0.1)" },
        });
    });
    function VirtualTableRow(props) {
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement(SingleVirtualTableRow, __assign({}, props))));
    }
    var SingleVirtualTableRow = function (_a) {
        var _b, _c, _d, _e;
        var style$1 = _a.style, rowIndex = _a.rowIndex, selectable = _a.selectable, classes = _a.classes, width = _a.width, CheckboxProps = _a.CheckboxProps, onRowClick = _a.onRowClick, extraStyles = _a.extraStyles, selectedRowStyle = _a.selectedRowStyle, rest = __rest(_a, ["style", "rowIndex", "selectable", "classes", "width", "CheckboxProps", "onRowClick", "extraStyles", "selectedRowStyle"]);
        var rowClasses = useStyles$4();
        var commonClasses = style();
        var visibleColumns = useTStoreState(function (state) { return state.visibleColumns; });
        var visibleRows = useTStoreState(function (state) { return state.visibleRows; });
        var toggleSingleRow = useTStoreActions(function (actions) { return actions.toggleSingleRow; });
        var calcRowWidth = useCalcTableWidth(visibleColumns, width);
        var activeRow = useTableRowState().activeRow;
        var onRowSelect = React.useCallback(function () {
            onRowClick && onRowClick(rowIndex);
        }, [onRowClick]);
        return (React__default['default'].createElement("div", { style: __assign(__assign(__assign(__assign({}, style$1), extraStyles), (activeRow === rowIndex && selectedRowStyle)), { width: calcRowWidth() }), className: clsx(HESABA_TABLE_ROW_CLASS, rowClasses.tableRow, chooseClass(rowClasses.tableRowCommon, classes === null || classes === void 0 ? void 0 : classes.root), (_b = {}, _b[rowClasses.selected] = visibleRows[rowIndex].selected, _b), (_c = {}, _c[rowClasses.activatedRow] = activeRow === rowIndex, _c), (_d = {},
                _d[(classes === null || classes === void 0 ? void 0 : classes.evenRow) || "tempEvenRow"] = (classes === null || classes === void 0 ? void 0 : classes.evenRow) && rowIndex % 2 === 0,
                _d), (_e = {},
                _e[(classes === null || classes === void 0 ? void 0 : classes.oddRow) || "tempOddRow"] = (classes === null || classes === void 0 ? void 0 : classes.oddRow) && rowIndex % 2 !== 0,
                _e)), onClick: onRowSelect },
            selectable && (React__default['default'].createElement(Checkbox$1, __assign({ checked: visibleRows[rowIndex].selected, onChange: function () {
                    toggleSingleRow({ index: rowIndex });
                }, 
                // name={name}
                color: "primary", classes: { root: commonClasses.checkbox }, onClick: function (e) { return e.stopPropagation(); } }, CheckboxProps))),
            visibleColumns.map(function (props, colIndex) { return (React__default['default'].createElement(React.Fragment, { key: props.key },
                React__default['default'].createElement(Cell, __assign({}, props, rest, { colIndex: colIndex, row: visibleRows[rowIndex], rowIndex: rowIndex, columnsLength: visibleColumns.length, colKey: props.key })))); })));
    };

    var ArrowDown = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-arrow-down" },
            React__default['default'].createElement("path", { d: "M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" })));
    };

    var ArrowUp = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-arrow-up" },
            React__default['default'].createElement("path", { d: "M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" })));
    };

    // import PinIcon from "/assets/icons/common/PinIcon";
    var HeaderIconButton = withStyles(function () { return ({
        root: { margin: 4 },
    }); })(themeLanguage.SmallIconButton);
    var useStyles$3 = makeStyles(function () {
        return createStyles({
            icons: { width: 14, height: 14 },
        });
    });
    var OPTIONS = {
        sortAsc: "Sort ASC",
        sortDesc: "Sort DESC",
        hideColumn: "Hide Column",
        filter: "Filter",
        stick: "Stick",
    };
    var HeaderMenu = function (_a) {
        var index = _a.index, sortable = _a.sortable, columnKey = _a.columnKey, sorted = _a.sorted;
        var classes = useStyles$3();
        var _b = React.useState(null), anchorEl = _b[0], setAnchorEl = _b[1];
        var open = Boolean(anchorEl);
        var handleClick = function (event) {
            setAnchorEl(event.currentTarget);
        };
        var sortTable = useTStoreActions(function (actions) { return actions.sortTable; });
        var filterAdd = useTStoreActions(function (actions) { return actions.filterAdd; });
        // const setStickyColumn = useTStoreActions(
        //   (actions) => actions.setStickyColumn
        // );
        var toggleVisibleColumns = useTStoreActions(function (actions) { return actions.toggleVisibleColumns; });
        var handleClose = function () {
            setAnchorEl(null);
        };
        var sortDesc = function () {
            return sortTable({ index: index, sortType: "DESC", columnKey: columnKey });
        };
        var sortAsc = function () {
            return sortTable({ index: index, sortType: "ASC", columnKey: columnKey });
        };
        // const stickColumn = () => setStickyColumn({ index });
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            sortable && sorted === "DESC" && (React__default['default'].createElement(HeaderIconButton, { onClick: sortAsc },
                React__default['default'].createElement(ArrowUp, { className: classes.icons }))),
            sortable && sorted === "ASC" && (React__default['default'].createElement(HeaderIconButton, { onClick: sortDesc },
                React__default['default'].createElement(ArrowDown, { className: classes.icons }))),
            React__default['default'].createElement(HeaderIconButton, { onClick: handleClick },
                React__default['default'].createElement(MoreVert, { className: classes.icons })),
            React__default['default'].createElement(Menu$1, { disableScrollLock: true, id: "long-menu", anchorEl: anchorEl, keepMounted: true, open: open, onClose: handleClose, PaperProps: {
                    style: {
                    //   maxHeight: ITEM_HEIGHT * 4.5,
                    // width: "20ch",
                    },
                } },
                sortable && React__default['default'].createElement(MenuItem$1, { onClick: sortAsc }, OPTIONS.sortAsc),
                sortable && React__default['default'].createElement(MenuItem$1, { onClick: sortDesc }, OPTIONS.sortDesc),
                React__default['default'].createElement(MenuItem$1, { onClick: function () { return toggleVisibleColumns({ index: index }); } }, OPTIONS.hideColumn),
                React__default['default'].createElement(MenuItem$1, { onClick: function () {
                        filterAdd({ columnKey: columnKey });
                    } }, OPTIONS.filter))));
    };

    var DividerIcon = function (_a) {
        var className = _a.className, rest = __rest(_a, ["className"]);
        return (React__default['default'].createElement(SvgIcon, __assign({ className: className, id: "mdi-dots-vertical" }, rest),
            React__default['default'].createElement("path", { d: "M11 24V5h2v24z" })));
    };

    var useHeadStyles = makeStyles(function (theme) {
        return createStyles({
            columnContainer: {
                display: "flex",
                top: 0,
                left: 0,
                position: "sticky",
                zIndex: 2,
                backgroundColor: "rgba(255,255,255,0.8)",
                alignItems: "center",
                borderBottom: "solid " + theme.palette.grey[300] + " 1px",
            },
            titleText: {
                flex: 1,
                fontFamily: "inherit",
            },
            dividerIcon: {
                pointerEvents: "none",
                display: "inline-block",
                // width: 1.5,
                // height: "100%",
                // backgroundColor: "#444",
                width: RESIZE_HANDLE_WIDTH,
                height: RESIZE_HANDLE_WIDTH,
            },
            dividerIconWrapper: {
                cursor: "col-resize",
                opacity: 0.4,
                "&:hover": {
                    opacity: 1,
                },
            },
        });
    });
    var HeadCell = function (_a) {
        var _b = _a.minWidth, minWidth = _b === void 0 ? ROW_MIN_WIDTH : _b, label = _a.label, colKey = _a.colKey; _a.CellComponent; _a.HeaderComponent; _a.visible; var sorted = _a.sorted, sortable = _a.sortable, resizable = _a.resizable, colIndex = _a.colIndex, 
        // currentWidths,
        classes = _a.classes; _a.sticky; var DividerProps = _a.DividerProps, rest = __rest(_a, ["minWidth", "label", "colKey", "CellComponent", "HeaderComponent", "visible", "sorted", "sortable", "resizable", "colIndex", "classes", "sticky", "DividerProps"]);
        var cellClasses = useHeadStyles();
        var commonClasses = style();
        var currentWidths = useTableSizeState().currentWidths;
        // const setStickyColumn = useStoreActions((actions) => actions.setStickyColumn);
        var calcMinWidth = currentWidths[rest[DATA_FIELD]]
            ? currentWidths[rest[DATA_FIELD]]
            : minWidth;
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("div", __assign({ className: clsx(commonClasses.tableCell, HESABA_TABLE_HEADER_CLASS, classes === null || classes === void 0 ? void 0 : classes.root), style: {
                    minWidth: calcMinWidth || minWidth,
                    width: calcMinWidth || minWidth,
                } }, rest),
                React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(Typography$1, { align: "center", className: clsx(cellClasses.titleText, classes === null || classes === void 0 ? void 0 : classes.title) }, label),
                    React__default['default'].createElement(HeaderMenu, { index: colIndex, sortable: sortable, columnKey: colKey, sorted: sorted }))),
            resizable && (React__default['default'].createElement("div", { className: clsx(DRAG_CLASS, cellClasses.dividerIconWrapper) },
                React__default['default'].createElement(DividerIcon, __assign({ className: clsx(cellClasses.dividerIcon, classes === null || classes === void 0 ? void 0 : classes.divider) }, DividerProps))))));
    };

    var useStyles$2 = makeStyles(function (theme) {
        return createStyles({
            headerContainer: {
                display: "flex",
                top: 0,
                position: "sticky",
                zIndex: 2,
                alignItems: "center",
            },
            commonHeaderContainer: {
                backgroundColor: "rgba(255,255,255,0.8)",
                borderBottom: "solid " + theme.palette.grey[300] + " 1px",
            },
            titleText: {
                flex: 1,
            },
            dividerIcon: {
                pointerEvents: "none",
                width: RESIZE_HANDLE_WIDTH,
                height: RESIZE_HANDLE_WIDTH,
            },
            dividerIconWrapper: {
                cursor: "col-resize",
                opacity: 0.4,
                "&:hover": {
                    opacity: 1,
                },
            },
        });
    });
    var VirtualTableHeader = function (_a) {
        var selectable = _a.selectable, isSelected = _a.isSelected, classes = _a.classes, width = _a.width, CheckboxProps = _a.CheckboxProps, rest = __rest(_a, ["selectable", "isSelected", "classes", "width", "CheckboxProps"]);
        var tableClasses = useStyles$2();
        // const commonClasses = useCommonStyles();
        var commonClasses = style();
        var visibleColumns = useTStoreState(function (state) { return state.visibleColumns; });
        var toggleAllRows = useTStoreActions(function (actions) { return actions.toggleAllRows; });
        var calcRowWidth = useCalcTableWidth(visibleColumns, width);
        return (React__default['default'].createElement("div", { style: {
                height: commonSidebar.itemHeight,
                width: calcRowWidth(),
            }, className: clsx(HESABA_TABLE_ROW_CLASS, tableClasses.headerContainer, chooseClass(tableClasses.commonHeaderContainer, classes === null || classes === void 0 ? void 0 : classes.root)) },
            selectable && (React__default['default'].createElement(Checkbox$1, __assign({ className: clsx("HESABA_TABLE_HEADER_CLASS"), checked: isSelected, onChange: function () {
                    toggleAllRows({ isSelected: isSelected });
                }, color: "primary", classes: { root: commonClasses.checkbox } }, CheckboxProps))),
            visibleColumns.map(function (props, index) { return (React__default['default'].createElement(React.Fragment, { key: props.key },
                React__default['default'].createElement(HeadCell, __assign({}, props, rest, { colIndex: index, colKey: props.key, classes: classes === null || classes === void 0 ? void 0 : classes.cell })))); })));
    };

    var useStyles$1 = makeStyles({
        root: {},
    });
    var outerElementTypeWithId = React.forwardRef(function (props, ref) {
        return React__default['default'].createElement("div", __assign({ id: MAIN_LIST_ID }, props, { ref: ref }));
    });
    var VirtualList = React.memo(React.forwardRef(function (_a, ref) {
        var _b;
        var height = _a.height, width = _a.width, classes = _a.classes, onScroll = _a.onScroll, setTableRef = _a.setTableRef, extraStyle = _a.extraStyle, _c = _a.selectable, selectable = _c === void 0 ? false : _c, _d = _a.itemSize, itemSize = _d === void 0 ? function () { return commonSidebar.itemHeight; } : _d, resizable = _a.resizable, sortable = _a.sortable, VTCommonTableElProps = _a.VTCommonTableElProps, VTRowProps = _a.VTRowProps, VTFilterProps = _a.VTFilterProps, VTHeaderProps = _a.VTHeaderProps;
        var direction = themeLanguage.useLanguageState().direction;
        var visibleRows = useTStoreState(function (state) { return state.visibleRows; });
        var numRowsSelected = useTStoreState(function (state) { return state.numRowsSelected; });
        var tableClasses = useStyles$1();
        if (!visibleRows || visibleRows.length === 0) {
            return null;
        }
        // const [rowSizes, setRowSizes] = useState(
        //   new Array(rows.length).fill(true).reduce((acc, item, i) => {
        //     acc[i] = 50;
        //     return acc;
        //   }, {})
        // );
        // function toggleSize(i: number) {
        //   if (ref) {
        //     (ref as any).resetAfterIndex(i);
        //   }
        //   setRowSizes((prevState: any) => ({
        //     ...prevState.rowSizes,
        //     [i]: prevState.rowSizes[i] === 50 ? 75 : 50,
        //   }));
        // }
        // function getSize(i: number) {
        //   return rowSizes[i];
        // }
        var innerElementType = function (_a) {
            var children = _a.children, style = _a.style, rest = __rest(_a, ["children", "style"]);
            return (React__default['default'].createElement("div", __assign({}, rest, { style: __assign(__assign({}, style), extraStyle) }),
                React__default['default'].createElement(VirtualTableHeader, __assign({ selectable: selectable, isSelected: numRowsSelected !== 0, classes: classes === null || classes === void 0 ? void 0 : classes.header, width: width, resizable: resizable, sortable: sortable }, VTCommonTableElProps, VTHeaderProps, VTFilterProps)),
                children));
        };
        return (React__default['default'].createElement(VariableSizeList
        // style={{ position: "absolute", ...extraStyle }}
        , { 
            // style={{ position: "absolute", ...extraStyle }}
            ref: ref, direction: direction, height: height, itemCount: visibleRows.length, onScroll: onScroll, itemSize: itemSize, itemKey: function (index) { return "" + index; }, width: width, itemData: visibleRows, outerRef: setTableRef, innerElementType: innerElementType, className: clsx(tableClasses.root, (_b = classes === null || classes === void 0 ? void 0 : classes.table) === null || _b === void 0 ? void 0 : _b.root), outerElementType: outerElementTypeWithId }, function (_a) {
            var index = _a.index, rest = __rest(_a, ["index"]);
            return (React__default['default'].createElement(VirtualTableRow, __assign({ rowIndex: index, selectable: selectable, classes: classes === null || classes === void 0 ? void 0 : classes.row, width: width }, VTCommonTableElProps, VTRowProps, rest)));
        }));
    }));

    var ArrowRightIcon = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-chevron-right" },
            React__default['default'].createElement("path", { d: "M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" })));
    };

    var ArrowLeftIcon = function (_a) {
        var className = _a.className;
        return (React__default['default'].createElement(SvgIcon, { className: className, id: "mdi-chevron-left" },
            React__default['default'].createElement("path", { d: "M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" })));
    };

    var useStyles = makeStyles(function (theme) {
        return createStyles({
            paginationRoot: {
                display: "flex",
                width: "100%",
                border: 0,
                flexWrap: "wrap",
                borderTop: "solid 1px " + theme.palette.grey[300],
                alignItems: "center",
                justifyContent: "space-between",
            },
            actions: {
                flexShrink: 0,
                marginLeft: 20,
            },
            toolbar: {
                minHeight: 52,
                paddingRight: 2,
            },
            spacer: {
                flex: "1 1 100%",
            },
            /* Styles applied to the caption Typography components if `variant="caption"`. */
            caption: {
                flexShrink: 0,
            },
            selectRoot: {
                fontFamily: "inherit",
            },
            selectRootLTR: {
                marginRight: 32,
                marginLeft: 8,
            },
            selectRootRTL: {
                marginRight: 8,
                marginLeft: 32,
            },
            /* Styles applied to the Select component `select` class. */
            select: {
                paddingLeft: 8,
                paddingRight: 24,
                textAlign: "right",
                textAlignLast: "right", // Align <select> on Chrome.
            },
            // TODO v5: remove
            /* Styles applied to the Select component `icon` class. */
            selectIcon: {},
            input: {
                color: "inherit",
                fontSize: "inherit",
                flexShrink: 0,
            },
            menuItem: {},
            selectContainer: { display: "flex" },
        });
    });
    function ActionsComponent(_a) {
        var page = _a.page, onPageChange = _a.onPageChange, count = _a.count, rowsPerPage = _a.rowsPerPage;
        var t = themeLanguage.useTranslation().t;
        // const handleFirstPageButtonClick = (event: any) => {
        //   onPageChange(event, 0);
        // };
        var handleBackButtonClick = function (event) {
            onPageChange(event, page - 1);
        };
        var handleNextButtonClick = function (event) {
            onPageChange(event, page + 1);
        };
        // const handleLastPageButtonClick = (event: any) => {
        //   onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
        // };
        return (React__default['default'].createElement("div", { style: { display: "flex", direction: "ltr" } },
            React__default['default'].createElement(themeLanguage.ButtonTooltip, { title: t === null || t === void 0 ? void 0 : t.prev, onClick: handleBackButtonClick, disabled: page === 0, color: "inherit" },
                React__default['default'].createElement(ArrowLeftIcon, null)),
            React__default['default'].createElement(themeLanguage.ButtonTooltip, { title: t === null || t === void 0 ? void 0 : t.next, onClick: handleNextButtonClick, disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false, color: "inherit" },
                React__default['default'].createElement(ArrowRightIcon, null))));
    }
    function defaultLabelDisplayedRows(_a) {
        var from = _a.from, to = _a.to, count = _a.count;
        var t = themeLanguage.useTranslation().t;
        return from + "-" + to + " " + (t === null || t === void 0 ? void 0 : t.of) + " " + (count !== -1 ? count : "" + (t === null || t === void 0 ? void 0 : t.moreThan) + to);
    }
    function TablePagination(_a) {
        var _b, _c;
        var classes = _a.classes, width = _a.width, _d = _a.rowsPerPageOptions, rowsPerPageOptions = _d === void 0 ? [10, 25, 50, 100] : _d, page = _a.page, count = _a.count, rowsPerPage = _a.rowsPerPage, onRowsPerPageChange = _a.onRowsPerPageChange, height = _a.height, rest = __rest(_a, ["classes", "width", "rowsPerPageOptions", "page", "count", "rowsPerPage", "onRowsPerPageChange", "height"]);
        var paginationClasses = useStyles();
        var t = themeLanguage.useTranslation().t;
        var direction = themeLanguage.useLanguageState().direction;
        var numRowsSelected = useTStoreState(function (state) { return state.numRowsSelected; });
        var getLabelDisplayedRowsTo = function () {
            if (count === -1)
                return (page + 1) * rowsPerPage;
            return rowsPerPage === -1
                ? count
                : Math.min(count, (page + 1) * rowsPerPage);
        };
        return (React__default['default'].createElement("div", { className: clsx(paginationClasses.paginationRoot, classes === null || classes === void 0 ? void 0 : classes.root), style: { width: width, direction: direction, height: height || DEFAULT_PAGINATION_HEIGHT } },
            React__default['default'].createElement(Toolbar$1, { className: paginationClasses.toolbar },
                React__default['default'].createElement("div", { className: paginationClasses.spacer }),
                React__default['default'].createElement(themeLanguage.WithFontTypography, { color: "inherit", variant: "body2", className: paginationClasses.caption }, t === null || t === void 0 ? void 0 : t.rowPerPage),
                React__default['default'].createElement(Select$1, { classes: {
                        select: paginationClasses.select,
                        icon: paginationClasses.selectIcon,
                    }, input: React__default['default'].createElement(InputBase$1, { className: clsx(clsx(paginationClasses.input, paginationClasses.selectRoot, (_b = {}, _b[paginationClasses.selectRootLTR] = direction === "ltr", _b), (_c = {}, _c[paginationClasses.selectRootRTL] = direction !== "ltr", _c))) }), value: rowsPerPage, onChange: onRowsPerPageChange }, rowsPerPageOptions.map(function (rowsPerPageOption) { return (React__default['default'].createElement(MenuItem$1, { className: paginationClasses.menuItem, key: rowsPerPageOption, value: rowsPerPageOption }, rowsPerPageOption)); })),
                React__default['default'].createElement(themeLanguage.WithFontTypography, { color: "inherit", variant: "body2", className: paginationClasses.caption }, defaultLabelDisplayedRows({
                    from: count === 0 ? 0 : page * rowsPerPage + 1,
                    to: getLabelDisplayedRowsTo(),
                    count: count === -1 ? -1 : count,
                })),
                React__default['default'].createElement(ActionsComponent, __assign({}, rest))),
            numRowsSelected > 0 && (React__default['default'].createElement(themeLanguage.WithFontTypography, null,
                numRowsSelected,
                " ",
                t.rowSelected))));
    }

    function calcTableHeght(hasToolbar, toolbarHeight, pagination, height) {
        if (!hasToolbar && !pagination)
            return height;
        var tableH = height;
        if (pagination) {
            if (pagination === null || pagination === void 0 ? void 0 : pagination.height)
                tableH -= pagination === null || pagination === void 0 ? void 0 : pagination.height;
            else
                tableH -= DEFAULT_PAGINATION_HEIGHT;
        }
        if (hasToolbar) {
            if (toolbarHeight)
                tableH -= toolbarHeight;
            else
                tableH -= DEFAULT_TOOLBAR_HEIGHT;
        }
        return tableH;
    }

    /**
     * Decorator component that automatically adjusts the width and height of a single child
     */
    var VirtualizaTable = React.memo(function (_a) {
        var _b;
        var rows = _a.rows, columns = _a.columns, _c = _a.width, width = _c === void 0 ? "100%" : _c, height = _a.height, _d = _a.hasFilter, hasFilter = _d === void 0 ? true : _d, _e = _a.hasToolbar, hasToolbar = _e === void 0 ? true : _e, title = _a.title, operationOnRows = _a.operationOnRows, classes = _a.classes, pagination = _a.pagination, tableDataParser = _a.tableDataParser, VTContainerProps = _a.VTContainerProps, VTToolbarProps = _a.VTToolbarProps, rest = __rest(_a, ["rows", "columns", "width", "height", "hasFilter", "hasToolbar", "title", "operationOnRows", "classes", "pagination", "tableDataParser", "VTContainerProps", "VTToolbarProps"]);
        useTableData(columns, rows, tableDataParser);
        var setTableRef = useTableResizer().setTableRef;
        var staticGrid = React.useRef();
        var mainList = React.useRef();
        var onScroll = React.useCallback(function (_a) {
            var scrollOffset = _a.scrollOffset, scrollUpdateWasRequested = _a.scrollUpdateWasRequested;
            if (!scrollUpdateWasRequested && staticGrid.current) {
                staticGrid.current.scrollTo(scrollOffset);
            }
        }, []);
        return (React__default['default'].createElement(VirtualTableContainer, __assign({ classes: classes === null || classes === void 0 ? void 0 : classes.table }, VTContainerProps, { width: width }),
            hasToolbar && (React__default['default'].createElement(TableToolbar, __assign({ title: title, operationOnRows: operationOnRows, classes: classes === null || classes === void 0 ? void 0 : classes.toolbar }, VTToolbarProps))),
            React__default['default'].createElement("div", { role: "table", className: (_b = classes === null || classes === void 0 ? void 0 : classes.table) === null || _b === void 0 ? void 0 : _b.container, style: { display: "flex" } },
                React__default['default'].createElement(Overlay, null),
                React__default['default'].createElement(VirtualList, __assign({ ref: mainList, width: width, onScroll: onScroll, classes: classes, setTableRef: setTableRef, height: calcTableHeght(hasToolbar, VTToolbarProps === null || VTToolbarProps === void 0 ? void 0 : VTToolbarProps.height, pagination, height) }, rest)),
                React__default['default'].createElement(Overlay, null)),
            hasFilter && React__default['default'].createElement(TableFilter, null),
            pagination && (React__default['default'].createElement(TablePagination, __assign({}, pagination, { classes: classes === null || classes === void 0 ? void 0 : classes.footer, width: width })))));
    });

    /**
     * Decorator component that automatically adjusts the width and height of a single child
     */
    var HesabaVirtualTable = function (_a) {
        var direction = _a.direction, language = _a.language, theme = _a.theme, props = __rest(_a, ["direction", "language", "theme"]);
        return (React__default['default'].createElement(TableStoreProvider, null,
            React__default['default'].createElement(Provider, { direction: direction, language: language, theme: theme },
                React__default['default'].createElement(VirtualizaTable, __assign({}, props)))));
    };

    /**
     * Detect Element Resize.
     * https://github.com/sdecima/javascript-detect-element-resize
     * Sebastian Decima
     *
     * Forked from version 0.5.3; includes the following modifications:
     * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
     * 2) Defer initialization code via a top-level function wrapper (to support SSR).
     * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
     * 4) Add nonce for style element.
     **/

    function createDetectElementResize(nonce) {
      // Check `document` and `window` in case of server-side rendering
      var _window;
      if (typeof window !== 'undefined') {
        _window = window;
      } else if (typeof self !== 'undefined') {
        _window = self;
      } else {
        _window = global;
      }

      var attachEvent = typeof document !== 'undefined' && document.attachEvent;

      if (!attachEvent) {
        var requestFrame = function () {
          var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
            return _window.setTimeout(fn, 20);
          };
          return function (fn) {
            return raf(fn);
          };
        }();

        var cancelFrame = function () {
          var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
          return function (id) {
            return cancel(id);
          };
        }();

        var resetTriggers = function resetTriggers(element) {
          var triggers = element.__resizeTriggers__,
              expand = triggers.firstElementChild,
              contract = triggers.lastElementChild,
              expandChild = expand.firstElementChild;
          contract.scrollLeft = contract.scrollWidth;
          contract.scrollTop = contract.scrollHeight;
          expandChild.style.width = expand.offsetWidth + 1 + 'px';
          expandChild.style.height = expand.offsetHeight + 1 + 'px';
          expand.scrollLeft = expand.scrollWidth;
          expand.scrollTop = expand.scrollHeight;
        };

        var checkTriggers = function checkTriggers(element) {
          return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
        };

        var scrollListener = function scrollListener(e) {
          // Don't measure (which forces) reflow for scrolls that happen inside of children!
          if (e.target.className && typeof e.target.className.indexOf === 'function' && e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
            return;
          }

          var element = this;
          resetTriggers(this);
          if (this.__resizeRAF__) {
            cancelFrame(this.__resizeRAF__);
          }
          this.__resizeRAF__ = requestFrame(function () {
            if (checkTriggers(element)) {
              element.__resizeLast__.width = element.offsetWidth;
              element.__resizeLast__.height = element.offsetHeight;
              element.__resizeListeners__.forEach(function (fn) {
                fn.call(element, e);
              });
            }
          });
        };

        /* Detect CSS Animations support to detect element display/re-attach */
        var animation = false,
            keyframeprefix = '',
            animationstartevent = 'animationstart',
            domPrefixes = 'Webkit Moz O ms'.split(' '),
            startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
            pfx = '';
        {
          var elm = document.createElement('fakeelement');
          if (elm.style.animationName !== undefined) {
            animation = true;
          }

          if (animation === false) {
            for (var i = 0; i < domPrefixes.length; i++) {
              if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
                pfx = domPrefixes[i];
                keyframeprefix = '-' + pfx.toLowerCase() + '-';
                animationstartevent = startEvents[i];
                animation = true;
                break;
              }
            }
          }
        }

        var animationName = 'resizeanim';
        var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
        var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';
      }

      var createStyles = function createStyles(doc) {
        if (!doc.getElementById('detectElementResize')) {
          //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
          var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
              head = doc.head || doc.getElementsByTagName('head')[0],
              style = doc.createElement('style');

          style.id = 'detectElementResize';
          style.type = 'text/css';

          if (nonce != null) {
            style.setAttribute('nonce', nonce);
          }

          if (style.styleSheet) {
            style.styleSheet.cssText = css;
          } else {
            style.appendChild(doc.createTextNode(css));
          }

          head.appendChild(style);
        }
      };

      var addResizeListener = function addResizeListener(element, fn) {
        if (attachEvent) {
          element.attachEvent('onresize', fn);
        } else {
          if (!element.__resizeTriggers__) {
            var doc = element.ownerDocument;
            var elementStyle = _window.getComputedStyle(element);
            if (elementStyle && elementStyle.position == 'static') {
              element.style.position = 'relative';
            }
            createStyles(doc);
            element.__resizeLast__ = {};
            element.__resizeListeners__ = [];
            (element.__resizeTriggers__ = doc.createElement('div')).className = 'resize-triggers';
            var expandTrigger = doc.createElement('div');
            expandTrigger.className = 'expand-trigger';
            expandTrigger.appendChild(doc.createElement('div'));
            var contractTrigger = doc.createElement('div');
            contractTrigger.className = 'contract-trigger';
            element.__resizeTriggers__.appendChild(expandTrigger);
            element.__resizeTriggers__.appendChild(contractTrigger);
            element.appendChild(element.__resizeTriggers__);
            resetTriggers(element);
            element.addEventListener('scroll', scrollListener, true);

            /* Listen for a css animation to detect element display/re-attach */
            if (animationstartevent) {
              element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
                if (e.animationName == animationName) {
                  resetTriggers(element);
                }
              };
              element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
            }
          }
          element.__resizeListeners__.push(fn);
        }
      };

      var removeResizeListener = function removeResizeListener(element, fn) {
        if (attachEvent) {
          element.detachEvent('onresize', fn);
        } else {
          element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
          if (!element.__resizeListeners__.length) {
            element.removeEventListener('scroll', scrollListener, true);
            if (element.__resizeTriggers__.__animationListener__) {
              element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
              element.__resizeTriggers__.__animationListener__ = null;
            }
            try {
              element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
            } catch (e) {
              // Preact compat; see developit/preact-compat/issues/228
            }
          }
        }
      };

      return {
        addResizeListener: addResizeListener,
        removeResizeListener: removeResizeListener
      };
    }

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    var inherits = function (subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn = function (self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    var AutoSizer$1 = function (_React$PureComponent) {
      inherits(AutoSizer, _React$PureComponent);

      function AutoSizer() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, AutoSizer);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AutoSizer.__proto__ || Object.getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
          height: _this.props.defaultHeight || 0,
          width: _this.props.defaultWidth || 0
        }, _this._onResize = function () {
          var _this$props = _this.props,
              disableHeight = _this$props.disableHeight,
              disableWidth = _this$props.disableWidth,
              onResize = _this$props.onResize;


          if (_this._parentNode) {
            // Guard against AutoSizer component being removed from the DOM immediately after being added.
            // This can result in invalid style values which can result in NaN values if we don't handle them.
            // See issue #150 for more context.

            var _height = _this._parentNode.offsetHeight || 0;
            var _width = _this._parentNode.offsetWidth || 0;

            var _style = window.getComputedStyle(_this._parentNode) || {};
            var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;
            var paddingRight = parseInt(_style.paddingRight, 10) || 0;
            var paddingTop = parseInt(_style.paddingTop, 10) || 0;
            var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;

            var newHeight = _height - paddingTop - paddingBottom;
            var newWidth = _width - paddingLeft - paddingRight;

            if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
              _this.setState({
                height: _height - paddingTop - paddingBottom,
                width: _width - paddingLeft - paddingRight
              });

              onResize({ height: _height, width: _width });
            }
          }
        }, _this._setRef = function (autoSizer) {
          _this._autoSizer = autoSizer;
        }, _temp), possibleConstructorReturn(_this, _ret);
      }

      createClass(AutoSizer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          var nonce = this.props.nonce;

          if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {
            // Delay access of parentNode until mount.
            // This handles edge-cases where the component has already been unmounted before its ref has been set,
            // As well as libraries like react-lite which have a slightly different lifecycle.
            this._parentNode = this._autoSizer.parentNode;

            // Defer requiring resize handler in order to support server-side rendering.
            // See issue #41
            this._detectElementResize = createDetectElementResize(nonce);
            this._detectElementResize.addResizeListener(this._parentNode, this._onResize);

            this._onResize();
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this._detectElementResize && this._parentNode) {
            this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var _props = this.props,
              children = _props.children,
              className = _props.className,
              disableHeight = _props.disableHeight,
              disableWidth = _props.disableWidth,
              style = _props.style;
          var _state = this.state,
              height = _state.height,
              width = _state.width;

          // Outer div should not force width/height since that may prevent containers from shrinking.
          // Inner component should overflow and use calculated width/height.
          // See issue #68 for more information.

          var outerStyle = { overflow: 'visible' };
          var childParams = {};

          // Avoid rendering children before the initial measurements have been collected.
          // At best this would just be wasting cycles.
          var bailoutOnChildren = false;

          if (!disableHeight) {
            if (height === 0) {
              bailoutOnChildren = true;
            }
            outerStyle.height = 0;
            childParams.height = height;
          }

          if (!disableWidth) {
            if (width === 0) {
              bailoutOnChildren = true;
            }
            outerStyle.width = 0;
            childParams.width = width;
          }

          return React.createElement(
            'div',
            {
              className: className,
              ref: this._setRef,
              style: _extends({}, outerStyle, style) },
            !bailoutOnChildren && children(childParams)
          );
        }
      }]);
      return AutoSizer;
    }(React.PureComponent);

    AutoSizer$1.defaultProps = {
      onResize: function onResize() {},
      disableHeight: false,
      disableWidth: false,
      style: {}
    };

    /**
     * Decorator component that automatically adjusts the width and height of a single child
     */
    var AutoSizer = function (_a) {
        var className = _a.className, width = _a.width, height = _a.height, children = _a.children, onResize = _a.onResize;
        var disableWidth = typeof width === "number";
        var disableHeight = typeof height === "number";
        if (disableWidth && disableHeight) {
            return (React__default['default'].createElement("div", { className: className, style: { width: width, height: height, position: "relative" } }, children({ width: width, height: height })));
        }
        return (React__default['default'].createElement(AutoSizer$1, { className: className, disableWidth: disableWidth, disableHeight: disableHeight, onResize: onResize }, children));
    };

    exports.AutoSizer = AutoSizer;
    exports.HesabaVirtualTable = HesabaVirtualTable;
    exports.MAIN_LIST_ID = MAIN_LIST_ID;
    exports.Provider = Provider;
    exports.TableRowProvider = TableRowProvider;
    exports.TableSizeProvider = TableSizeProvider;
    exports.TableStoreProvider = TableStoreProvider;
    exports.TableToolbar = TableToolbar;
    exports.ToolbarMoreVert = ToolbarMoreVert;
    exports.ToolbarOperation = ToolbarOperation;
    exports.VirtualTableContainer = VirtualTableContainer;
    exports.createEnhancedColumns = createEnhancedColumns;
    exports.createEnhancedRows = createEnhancedRows;
    exports.parseTableData = parseTableData;
    exports.useStore = useStore;
    exports.useStoreDispatch = useStoreDispatch;
    exports.useTStoreActions = useTStoreActions;
    exports.useTStoreState = useTStoreState;
    exports.useTableRowAction = useTableRowAction;
    exports.useTableRowState = useTableRowState;
    exports.useTableSizeAction = useTableSizeAction;
    exports.useTableSizeState = useTableSizeState;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
