{"version":3,"sources":["../../src/table/TDTable.tsx"],"names":["useStyles","theme","root","width","backgroundColor","display","header","borderBottom","tabRoot","borderTopRightRadius","shape","borderRadius","scrollButton","color","tableContainer","borderWidth","row","border","calcTableHeight","height","mixins","toolbar","minHeight","TDTableContainer","props","onRowClick","TDTable","className","tableClasses","tableProps","operationOnRows","schemaColumns","customSchemaColumns","initialWidth","tabClasses","state","actions","tdStoreTableModel","users","formattedData","dataParser","col","tabIndex","setTabs","Object","keys","map","k","id","username","tabbar","scrollButtons","_","setTabIndex","style","indicatorColor","tabs","commonSchemaColumns","selectedRowStyle","borderRight","table","CheckboxProps","DividerProps","fill","useMenuStyles","icon","iconButton","menu","menuItem","MoreVert","classes","Operations","numRowsSelected","Component","index"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useEffect } from \"react\";\nimport {\n  HesabaVirtualTable,\n  ToolbarMoreVert,\n  useTStoreState,\n} from \"@hesaba/table\";\nimport { TdTableProps } from \"../types/TableType\";\nimport clsx from \"clsx\";\nimport { Tabs, Tab, makeStyles } from \"@material-ui/core\";\nimport { useTDStoreState } from \"../store\";\nimport tdStoreTableModel from \"./tableReducer\";\nimport { useLocalStore } from \"easy-peasy\";\nimport { tableDataParser, commonSchemaColumns } from \"./table.utils\";\nimport { colourNameToHex } from \"../utils/colorConverter\";\nimport { useAutoScroll } from \"./useAutoScroll\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { width: \"100%\", backgroundColor: \"#FFF\", display: \"flex\" },\n  header: {\n    backgroundColor: \"#f1ece7\",\n    borderBottom: \"none\",\n  },\n  tabRoot: { borderTopRightRadius: (theme.shape.borderRadius as number) * 2 },\n  scrollButton: {\n    color: \"#000\",\n    borderTopRightRadius: (theme.shape.borderRadius as number) * 2,\n  },\n  tableContainer: { borderWidth: 0 },\n  row: {\n    // backgroundColor: \"#FFF\",\n    border: \"#999\",\n    borderBottom: \"solid 1px\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(0,0,0,0.1)\",\n      border: \"none\",\n    },\n  },\n}));\n\ntype TDTableCompleteProps = TdTableProps & {\n  height: number | undefined;\n  width: number;\n  initialWidth: number;\n  className: string;\n  theme?: any;\n};\n\nfunction calcTableHeight(height: any, theme?: any) {\n  if (theme?.mixins?.toolbar?.minHeight) {\n    return height - theme?.mixins?.toolbar?.minHeight;\n  }\n  return height - 60;\n}\n\nconst TDTableContainer = memo((props: TDTableCompleteProps) => {\n  const onRowClick = useAutoScroll();\n  return <TDTable {...props} onRowClick={onRowClick} />;\n});\n\nconst TDTable = memo(\n  ({\n    className,\n    tableClasses,\n    tableProps,\n    operationOnRows,\n    onRowClick,\n    schemaColumns: customSchemaColumns,\n    theme,\n    height,\n    width,\n    initialWidth,\n  }: TDTableCompleteProps & { onRowClick: (_: number) => void }) => {\n    const tabClasses = useStyles();\n    const [state, actions] = useLocalStore(() => tdStoreTableModel);\n\n    const users = useTDStoreState((state) => state.users);\n    const formattedData = useTDStoreState((state) => state.formattedData);\n\n    const dataParser = useCallback(\n      (col, row) => {\n        return tableDataParser(col, row, state.tabIndex);\n      },\n      [state.tabIndex]\n    );\n    useEffect(() => {\n      if (users && formattedData) {\n        actions.setTabs(\n          Object.keys(users).map((k) => ({\n            id: `${k}`,\n            username: k,\n            color: users[k],\n          }))\n        );\n      }\n    }, [users, formattedData]);\n\n    return (\n      <div className={clsx(className, tableClasses?.root)} id=\"hesaba-table\">\n        <div style={{}} className={clsx(tabClasses.root, tableClasses?.tabbar)}>\n          <MoreVert />\n          <Tabs\n            value={state.tabIndex}\n            scrollButtons=\"auto\"\n            variant=\"scrollable\"\n            classes={{\n              root: tabClasses.tabRoot,\n              scrollButtons: tabClasses.scrollButton,\n            }}\n            onChange={(_: any, tabIndex: string) =>\n              actions.setTabIndex({\n                tabIndex,\n                color: (users && users[tabIndex]) || \"\",\n              })\n            }\n            TabIndicatorProps={{\n              style: { backgroundColor: state.indicatorColor },\n            }}\n          >\n            {/* <ToolbarMoreVert columns={enhancedColumns} /> */}\n            {state.tabs.map(({ username, color, id }) => (\n              <Tab\n                key={username}\n                value={id}\n                label={username}\n                wrapped\n                style={{ color }}\n              />\n            ))}\n          </Tabs>\n        </div>\n        {operationOnRows && <Operations operationOnRows={operationOnRows} />}\n\n        <HesabaVirtualTable\n          width={width || initialWidth}\n          height={calcTableHeight(height, theme)}\n          columns={customSchemaColumns || commonSchemaColumns}\n          rows={formattedData as any}\n          selectable\n          resizable\n          sortable\n          VTRowProps={{\n            onRowClick,\n            selectedRowStyle: {\n              borderRight: `solid 2px  ${state.indicatorColor}`,\n              backgroundColor: `${colourNameToHex(state.indicatorColor)}22`,\n            },\n          }}\n          hasToolbar={false}\n          tableDataParser={dataParser}\n          theme={theme}\n          classes={\n            {\n              table: { root: tabClasses.tableContainer },\n              header: { root: tabClasses.header },\n              row: { root: tabClasses.row },\n            } as any\n          }\n          VTCommonTableElProps={{\n            CheckboxProps: { style: { color: state.indicatorColor } },\n          }}\n          VTHeaderProps={{\n            DividerProps: { style: { fill: state.indicatorColor } },\n          }}\n          {...tableProps}\n        />\n      </div>\n    );\n  }\n);\n\nconst useMenuStyles = makeStyles({\n  icon: {},\n  iconButton: { color: \"#444\" },\n  menu: { display: \"flex\" },\n  menuItem: {},\n});\n\nconst MoreVert = memo(() => {\n  const classes = useMenuStyles();\n  return <ToolbarMoreVert classes={{ iconButton: classes.iconButton }} />;\n});\n\nconst Operations = memo(\n  ({\n    operationOnRows,\n  }: {\n    operationOnRows: TdTableProps[\"operationOnRows\"];\n  }) => {\n    const numRowsSelected = useTStoreState((state) => state.numRowsSelected);\n    return (\n      <>\n        {numRowsSelected && operationOnRows && (\n          <div>\n            {operationOnRows.map((Component, index) => (\n              <Component index={index} />\n            ))}\n          </div>\n        )}\n      </>\n    );\n  }\n);\n\nexport default TDTableContainer;\n"],"file":"TDTable.js"}