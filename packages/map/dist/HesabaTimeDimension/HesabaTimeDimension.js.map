{"version":3,"sources":["../../src/HesabaTimeDimension/HesabaTimeDimension.tsx"],"names":["HesabaTimeDimension","props","theme","withTable","CommonMap","data","children","playerProps","timeProps","geojsonProps","layerProps","extralLayerProps","mapProps","LegendComponent","classes","tdClasses","rootClass","tdRoot","mapClass","map","mapRoot","PanelMap","tableProps","tableWidth","setTableWidth","setMap","tdRootWithTable","mapRootWithTable","width","height","beforeToggleButton","afterToggleButton","overlayCss","collapsedSize","collapseDirection","onSaveSizes","sizes","invalidateSize","tableRoot"],"mappings":"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","sourcesContent":["import React, { FC, useState } from \"react\";\n\nimport { StyleProvider } from \"@hesaba/theme-language\";\nimport { AutoSizer, TableStoreProvider } from \"@hesaba/table\";\n\nimport TDProvider from \"../provider/Provider\";\nimport useStyles from \"./HesabaTimeDimension.styles\";\nimport HesabaTimeDimensionView from \"../container/HesabaTimeDimensionView\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport { HesabaTimeDimensionProps } from \"../types/HesabaTimeDimension\";\nimport { useParseData } from \"../hooks/useParseData\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\n\nimport TDTable from \"../table/TDTable\";\nimport ThemeMaker from \"../provider/ThemeProvider\";\nimport { SplitPane } from \"react-collapse-pane\";\nimport { Map } from \"leaflet\";\n\nconst HesabaTimeDimension: FC<HesabaTimeDimensionProps> = (\n  props: HesabaTimeDimensionProps\n) => {\n  return (\n    <TDProvider>\n      <StyleProvider theme={props.theme} direction=\"ltr\" language=\"en\">\n        <ThemeMaker>\n          {props.withTable ? <PanelMap {...props} /> : <CommonMap {...props} />}\n        </ThemeMaker>\n      </StyleProvider>\n    </TDProvider>\n  );\n};\n\nconst CommonMap: FC<HesabaTimeDimensionProps> = ({\n  data,\n  children,\n  playerProps = {},\n  timeProps = {},\n  geojsonProps = {},\n  layerProps = {},\n  extralLayerProps,\n  mapProps,\n  LegendComponent,\n  classes,\n}: HesabaTimeDimensionProps) => {\n  useParseData(data);\n  const tdClasses = useStyles();\n  const rootClass = classes?.tdRoot || tdClasses.tdRoot;\n  const mapClass = classes?.map || tdClasses.mapRoot;\n\n  return (\n    <div className={rootClass}>\n      <MapContainer className={mapClass} {...mapProps}>\n        {children ? (\n          children\n        ) : (\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        )}\n\n        <HesabaTimeDimensionView\n          data={data}\n          playerProps={playerProps}\n          timeProps={timeProps}\n          geojsonProps={geojsonProps}\n          layerProps={layerProps}\n          extralLayerProps={extralLayerProps}\n          LegendComponent={LegendComponent}\n        />\n      </MapContainer>\n    </div>\n  );\n};\n\nconst PanelMap: FC<HesabaTimeDimensionProps> = ({\n  data,\n  children,\n  playerProps = {},\n  timeProps = {},\n  geojsonProps = {},\n  layerProps = {},\n  extralLayerProps,\n  mapProps,\n  LegendComponent,\n  tableProps,\n  theme,\n  classes,\n}: HesabaTimeDimensionProps) => {\n  useParseData(data);\n  const tdClasses = useStyles();\n  const [tableWidth, setTableWidth] = useState(0);\n  const [map, setMap] = useState<Map>();\n\n  // function setElementSizes(sizes: Array<number>) {\n  //   if (!hesabaTable.current) {\n  //     hesabaTable.current = document.querySelector(\n  //       \"#hesaba-table\"\n  //     ) as HTMLDivElement;\n  //     hesabaMap.current = document.querySelector(\n  //       \"#hesaba-map\"\n  //     ) as HTMLDivElement;\n  //   } else if (hesabaTable.current && hesabaMap.current) {\n  //     hesabaTable.current.style.width = `${sizes[1]}px`;\n  //     hesabaMap.current.style.width = `${sizes[0]}px`;\n  //   }\n  // }\n  const rootClass = classes?.tdRoot || tdClasses.tdRootWithTable;\n  const mapClass = classes?.map || tdClasses.mapRootWithTable;\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <div style={{ width, height }} className={rootClass}>\n          <SplitPane\n            initialSizes={[(width || 600) / 2, (width || 600) / 2]}\n            split=\"vertical\"\n            collapseOptions={{\n              beforeToggleButton: null as any,\n              afterToggleButton: null as any,\n              overlayCss: { width: 0 },\n              collapsedSize: 100,\n              collapseDirection: \"up\",\n            }}\n            minSizes={[100, 100]}\n            hooks={{\n              // onChange: (sizes) => {\n              //   // setElementSizes(sizes);\n              // },\n              // onCollapse: (sizes) => {\n              //   // setElementSizes(sizes as any);\n              // },\n              onSaveSizes: (sizes) => {\n                map?.invalidateSize();\n                setTableWidth(sizes[1]);\n              },\n            }}\n\n            // collapsedSizes={[toolbar.maxHeight, null]}\n            // minSizes={[100, 500]}\n          >\n            <MapContainer\n              whenCreated={setMap}\n              id=\"hesaba-map\"\n              className={mapClass}\n              {...mapProps}\n            >\n              {children ? (\n                children\n              ) : (\n                <TileLayer\n                  attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n              )}\n\n              <HesabaTimeDimensionView\n                data={data}\n                playerProps={playerProps}\n                timeProps={timeProps}\n                geojsonProps={geojsonProps}\n                layerProps={layerProps}\n                extralLayerProps={extralLayerProps}\n                LegendComponent={LegendComponent}\n              />\n            </MapContainer>\n\n            <TableStoreProvider>\n              <TDTable\n                className={tdClasses.tableRoot}\n                theme={theme}\n                height={height}\n                width={tableWidth}\n                initialWidth={(width || 800) / 2}\n                {...tableProps}\n              />\n            </TableStoreProvider>\n          </SplitPane>\n        </div>\n      )}\n    </AutoSizer>\n  );\n};\n\nexport default HesabaTimeDimension;\n"],"file":"HesabaTimeDimension.js"}