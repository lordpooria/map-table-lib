{"version":3,"sources":["../../src/player/playerReducer.ts"],"names":["DEFAULT_TRANSITION","playerStoreModel","smallPlayerSize","isPlaying","isReversePlaying","isRecording","transitionTime","bufferSize","timeSliderRange","min","max","speedSliderRange","timeSlider","speedSlider","Math","round","setPlayerSize","state","isSmall","setPlay","setReversePlay","setRecording","setTimeSliderRange","setTimeSliderValue","setSpeedSliderRange","setSpeedSliderValue","setTransitionTime","animationFinished"],"mappings":";;;;;;;AAAA;;AAIA,MAAMA,kBAAkB,GAAG,IAA3B;AAgCO,MAAMC,gBAAkC,GAAG;AAChDC,EAAAA,eAAe,EAAE,KAD+B;AAEhDC,EAAAA,SAAS,EAAE,KAFqC;AAGhDC,EAAAA,gBAAgB,EAAE,KAH8B;AAIhDC,EAAAA,WAAW,EAAE,KAJmC;AAKhDC,EAAAA,cAAc,EAAEN,kBALgC;AAMhDO,EAAAA,UAAU,EAAE,CANoC;AAOhDC,EAAAA,eAAe,EAAE;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAP+B;AAQhDC,EAAAA,gBAAgB,EAAE;AAAEF,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAR8B;AAShDE,EAAAA,UAAU,EAAE,CAToC;AAUhDC,EAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAW,QAAQf,kBAAnB,IAAyC,EAVN;AAYhDgB,EAAAA,aAAa,EAAE,uBAAO,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAwB;AAC5CD,IAAAA,KAAK,CAACf,eAAN,GAAwBgB,OAAxB;AACD,GAFc,CAZiC;AAehDC,EAAAA,OAAO,EAAE,uBAAO,CAACF,KAAD,EAAQd,SAAR,KAAsB;AACpCc,IAAAA,KAAK,CAACd,SAAN,GAAkBA,SAAlB;AACD,GAFQ,CAfuC;AAkBhDiB,EAAAA,cAAc,EAAE,uBAAO,CAACH,KAAD,EAAQd,SAAR,KAAsB;AAC3Cc,IAAAA,KAAK,CAACb,gBAAN,GAAyBD,SAAzB;AACD,GAFe,CAlBgC;AAqBhDkB,EAAAA,YAAY,EAAE,uBAAO,CAACJ,KAAD,EAAQZ,WAAR,KAAwB;AAC3CY,IAAAA,KAAK,CAACZ,WAAN,GAAoBA,WAApB;AACD,GAFa,CArBkC;AAwBhDiB,EAAAA,kBAAkB,EAAE,uBAAO,CAACL,KAAD,EAAQL,UAAR,KAAuB;AAChDK,IAAAA,KAAK,CAACT,eAAN,GAAwBI,UAAxB;AACD,GAFmB,CAxB4B;AA2BhDW,EAAAA,kBAAkB,EAAE,uBAAO,CAACN,KAAD,EAAQL,UAAR,KAAuB;AAChDK,IAAAA,KAAK,CAACL,UAAN,GAAmBA,UAAnB;AACD,GAFmB,CA3B4B;AA8BhDY,EAAAA,mBAAmB,EAAE,uBAAO,CAACP,KAAD,EAAQJ,WAAR,KAAwB;AAClDI,IAAAA,KAAK,CAACN,gBAAN,GAAyBE,WAAzB;AACD,GAFoB,CA9B2B;AAiChDY,EAAAA,mBAAmB,EAAE,uBAAO,CAACR,KAAD,EAAQJ,WAAR,KAAwB;AAClDI,IAAAA,KAAK,CAACJ,WAAN,GAAoBA,WAApB;AACD,GAFoB,CAjC2B;AAoChDa,EAAAA,iBAAiB,EAAE,uBAAO,CAACT,KAAD,EAAQ;AAAEX,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAR,KAA2C;AACnEU,IAAAA,KAAK,CAACV,UAAN,GAAmBA,UAAnB;AACAU,IAAAA,KAAK,CAACX,cAAN,GAAuBA,cAAvB;AACAW,IAAAA,KAAK,CAACJ,WAAN,GAAoBC,IAAI,CAACC,KAAL,CAAW,QAAQT,cAAnB,IAAqC,EAAzD;AACD,GAJkB,CApC6B;AA0ChDqB,EAAAA,iBAAiB,EAAE,uBAAO,MAAM,CAAE,CAAf;AA1C6B,CAA3C","sourcesContent":["import { action, Action } from \"easy-peasy\";\n\ntype SliderValue = { min: number; max: number };\n\nconst DEFAULT_TRANSITION = 1000;\n\nexport interface PlayerStoreModel {\n  smallPlayerSize: boolean;\n  isPlaying: boolean;\n  isReversePlaying: boolean;\n  isRecording: boolean;\n  transitionTime: number;\n  bufferSize: number;\n  timeSliderRange: SliderValue;\n  timeSlider: number;\n  speedSliderRange: SliderValue;\n  speedSlider: number;\n\n  setPlayerSize: Action<PlayerStoreModel, { isSmall: boolean }>;\n  setPlay: Action<PlayerStoreModel, boolean>;\n  setReversePlay: Action<PlayerStoreModel, boolean>;\n  setRecording: Action<PlayerStoreModel, boolean>;\n\n  setTimeSliderRange: Action<PlayerStoreModel, SliderValue>;\n  setTimeSliderValue: Action<PlayerStoreModel, number>;\n  setSpeedSliderRange: Action<PlayerStoreModel, SliderValue>;\n  setSpeedSliderValue: Action<PlayerStoreModel, number>;\n\n  setTransitionTime: Action<\n    PlayerStoreModel,\n    { transitionTime: number; bufferSize: number }\n  >;\n\n  animationFinished: Action<PlayerStoreModel>;\n}\n\nexport const playerStoreModel: PlayerStoreModel = {\n  smallPlayerSize: false,\n  isPlaying: false,\n  isReversePlaying: false,\n  isRecording: false,\n  transitionTime: DEFAULT_TRANSITION,\n  bufferSize: 5,\n  timeSliderRange: { min: 0, max: 0 },\n  speedSliderRange: { min: 0, max: 0 },\n  timeSlider: 0,\n  speedSlider: Math.round(10000 / DEFAULT_TRANSITION) / 10,\n\n  setPlayerSize: action((state, { isSmall }) => {\n    state.smallPlayerSize = isSmall;\n  }),\n  setPlay: action((state, isPlaying) => {\n    state.isPlaying = isPlaying;\n  }),\n  setReversePlay: action((state, isPlaying) => {\n    state.isReversePlaying = isPlaying;\n  }),\n  setRecording: action((state, isRecording) => {\n    state.isRecording = isRecording;\n  }),\n  setTimeSliderRange: action((state, timeSlider) => {\n    state.timeSliderRange = timeSlider;\n  }),\n  setTimeSliderValue: action((state, timeSlider) => {\n    state.timeSlider = timeSlider;\n  }),\n  setSpeedSliderRange: action((state, speedSlider) => {\n    state.speedSliderRange = speedSlider;\n  }),\n  setSpeedSliderValue: action((state, speedSlider) => {\n    state.speedSlider = speedSlider;\n  }),\n  setTransitionTime: action((state, { transitionTime, bufferSize }) => {\n    state.bufferSize = bufferSize;\n    state.transitionTime = transitionTime;\n    state.speedSlider = Math.round(10000 / transitionTime) / 10;\n  }),\n\n  animationFinished: action(() => {}),\n};\n"],"file":"playerReducer.js"}