{"version":3,"sources":["../../src/player/usePlayer.ts"],"names":["usePlayer","loop","transitionTime","animationFinished","steps","startedOver","autoPlay","setPlay","setReversePlay","isReversePlaying","intervalID","undefined","nextTime","actions","previousTime","setCurrentTimeIndex","formattedData","state","upperLimitIndex","lowerLimitIndex","currentTimeIndex","play","numSteps","playReverse","current","stop","startReverse","start","clearInterval","_getMaxIndex","Math","min","length","Infinity","maxIndex","maxForward","maxBackward","startOver","index","window","setInterval"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef } from \"react\";\nimport { useTDStoreActions, useTDStoreState } from \"../store/reducerHooks\";\n\ninterface Props {\n  bufferSize: any;\n  // minBufferReady: number;\n  loop: any;\n  transitionTime: any;\n  animationFinished: any;\n\n  steps: number;\n  // loadingTimeout: number;\n  startedOver: boolean;\n  autoPlay: boolean;\n  isReversePlaying: boolean;\n  setPlay: (_: boolean) => void;\n  setReversePlay: (_: boolean) => void;\n}\n\nexport const usePlayer = ({\n  loop,\n  transitionTime,\n  animationFinished,\n\n  steps,\n  startedOver,\n  autoPlay,\n  setPlay,\n  setReversePlay,\n  isReversePlaying,\n}: Props) => {\n  const intervalID = useRef<number | undefined>(undefined);\n\n  const nextTime = useTDStoreActions((actions) => actions.nextTime);\n  const previousTime = useTDStoreActions((actions) => actions.previousTime);\n  const setCurrentTimeIndex = useTDStoreActions(\n    (actions) => actions.setCurrentTimeIndex\n  );\n\n  const formattedData = useTDStoreState((state) => state.formattedData);\n  const upperLimitIndex = useTDStoreState((state) => state.upperLimitIndex);\n  const lowerLimitIndex = useTDStoreState((state) => state.lowerLimitIndex);\n\n  const currentTimeIndex = useTDStoreState((state) => state.currentTimeIndex);\n\n  const play = useCallback(() => {\n    nextTime({ numSteps: steps, loop });\n  }, [steps, loop]);\n\n  const playReverse = useCallback(() => {\n    previousTime({ numSteps: steps, loop });\n  }, [steps, loop]);\n\n  useEffect(() => {\n    if (intervalID.current) {\n      if (isReversePlaying) {\n        stop();\n        startReverse();\n      } else {\n        stop();\n        start();\n      }\n    }\n  }, [transitionTime, isReversePlaying]);\n\n  const stop = useCallback(() => {\n    if (!intervalID.current) return;\n    clearInterval(intervalID.current);\n    setPlay(false);\n    setReversePlay(false);\n    intervalID.current = undefined;\n  }, [setPlay, setReversePlay]);\n\n  const _getMaxIndex = useCallback(() => {\n    return Math.min(formattedData.length - 1, upperLimitIndex || Infinity);\n  }, [formattedData, upperLimitIndex]);\n\n  useEffect(() => {\n    const maxIndex = _getMaxIndex();\n    const maxForward = currentTimeIndex >= maxIndex && steps > 0;\n    const maxBackward = currentTimeIndex == 0 && steps < 0;\n\n    if (maxForward || maxBackward) {\n      // we reached the last step\n      if (!loop) {\n        stop();\n        animationFinished();\n        return;\n      }\n    }\n  }, [stop, loop, _getMaxIndex, currentTimeIndex]);\n\n  const start = useCallback(() => {\n    if (intervalID.current) return;\n\n    var startOver = false;\n\n    if (startedOver) {\n      if (currentTimeIndex === _getMaxIndex()) {\n        setCurrentTimeIndex({ index: lowerLimitIndex || 0 });\n        startOver = true;\n      }\n    }\n\n    setPlay(true);\n    intervalID.current = window?.setInterval(play, transitionTime);\n    if (!startOver) play();\n  }, [\n    play,\n    startedOver,\n    _getMaxIndex,\n    currentTimeIndex,\n    setCurrentTimeIndex,\n    lowerLimitIndex,\n    setPlay,\n    transitionTime,\n  ]);\n\n  const startReverse = useCallback(() => {\n    if (intervalID.current) return;\n\n    var startOver = false;\n\n    if (startedOver) {\n      if (currentTimeIndex === 0) {\n        setCurrentTimeIndex({ index: upperLimitIndex || _getMaxIndex() });\n        startOver = true;\n      }\n    }\n\n    setReversePlay(true);\n    intervalID.current = window.setInterval(playReverse, transitionTime);\n    if (!startOver) playReverse();\n  }, [\n    play,\n    startedOver,\n    currentTimeIndex,\n    _getMaxIndex,\n    setCurrentTimeIndex,\n    upperLimitIndex,\n    setReversePlay,\n    transitionTime,\n  ]);\n\n  useEffect(() => {\n    if (autoPlay) {\n      start();\n    }\n  }, [autoPlay, formattedData]);\n\n  useEffect(() => {\n    return () => {\n      intervalID.current && clearInterval(intervalID.current);\n    };\n  }, []);\n  return { start, stop, startReverse };\n};\n"],"file":"usePlayer.js"}