{"version":3,"sources":["../../src/hooks/useParseData.ts"],"names":["useParseData","data","setFormattedData","actions","setData","featuresIdx","findIndex","d","features","usersIdx","idx","Array","isArray","mergedData","reduce","acc","cur","properties","time","push","formattedData","Object","values","sort","a","b","users"],"mappings":";;;;;;;AAAA;;AACA;;AAIO,SAASA,YAAT,CAAsBC,IAAtB,EAAyC;AAC9C,QAAMC,gBAAgB,GAAG,8BAAmBC,OAAD,IAAaA,OAAO,CAACC,OAAvC,CAAzB;AAEA,wBAAU,MAAM;AACd,UAAMC,WAAW,GAAGJ,IAAI,CAACK,SAAL,CAAgBC,CAAD,IAAYA,CAAZ,aAAYA,CAAZ,uBAAYA,CAAC,CAAEC,QAA9B,CAApB;AAEA,UAAMC,QAAQ,GAAGR,IAAI,CAACK,SAAL,CAAe,CAACC,CAAD,EAASG,GAAT,KAAiB;AAC/C,UAAIA,GAAG,KAAKL,WAAZ,EAAyB;AACvB,eAAO,IAAP;AACD;;AACD,UAAI,CAACM,KAAK,CAACC,OAAN,CAAcL,CAAd,CAAL,EAAuB,OAAOA,CAAP;AACvB,aAAO,IAAP;AACD,KANgB,CAAjB;AAQA,UAAMM,UAAU,GAAIZ,IAAI,CAACI,WAAD,CAAL,CAAyCG,QAAzC,CAAkDM,MAAlD,CACjB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA;;AACZ,UAAIA,GAAJ,aAAIA,GAAJ,kCAAIA,GAAG,CAAEC,UAAT,4CAAI,gBAAiBC,IAArB,EAA2B;AACzB,YAAIF,GAAG,CAACC,UAAJ,CAAeC,IAAf,IAAuBH,GAA3B,EAAgC;AAC9BA,UAAAA,GAAG,CAACC,GAAG,CAACC,UAAJ,CAAeC,IAAhB,CAAH,CAAyBV,QAAzB,CAAkCW,IAAlC,CAAuCH,GAAvC;AACA,iBAAOD,GAAP;AACD;;AAED,eAAO,EACL,GAAGA,GADE;AAEL,WAACC,GAAG,CAACC,UAAJ,CAAeC,IAAhB,GAAuB;AACrBA,YAAAA,IAAI,EAAEF,GAAG,CAACC,UAAJ,CAAeC,IADA;AAErBV,YAAAA,QAAQ,EAAE,CAACQ,GAAD;AAFW;AAFlB,SAAP;AAOD;;AACD,aAAOD,GAAP;AACD,KAjBgB,EAkBjB,EAlBiB,CAAnB;AAqBA,UAAMK,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcT,UAAd,EAA0BU,IAA1B,CAA+B,CAACC,CAAD,EAAIC,CAAJ,KACnDD,CAAC,CAACN,IAAF,GAASO,CAAC,CAACP,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CADH,CAAtB;AAGA,UAAMQ,KAAK,GAAGzB,IAAI,CAACQ,QAAD,CAAlB;AACAP,IAAAA,gBAAgB,CAAC;AAAEkB,MAAAA,aAAF;AAAiBM,MAAAA;AAAjB,KAAD,CAAhB;AACD,GArCD,EAqCG,EArCH;AAsCD","sourcesContent":["import { useEffect } from \"react\";\nimport { useTDStoreActions } from \"../store\";\nimport { GeoJSONData, Users } from \"../types\";\nimport { FeatureCollection } from \"geojson\";\n\nexport function useParseData(data: GeoJSONData) {\n  const setFormattedData = useTDStoreActions((actions) => actions.setData);\n\n  useEffect(() => {\n    const featuresIdx = data.findIndex((d: any) => d?.features);\n\n    const usersIdx = data.findIndex((d: any, idx) => {\n      if (idx === featuresIdx) {\n        return null;\n      }\n      if (!Array.isArray(d)) return d;\n      return null;\n    });\n\n    const mergedData = (data[featuresIdx] as FeatureCollection).features.reduce(\n      (acc, cur) => {\n        if (cur?.properties?.time) {\n          if (cur.properties.time in acc) {\n            acc[cur.properties.time].features.push(cur);\n            return acc;\n          }\n\n          return {\n            ...acc,\n            [cur.properties.time]: {\n              time: cur.properties.time,\n              features: [cur],\n            },\n          };\n        }\n        return acc;\n      },\n      {} as Record<string, any>\n    );\n\n    const formattedData = Object.values(mergedData).sort((a, b) =>\n      a.time > b.time ? 1 : -1\n    );\n    const users = data[usersIdx] as Users;\n    setFormattedData({ formattedData, users });\n  }, []);\n}\n"],"file":"useParseData.js"}