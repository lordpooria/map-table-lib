{"version":3,"sources":["../../src/record/VideoRecorder.tsx"],"names":["useVideoRecorder","setRecording","recorder","stream","startRecording","current","navigator","mediaDevices","getDisplayMedia","video","displaySurface","logicalSurface","MediaRecorder","chunks","ondataavailable","e","push","data","onstop","completeBlob","Blob","type","Date","getTime","start","stopRecording","stop","getVideoTracks"],"mappings":";;;;;;;AAAA;;AACA;;;;AAmBA,MAAMA,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AACpD,QAAMC,QAAQ,GAAG,oBAAjB;AACA,QAAMC,MAAM,GAAG,oBAAf;AAGA,QAAMC,cAAc,GAAG,wBAAY,YAAY;AAC7CD,IAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC;AAC5DC,MAAAA,KAAK,EAAE;AACLC,QAAAA,cAAc,EAAE,SADX;AAELC,QAAAA,cAAc,EAAE;AAFX;AADqD,KAAvC,CAAvB;AAOAV,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIO,aAAJ,CAAkBT,MAAM,CAACE,OAAzB,CAAnB;AAEA,UAAMQ,MAAuB,GAAG,EAAhC;;AACAX,IAAAA,QAAQ,CAACG,OAAT,CAAiBS,eAAjB,GAAoCC,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAYD,CAAC,CAACE,IAAd,CAA1C;;AACAf,IAAAA,QAAQ,CAACG,OAAT,CAAiBa,MAAjB,GAA0B,MAAM;AAC9BjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMkB,YAAY,GAAG,IAAIC,IAAJ,CAASP,MAAT,EAAiB;AAAEQ,QAAAA,IAAI,EAAGR,MAAM,CAAC,CAAD,CAAP,CAAmBQ;AAA3B,OAAjB,CAArB;AACA,+BAASF,YAAT,EAAwB,GAAE,IAAIG,IAAJ,GAAWC,OAAX,EAAqB,MAA/C,EAAsD,WAAtD;AAED,KALD;;AAOArB,IAAAA,QAAQ,CAACG,OAAT,CAAiBmB,KAAjB;AACD,GArBsB,EAqBpB,EArBoB,CAAvB;AAuBA,QAAMC,aAAa,GAAG,wBAAY,MAAM;AAAA;;AACtCvB,IAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,iCAAAA,QAAQ,CAAEG,OAAV,wEAAmBqB,IAAnB;AACAvB,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,+BAAAA,MAAM,CAAEE,OAAR,oEAAiBsB,cAAjB,GAAkC,CAAlC,EAAqCD,IAArC;AACD,GAHqB,EAGnB,EAHmB,CAAtB;AAKA,SAAO;AAAEtB,IAAAA,cAAF;AAAkBqB,IAAAA;AAAlB,GAAP;AACD,CAlCD;;eAoCezB,gB","sourcesContent":["import { useCallback, useRef } from \"react\";\nimport download from \"downloadjs\";\n\ndeclare global {\n  interface MediaDevices {\n    getDisplayMedia(constraints?: MediaStreamConstraints): Promise<MediaStream>;\n  }\n\n  // if constraints config still lose some prop, you can define it by yourself also\n  interface MediaTrackConstraintSet {\n    displaySurface?: ConstrainDOMString;\n    logicalSurface?: ConstrainBoolean;\n    // more....\n  }\n}\n\ninterface Props {\n  setRecording: (_: boolean) => void;\n}\n\nconst useVideoRecorder = ({ setRecording }: Props) => {\n  const recorder = useRef<MediaRecorder>();\n  const stream = useRef<MediaStream>();\n  // const videoRef = useRef<HTMLVideoElement>();\n\n  const startRecording = useCallback(async () => {\n    stream.current = await navigator.mediaDevices.getDisplayMedia({\n      video: {\n        displaySurface: \"browser\",\n        logicalSurface: true,\n      },\n    });\n\n    setRecording(true);\n    recorder.current = new MediaRecorder(stream.current);\n\n    const chunks: Array<BlobPart> = [];\n    recorder.current.ondataavailable = (e) => chunks.push(e.data);\n    recorder.current.onstop = () => {\n      setRecording(false);\n      const completeBlob = new Blob(chunks, { type: (chunks[0] as any).type });\n      download(completeBlob, `${new Date().getTime()}.mp4`, \"video/mp4\");\n      // videoRef.current.src = URL.createObjectURL(completeBlob);\n    };\n\n    recorder.current.start();\n  }, []);\n\n  const stopRecording = useCallback(() => {\n    recorder?.current?.stop();\n    stream?.current?.getVideoTracks()[0].stop();\n  }, []);\n\n  return { startRecording, stopRecording };\n};\n\nexport default useVideoRecorder;\n"],"file":"VideoRecorder.js"}